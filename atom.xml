<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冷石</title>
  <icon>https://coldstone.fun/avatar.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://coldstone.fun/"/>
  <updated>2021-06-28T09:25:25.305Z</updated>
  <id>https://coldstone.fun/</id>
  
  <author>
    <name>冷石</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习抽象语法树 AST</title>
    <link href="https://coldstone.fun/post/2021/04/26/learn-ast/"/>
    <id>https://coldstone.fun/post/2021/04/26/learn-ast/</id>
    <published>2021-04-26T07:40:51.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个前端切图仔，工作中少不了用上 Babel，ESLint，Prettier 这些工具，但是这些工具背后的工作原理却不求甚解😅 </p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一个前端切图仔，工作中少不了用上 Babel，ESLint，Prettier 这些工具，但是这些工具背后的工作原理却不求甚解😅 ，最近才尝试去了解一番，没想到发现一个全新的世界，那就是 <code>AST</code> 中文名抽象语法树。</p><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><blockquote><p>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法架构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真是语法中出现的每个细节。比如嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；二类似于 <code>if-condition-then</code>这样的条件跳转语句，可以使用带有三个分支的节点来表示。<br>和抽象语法树相对的是具体语法树（通常称作分析树）。一般的，在源代码的翻译和编译过程中，语法分析器创建出分析树，然后从分析树生成AST。一旦AST被创建出来，在后续的处理过程中，比如语义分析阶段，会添加一些信息。</p></blockquote><p><a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9" target="_blank" rel="noopener">抽象語法樹</a></p><p>让我们从一个全能的函数开始，它返回<a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E5%91%BD%E3%80%81%E5%AE%87%E5%AE%99%E4%BB%A5%E5%8F%8A%E4%BB%BB%E4%BD%95%E4%BA%8B%E6%83%85%E7%9A%84%E7%B5%82%E6%A5%B5%E7%AD%94%E6%A1%88" target="_blank" rel="noopener">生命、宇宙以及任何事情的终极答案</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> answer = <span class="number">42</span></span><br><span class="line">  <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先它是一个函数声明，函数名称为 <code>ask</code> ，函数体内定义了一个常量 answer 值为 42，最后返回 answer。把它输入到一个神奇的网站 <a href="https://astexplorer.net/" target="_blank" rel="noopener">astexplorer</a>，神秘的 <code>AST</code> 终于被揭开了面纱。</p><p><img src="./images/learn-ast/ast.jpeg" alt="ast"></p><p>可以看出 <code>AST</code> 就是一个自上而下的树形结构，每一层有一个或多个节点组成，每个节点有一个 <code>type</code> 属性表示节点的类型，如 “FunctionDeclaration”, “BlockStatement”, “VariableDeclaration”，以及节点的其他属性。（节点的类型定义在 <a href="https://github.com/estree/estree" target="_blank" rel="noopener">ESTree</a> 这个仓库，它包括了 es5 到最新的 js 语法定义）。下图可以更清晰的看出这个函数 <code>AST</code> 的结构，至此我们对 <code>AST</code> 有了初步的认识。</p><p><img src="./images/learn-ast/draw.jpeg" alt="draw"></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>要得到代码的 <code>AST</code>，首先需要对代码进行解析。解析阶段接受源码并输出 <code>AST</code> ，它使用一个解析器对源码进行<strong>词法分析</strong>和<strong>语法分析。</strong> 词法分析将字符串形式的代码转换为一个语法片段数组 <strong>Tokens</strong> ，语法分析阶段把 *<em>Tokens *</em>转换成 <code>AST</code> 形式。</p><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><p><strong>Tokens</strong> 是一个数组，由代码语句的碎片组成，它们可以是数字、标签、标点符号、运算符，或者其它任何东西。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line">a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tokens</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">type</span>: &#123; ... &#125;, <span class="attr">value</span>: <span class="string">"a"</span>, <span class="attr">start</span>: <span class="number">0</span>, <span class="attr">end</span>: <span class="number">1</span>, <span class="attr">loc</span>: &#123; ... &#125; &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: &#123; ... &#125;, <span class="attr">value</span>: <span class="string">"+"</span>, <span class="attr">start</span>: <span class="number">2</span>, <span class="attr">end</span>: <span class="number">3</span>, <span class="attr">loc</span>: &#123; ... &#125; &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: &#123; ... &#125;, <span class="attr">value</span>: <span class="string">"b"</span>, <span class="attr">start</span>: <span class="number">4</span>, <span class="attr">end</span>: <span class="number">5</span>, <span class="attr">loc</span>: &#123; ... &#125; &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>语法分析阶段把 *<em>Tokens *</em> 数组转换成 <code>AST</code> 的形式便于后续操作，详细操作可以查看这里的<a href="https://github.com/starkwang/the-super-tiny-compiler-cn/blob/master/super-tiny-compiler-chinese.js#L446" target="_blank" rel="noopener">代码</a>。</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>有了 <code>AST</code> 就可以对这棵树进行从上到下的递归遍历，过程中访问树的节点，这里使用了一种设计模式 <a href="https://zh.wikipedia.org/wiki/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">访问者模式</a>，通过创建一个访问者 <code>visitor</code> 对象，这个对象中包括一些方法，在遍历 <code>AST</code> 过程中进行匹配，匹配成功就调用访问者的方法。</p><p>通过访问节点可以对源码进行语法检查，ESLint 就是基于此，以下是检测语法的规则示例（关于编写 ESLint 规则的详细内容可以查看此<a href="https://cn.eslint.org/docs/developer-guide/working-with-rules" target="_blank" rel="noopener">链接</a>）</p><h4 id="限制函数参数数量"><a href="#限制函数参数数量" class="headerlink" title="限制函数参数数量"></a>限制函数参数数量</h4><p>思路是匹配类型为 <code>FunctionDeclaration</code> 的节点，<code>FunctionDeclaration</code> 表示这个节点为函数声明，如果函数的参数数量大于 3 个就进行提示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 访问 FunctionDeclaration 节点</span></span><br><span class="line">    FunctionDeclaration: <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 判断函数参数个数</span></span><br><span class="line">      <span class="keyword">if</span> (node.params.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        context.report(&#123;</span><br><span class="line">          node,</span><br><span class="line">          message: <span class="string">"参数最多不能超过3个"</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="./images/learn-ast/params.png" alt="params"></p><h4 id="限制嵌套的条件语句"><a href="#限制嵌套的条件语句" class="headerlink" title="限制嵌套的条件语句"></a>限制嵌套的条件语句</h4><p>匹配类型为 <code>IfStatement</code> 的节点，如果它的第一个子节点还是 <code>IfStatement</code> 就进行提示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    IfStatement(node) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; consequent &#125; = node;</span><br><span class="line">      <span class="keyword">const</span> &#123; body &#125; = consequent;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断第一个子节点类型是否是 IfStatement</span></span><br><span class="line">      <span class="keyword">if</span> (body[<span class="number">0</span>] &amp;&amp; body[<span class="number">0</span>].type === <span class="string">"IfStatement"</span>) &#123;</span><br><span class="line">        context.report(&#123;</span><br><span class="line">          node: body[<span class="number">0</span>],</span><br><span class="line">          message: <span class="string">"不允许嵌套的条件语句"</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./images/learn-ast/if.png" alt="if"></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>在遍历 <code>AST</code> 过程中可以对树的节点进行修改，如添加，移动，替换这些节点，也可以生成全新的 <code>AST</code>。</p><p>Babel 的作用就是修改 <code>AST</code> 上的节点，从而到达修改代码的效果。一个 Babel 插件是一个接收 <code>babel</code> 对象作为参数的函数，返回一个带有 <code>visitor</code> 属性的对象。<code>visitor</code> 对象中的每个函数接受 <code>path</code> 和 <code>state</code> 参数，以下是编写 Babel 插件示例，关于编写 Babel 插件可以查看此<a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-stages-of-babel" target="_blank" rel="noopener">链接</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Babel 插件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">babel</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    visitor: &#123;</span><br><span class="line">      Identifier(path, state) &#123;&#125;,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将-语法转换为-Math-pow"><a href="#将-语法转换为-Math-pow" class="headerlink" title="将 ** 语法转换为 Math.pow"></a>将 <code>**</code> 语法转换为 <code>Math.pow</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">10</span> ** <span class="number">2</span> </span><br><span class="line"><span class="comment">// After</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ol><li>找到 <code>**</code> 语法所在位置</li><li>获取左右操作数</li><li>创建 <code>Math.pow</code> 语句，替换原节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">babel</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">types</span>: t &#125; = babel;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    visitor: &#123;</span><br><span class="line">      <span class="comment">// 访问二元表达式</span></span><br><span class="line">      BinaryExpression(path) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; node &#125; = path</span><br><span class="line">        <span class="comment">// 如果操作符不是 ** 就退出</span></span><br><span class="line">        <span class="keyword">if</span> (node.operator !== <span class="string">'**'</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">const</span> &#123; left, right &#125; = node</span><br><span class="line">        <span class="comment">// 创建调用语句</span></span><br><span class="line">        <span class="keyword">const</span> newNode = t.callExpression(</span><br><span class="line">          t.memberExpression(t.identifier(<span class="string">'Math'</span>), t.identifier(<span class="string">'pow'</span>)),</span><br><span class="line">          [left, right]</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// 替换原节点</span></span><br><span class="line">        path.replaceWith(newNode)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改工具函数引入方式"><a href="#修改工具函数引入方式" class="headerlink" title="修改工具函数引入方式"></a>修改工具函数引入方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">get</span>, isFunction &#125; from 'lodash'</span><br><span class="line">// After</span><br><span class="line">import <span class="keyword">get</span> from "lodash/<span class="keyword">get</span>";</span><br><span class="line">import isFunction from "lodash/isFunction";</span><br></pre></td></tr></table></figure><ol><li>找到 <code>lodash</code> 的 <code>import</code> 节点</li><li>遍历所有的引入值，获取引用的 <code>name</code> 属性</li><li>插入新生成的 <code>import</code> 节点</li><li>删除原节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">babel</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">types</span>: t &#125; = babel;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    visitor: &#123;</span><br><span class="line">      <span class="comment">// 访问导入声明</span></span><br><span class="line">      ImportDeclaration(path) &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; node &#125; = path</span><br><span class="line">        <span class="keyword">if</span> (node.source.value !== <span class="string">'lodash'</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">const</span> val = node.source.value</span><br><span class="line"></span><br><span class="line">        node.specifiers.forEach(<span class="function">(<span class="params">spec</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (t.isImportSpecifier(spec)) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; local &#125; = spec</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 插入新的导入节点</span></span><br><span class="line">            path.insertBefore(</span><br><span class="line">              t.importDeclaration(</span><br><span class="line">                [t.importDefaultSpecifier(local)],</span><br><span class="line">                t.stringLiteral(<span class="string">`<span class="subst">$&#123;val&#125;</span>/<span class="subst">$&#123;local.name&#125;</span>`</span>)</span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 删除原节点</span></span><br><span class="line">        path.remove()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p>就是根据 <code>AST</code> 输出代码，下面通过两个工具说明。</p><h3 id="Jscodeshift"><a href="#Jscodeshift" class="headerlink" title="Jscodeshift"></a>Jscodeshift</h3><p><a href="https://github.com/facebook/jscodeshift" target="_blank" rel="noopener">jscodeshift</a> 是一个 Facebook 开源的用来对 JavaScript 或者 TypeScript 文件运行转换的工具，它的目的是更方便的批量修改代码。它通过接受 *<em>transformer *</em>对源码进行转换，一个 *<em>transformer *</em>就是一个接受 <code>fileInfo</code>, <code>api</code>, <code>options</code> 参数并返回源码的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">fileInfo, api, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// transform `fileInfo.source` here</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// return changed source</span></span><br><span class="line">  <span class="keyword">return</span> source;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>示例，将 <code>&lt;React.Fragment&gt;</code> 转换成 <code>&lt;&gt;``&lt;/&gt;</code> 语法，思路是找到 <code>name</code> 属性为 <code>Fragment</code> 的节点，然后将它的父节点清除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">transformer</span>(<span class="params">file, api</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> j = api.jscodeshift</span><br><span class="line">  <span class="keyword">const</span> root = j(file.source)</span><br><span class="line"></span><br><span class="line">  root.find(j.JSXIdentifier).forEach(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; node &#125; = p</span><br><span class="line">    <span class="keyword">if</span> (node.name !== <span class="string">'Fragment'</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    j(p.parent).remove()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> root.toSource()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./images/learn-ast/header.gif" alt="header"></p><p>更多示例可查看这个<a href="https://github.com/cpojer/js-codemod/" target="_blank" rel="noopener">链接</a></p><h3 id="Gogocode"><a href="#Gogocode" class="headerlink" title="Gogocode"></a>Gogocode</h3><p><a href="https://github.com/thx/gogocode" target="_blank" rel="noopener">gogocode</a> 是最近发现的一个 <code>AST</code> 处理工具，号称全网最简单易上手，可读性最强，提供的示例提供类似于 jQuery 的 API。</p><p>一个替换变量名例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'gogocode'</span>)</span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">  function ask() &#123;</span></span><br><span class="line"><span class="string">    const answer = 42</span></span><br><span class="line"><span class="string">    return answer</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">const</span> newCode = $(code)</span><br><span class="line">  .replace(<span class="string">'ask'</span>, <span class="string">'question'</span>)</span><br><span class="line">  .replace(<span class="string">'answer'</span>, <span class="string">'result'</span>)</span><br><span class="line">  .generate()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newCode)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// function question() &#123;</span></span><br><span class="line"><span class="comment">//   const result = 42</span></span><br><span class="line"><span class="comment">//   return result;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p><img src="./images/learn-ast/gogocode.gif" alt="gogocode"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文解释了什么是 <code>AST</code> 抽象语法树，如何获得代码的 <code>AST</code>，以及对 <code>AST</code> 进行遍历，修改和生成，利用 <code>AST</code> 我们可以开发的代码工具。</p><p><a href="https://github.com/xrr2016/ast-learn" target="_blank" rel="noopener">本文代码地址</a></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/cowchimp/awesome-ast" target="_blank" rel="noopener">Awesome AST</a><br><a href="https://github.com/estree/estree" target="_blank" rel="noopener">The ESTree Spec</a><a href="https://github.com/cowchimp/awesome-ast" target="_blank" rel="noopener"> </a><br><a href="https://github.com/jamiebuilds/babel-handbook" target="_blank" rel="noopener">Babel Handbook</a><br><a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noopener">The Super Tiny Compiler</a><br><a href="https://cn.eslint.org/docs/developer-guide/working-with-rules" target="_blank" rel="noopener">Working with Rules</a><br><a href="https://github.com/facebook/jscodeshift" target="_blank" rel="noopener">jscodeshift</a><br><a href="https://github.com/thx/gogocode" target="_blank" rel="noopener">GOGOCODE</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个前端切图仔，工作中少不了用上 Babel，ESLint，Prettier 这些工具，但是这些工具背后的工作原理却不求甚解😅 &lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Babel" scheme="https://coldstone.fun/tags/Babel/"/>
    
      <category term="AST" scheme="https://coldstone.fun/tags/AST/"/>
    
      <category term="ESLint" scheme="https://coldstone.fun/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>JS 检查元素是否在视口内</title>
    <link href="https://coldstone.fun/post/2021/04/13/js-check-element/"/>
    <id>https://coldstone.fun/post/2021/04/13/js-check-element/</id>
    <published>2021-04-13T02:50:51.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>分享两个监测元素是否在视口内的方法</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>分享两个监测元素是否在视口内的方法</p><h2 id="1-位置计算"><a href="#1-位置计算" class="headerlink" title="1. 位置计算"></a>1. 位置计算</h2><ul><li>使用 <code>Element.getBoundingClientRect()</code> 方法返回元素相对于视口的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isElementVisible = <span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> rect = el.getBoundingClientRect();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>获取浏览器窗口的宽高</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isElementVisible = <span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> rect = el.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">const</span> vWidth = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">  <span class="keyword">const</span> vHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>判断元素是否在视口内，如图所示</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/224563/1618280613646-4e71c246-5d11-45cc-9fb4-b2da5c557249.jpeg#align=left&display=inline&height=600&margin=%5Bobject%20Object%5D&name=Xnip2021-04-13_10-23-24.jpg&originHeight=600&originWidth=800&size=333703&status=done&style=none&width=800" alt="Xnip2021-04-13_10-23-24.jpg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isElementVisible = <span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> rect = el.getBoundingClientRect()</span><br><span class="line">  <span class="keyword">const</span> vWidth = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">  <span class="keyword">const</span> vHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    rect.right &lt; <span class="number">0</span> ||</span><br><span class="line">    rect.bottom &lt; <span class="number">0</span> ||</span><br><span class="line">    rect.left &gt; vWidth ||</span><br><span class="line">    rect.top &gt; vHeight</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getBoundingClientRect</code> 方法会使浏览器发生回流和重绘，性能消耗稍大，但兼容性比 Intersection Observer 要好。</p><h2 id="2-Intersection-Observer"><a href="#2-Intersection-Observer" class="headerlink" title="2. Intersection Observer"></a>2. Intersection Observer</h2><blockquote><p>The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document’s <a href="https://developer.mozilla.org/en-US/docs/Glossary/Viewport" target="_blank" rel="noopener">viewport</a>.</p></blockquote><p>Intersection Observer API提供了一种异步检测目标元素与祖先元素或 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Viewport" target="_blank" rel="noopener">viewport</a> 相交情况变化的方法。在目标元素与视口或者其他指定元素发生交集时和触发配置的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取要监测的元素</span></span><br><span class="line"><span class="keyword">const</span> boxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.box'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建观察者，配置回调函数</span></span><br><span class="line"><span class="comment">// 通过 isIntersecting 属性判断元素与视口是否相交</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line"> entries.forEach(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      entry.target,</span><br><span class="line">      entry.isIntersecting ? <span class="string">"visible"</span> : <span class="string">"invisible"</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">boxes.forEach(<span class="function">(<span class="params">box</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.observe(box);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="js,result" data-user="xrr2016" data-slug-hash="ExZQOGL" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="js check element in viewport">  <span>See the Pen <a href="https://codepen.io/xrr2016/pen/ExZQOGL" target="_blank" rel="noopener">  js check element in viewport</a> by Cold Stone (<a href="https://codepen.io/xrr2016" target="_blank" rel="noopener">@xrr2016</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://dev.to/narendersaini32/how-to-check-an-element-is-in-viewport-4bcl" target="_blank" rel="noopener">how-to-check-an-element-is-in-viewport-4bcl</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener">Intersection Observer API</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享两个监测元素是否在视口内的方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="WEB" scheme="https://coldstone.fun/tags/WEB/"/>
    
      <category term="JS" scheme="https://coldstone.fun/tags/JS/"/>
    
      <category term="Viewport" scheme="https://coldstone.fun/tags/Viewport/"/>
    
  </entry>
  
  <entry>
    <title>JS 文件转换</title>
    <link href="https://coldstone.fun/post/2021/04/01/js-file-transform/"/>
    <id>https://coldstone.fun/post/2021/04/01/js-file-transform/</id>
    <published>2021-04-01T09:52:22.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要将 base64 格式的图片转化成 JS 里的 File 对象进行上传，于是学习了一下这方面的知识</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近需要将 base64 格式的图片转化成 JS 里的 File 对象进行上传，于是学习了一下这方面的知识</p><h2 id="Base64-转-Blob"><a href="#Base64-转-Blob" class="headerlink" title="Base64 转 Blob"></a>Base64 转 Blob</h2><ol><li><p>分割 Base64 数据，生成类文件对象，base64 -&gt; Uint8Array -&gt; Blob</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURI2Blob</span>(<span class="params">dataURI</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 分割数据</span></span><br><span class="line">  <span class="keyword">const</span> [meta, data] = dataURI.split(<span class="string">','</span>)</span><br><span class="line">  <span class="comment">// 对数据编码</span></span><br><span class="line">  <span class="keyword">let</span> byte</span><br><span class="line">  <span class="keyword">if</span> (meta.includes(<span class="string">'base64'</span>)) &#123;</span><br><span class="line">    byte = atob(data)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    byte = <span class="built_in">encodeURI</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取图片格式</span></span><br><span class="line">  <span class="keyword">const</span> mime = meta.split(<span class="string">':'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="comment">// 创建 8 位无符号整型数组</span></span><br><span class="line">  <span class="keyword">const</span> ia = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(byte.length)</span><br><span class="line">  <span class="comment">// 获取字符 UTF-16 编码值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; byte.length; i++) &#123;</span><br><span class="line">    ia[i] = byte.codePointAt(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 生成类文件对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blob([ia], &#123; <span class="attr">type</span>: mime &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展一下直接转成 File 对象也可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成文件对象</span></span><br><span class="line"><span class="keyword">new</span> File([ia], <span class="string">'test.jpg'</span>, &#123; <span class="attr">type</span>: mime &#125;)</span><br></pre></td></tr></table></figure></li><li><p>取巧的方法，利用 fetch </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dataURI2Blob</span>(<span class="params">dataURI</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回 blob 类型的数据</span></span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">await</span> fetch(dataURI).then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.blob())</span><br><span class="line">  <span class="keyword">return</span> blob</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>个人喜好第二种，毕竟简洁易懂，代码量也少很多。之后就可以进行上传文件的操作了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fd = <span class="keyword">new</span> FormData();</span><br><span class="line">fd.append(<span class="string">"img"</span>, blob, <span class="string">"test.jpg"</span>);</span><br></pre></td></tr></table></figure><h2 id="Blob-转-Base64"><a href="#Blob-转-Base64" class="headerlink" title="Blob 转 Base64"></a>Blob 转 Base64</h2><p>使用 FileReader 进行反向转换，同理可转换 File 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blob2Base64</span>(<span class="params">blob, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line"></span><br><span class="line">  reader.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">    callback(reader.result)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  reader.readAsDataURL(blob)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展一下"><a href="#拓展一下" class="headerlink" title="拓展一下"></a>拓展一下</h2><p>将远程图片转换为 Base64 格式 url -&gt;  Image -&gt; Canvas -&gt; Base64</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">remoteImageToBase64</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">  <span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">  <span class="keyword">let</span> context = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line"></span><br><span class="line">  img.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">    canvas.width = img.width</span><br><span class="line">    canvas.height = img.height</span><br><span class="line">    context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 Canvas 的 base64 数据</span></span><br><span class="line">    callback(canvas.toDataURL(<span class="string">'image/jpg'</span>, <span class="number">1</span>))</span><br><span class="line">    canvas = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  img.src = url</span><br><span class="line">  <span class="comment">// 处理 Canvas 跨域</span></span><br><span class="line">  img.crossOrigin = <span class="string">'Anonymous'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> remoteImageToBase64(<span class="string">'https://game.gtimg.cn/images/lol/act/img/skin/big145014.jpg'</span>, (res) =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'base64: '</span>, res)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>当然也可以使用 fetch 转为 Blob 类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">remoteImageToBlob</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> blob = <span class="keyword">await</span> fetch(url).then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.blob())</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> blob</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="string">`</span></span><br></pre></td></tr></table></figure><p>完</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要将 base64 格式的图片转化成 JS 里的 File 对象进行上传，于是学习了一下这方面的知识&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="WEB" scheme="https://coldstone.fun/tags/WEB/"/>
    
      <category term="File" scheme="https://coldstone.fun/tags/File/"/>
    
      <category term="Blob" scheme="https://coldstone.fun/tags/Blob/"/>
    
      <category term="Base64" scheme="https://coldstone.fun/tags/Base64/"/>
    
  </entry>
  
  <entry>
    <title>画一颗圣诞树🎄</title>
    <link href="https://coldstone.fun/post/2020/12/23/christmas-tree/"/>
    <id>https://coldstone.fun/post/2020/12/23/christmas-tree/</id>
    <published>2020-12-23T00:49:20.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>JUST FOR FUN</p><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>新建页面，添加一个 <code>canvas</code> 元素，引入 css, js 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Christmas Tree<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"tree"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">canvas</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fefdfd</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CANVAS_WIDTH = <span class="number">360</span></span><br><span class="line"><span class="keyword">const</span> CANVAS_HEIGHT = <span class="number">620</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initCanvas</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(id)</span><br><span class="line">  canvas.width = CANVAS_WIDTH</span><br><span class="line">  canvas.height = CANVAS_HEIGHT</span><br><span class="line">  <span class="keyword">return</span> canvas</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = initCanvas(<span class="string">'tree'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, main)</span><br></pre></td></tr></table></figure><h2 id="画树枝"><a href="#画树枝" class="headerlink" title="画树枝"></a>画树枝</h2><p>使用 <code>stroke</code> 方法绘制树枝，设置旋转角度绘制左右子树，保存状态，递归绘制子树。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = initCanvas(<span class="string">'tree'</span>)</span><br><span class="line">  <span class="comment">// 树的起始位置</span></span><br><span class="line">  <span class="keyword">const</span> location = [CANVAS_WIDTH * <span class="number">0.5</span>, CANVAS_HEIGHT]</span><br><span class="line"></span><br><span class="line">  drawBranches(canvas, location, <span class="number">0</span>, <span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * canvas       画布</span></span><br><span class="line"><span class="comment"> * start        起始位置</span></span><br><span class="line"><span class="comment"> * angle        旋转角度</span></span><br><span class="line"><span class="comment"> * branchHeight 树枝长度</span></span><br><span class="line"><span class="comment"> * branchWidth  树枝宽度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBranches</span>(<span class="params">canvas, start, angle, branchHeight, branchWidth</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">  ctx.save()</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  <span class="comment">// 将画布原点移动到起始位置</span></span><br><span class="line">  ctx.translate(...start)</span><br><span class="line">  <span class="comment">// 设置绘制颜色</span></span><br><span class="line">  ctx.strokeStyle = <span class="string">'#333'</span></span><br><span class="line">  <span class="comment">// 设置绘制宽度</span></span><br><span class="line">  ctx.lineWidth = branchWidth</span><br><span class="line">  <span class="comment">// 设置旋转角度</span></span><br><span class="line">  ctx.rotate((angle * <span class="built_in">Math</span>.PI) / <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line">  ctx.moveTo(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  ctx.lineTo(<span class="number">0</span>, -branchHeight)</span><br><span class="line">  ctx.stroke()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (branchHeight &gt; <span class="number">6</span>) &#123;</span><br><span class="line">    <span class="comment">// 绘制右子树</span></span><br><span class="line">    drawBranches(canvas, [<span class="number">0</span>, -branchHeight], <span class="number">35</span>, branchHeight * <span class="number">0.5</span>, branchWidth * <span class="number">0.7</span>)</span><br><span class="line">    <span class="comment">// 绘制左子树</span></span><br><span class="line">    drawBranches(canvas, [<span class="number">0</span>, -branchHeight], <span class="number">-35</span>, branchHeight * <span class="number">0.5</span>, branchWidth * <span class="number">0.7</span>)</span><br><span class="line">    <span class="comment">// 绘制中间的树干</span></span><br><span class="line">    drawBranches(canvas, [<span class="number">0</span>, -branchHeight], <span class="number">0</span>, branchHeight * <span class="number">0.8</span>, branchWidth * <span class="number">0.7</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.restore()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/224563/1608733907096-e7ccfbf1-8ad5-408d-a011-ce128ffef243.png#align=left&display=inline&height=660&margin=%5Bobject%20Object%5D&name=branch.png&originHeight=1320&originWidth=840&size=257047&status=done&style=none&width=420" alt="branch.png"></p><h2 id="画树叶"><a href="#画树叶" class="headerlink" title="画树叶"></a>画树叶</h2><p>获取画布所有像素点 <code>alpha</code> 通道值，判断此处是否有图像，循环像素点数组绘制半圆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = initCanvas(<span class="string">'tree'</span>)</span><br><span class="line">  <span class="keyword">const</span> location = [CANVAS_WIDTH * <span class="number">0.5</span>, CANVAS_HEIGHT]</span><br><span class="line"></span><br><span class="line">  drawBranches(canvas, location, <span class="number">0</span>, <span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">  drawLeaves(canvas)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用一个数组保存绘制树的像素点</span></span><br><span class="line"><span class="keyword">const</span> branchPixels = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLeaves</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">  <span class="comment">// 获取画布像素数据</span></span><br><span class="line">  <span class="keyword">const</span> imageData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, CANVAS_WIDTH, CANVAS_HEIGHT)</span><br><span class="line">  <span class="keyword">const</span> data = imageData.data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; CANVAS_HEIGHT; y++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; CANVAS_WIDTH; x++) &#123;</span><br><span class="line">      <span class="comment">// 获取像素点 alpha 通道值</span></span><br><span class="line">      <span class="keyword">const</span> alpha = data[<span class="number">4</span> * (y * CANVAS_WIDTH + x) + <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 alpha 值大于 0 说明这个位置有图像；排除基础树干的像素点；</span></span><br><span class="line">      <span class="keyword">if</span> (alpha &gt; <span class="number">0</span> &amp;&amp; y &lt; CANVAS_HEIGHT - <span class="number">100</span>) &#123;</span><br><span class="line">        branchPixels.push([x, y])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; branchPixels.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 减少绘制几率</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &lt; <span class="number">0.3</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> loc = branchPixels[i]</span><br><span class="line">      loc[<span class="number">0</span>] += (<span class="built_in">Math</span>.random() - <span class="number">0.5</span>) * <span class="number">5</span></span><br><span class="line">      loc[<span class="number">1</span>] += (<span class="built_in">Math</span>.random() - <span class="number">0.5</span>) * <span class="number">5</span></span><br><span class="line">      <span class="comment">// 设置绘制颜色，越往外颜色越浅</span></span><br><span class="line">      <span class="keyword">const</span> green = (<span class="number">255</span> * (CANVAS_HEIGHT - loc[<span class="number">1</span>])) / CANVAS_HEIGHT</span><br><span class="line"></span><br><span class="line">      ctx.save()</span><br><span class="line">      ctx.beginPath()</span><br><span class="line">      ctx.translate(...loc)</span><br><span class="line">      ctx.rotate(<span class="built_in">Math</span>.random() * <span class="built_in">Math</span>.PI * <span class="number">2</span>)</span><br><span class="line">      ctx.fillStyle = <span class="string">`rgba(0, <span class="subst">$&#123;green&#125;</span>, 0, .2)`</span></span><br><span class="line">      <span class="comment">// 绘制半圆</span></span><br><span class="line">      ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI)</span><br><span class="line">      ctx.fill()</span><br><span class="line">      ctx.restore()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/224563/1608734737527-08917a38-0a45-496d-9ec9-de9309fbfca0.png#align=left&display=inline&height=660&margin=%5Bobject%20Object%5D&name=leaves.png&originHeight=1320&originWidth=840&size=480606&status=done&style=none&width=420" alt="leaves.png"></p><h2 id="画礼物"><a href="#画礼物" class="headerlink" title="画礼物"></a>画礼物</h2><p>使用 <code>fillText</code> 和 <code>drawImage</code> 方法绘制文字和图片。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = initCanvas(<span class="string">'tree'</span>)</span><br><span class="line">  <span class="keyword">const</span> location = [CANVAS_WIDTH * <span class="number">0.5</span>, CANVAS_HEIGHT]</span><br><span class="line"></span><br><span class="line">  drawBranches(canvas, location, <span class="number">0</span>, <span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">  drawLeaves(canvas)</span><br><span class="line">  drawGifts(canvas)</span><br><span class="line">  drawStar(canvas)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gifts = [<span class="string">'🎁'</span>, <span class="string">'🍎'</span>, <span class="string">'🍭'</span>, <span class="string">'🍬'</span>, <span class="string">'🎈'</span>, <span class="string">'🧸'</span>, <span class="string">'🔔'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawGifts</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line"></span><br><span class="line">  ctx.save()</span><br><span class="line">  ctx.font = <span class="string">'1.5rem sans-serif'</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 从树的像素点数组中随机获取位置</span></span><br><span class="line">    <span class="keyword">const</span> location = branchPixels[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * branchPixels.length)]</span><br><span class="line">    <span class="keyword">const</span> gift = gifts[i % gifts.length]</span><br><span class="line"></span><br><span class="line">    ctx.fillText(gift, ...location)</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.restore()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> image = <span class="keyword">new</span> Image(<span class="number">500</span>, <span class="number">500</span>)</span><br><span class="line">image.src = <span class="string">'star.png'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawStar</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> size = <span class="number">50</span></span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">  <span class="keyword">const</span> loc = [CANVAS_WIDTH * <span class="number">0.5</span> - size / <span class="number">2</span>, <span class="number">80</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绘制图片</span></span><br><span class="line">  ctx.drawImage(image, ...loc, size, size)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./images/christmas-tree/tree.png" alt="cover"></p><p>JUST FOR FUN</p><p><a href="https://github.com/xrr2016/christmas-tree" target="_blank" rel="noopener">源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JUST FOR FUN&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Canvas" scheme="https://coldstone.fun/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Slate 介绍分析与实践</title>
    <link href="https://coldstone.fun/post/2020/12/13/slate-intro/"/>
    <id>https://coldstone.fun/post/2020/12/13/slate-intro/</id>
    <published>2020-12-13T14:21:01.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>Slate 是一个使用 TypeScript 开发富文本编辑器开发框架，诞生于 2016 年。</p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/ianstormtaylor/slate" target="_blank" rel="noopener">Slate</a> 是一个使用 TypeScript 开发富文本编辑器开发框架，诞生于 2016 年，作者是 <a href="https://github.com/ianstormtaylor" target="_blank" rel="noopener">Ian Storm Taylor</a>。它吸收了 <a href="https://quilljs.com/" target="_blank" rel="noopener">Quill</a>，<a href="http://prosemirror.net/" target="_blank" rel="noopener">Prosemirror</a>，<a href="https://facebook.github.io/draft-js/" target="_blank" rel="noopener">Draft.js</a> 的优点，核心数据模型十分精简，具有高度的可扩展性，最新版本为 <a href="https://github.com/ianstormtaylor/slate/releases/tag/v0.60.1" target="_blank" rel="noopener">v0.60.1</a>。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>插件作为一等公民，能够完全修改编辑器行为</li><li>数据层和渲染层分离，更新数据触发渲染</li><li>文档数据类似于 DOM 树，可嵌套</li><li>具有原子化操作 API，理论上支持协同编辑</li><li>使用 React 作为渲染层</li><li>不可变数据结构 <a href="https://github.com/immerjs/immer" target="_blank" rel="noopener">Immer</a></li></ul><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/224563/1607834865765-972840cc-33fc-4434-8e84-1707f162256a.jpeg#align=left&display=inline&height=629&margin=%5Bobject%20Object%5D&name=slate.jpg&originHeight=629&originWidth=764&size=45676&status=done&style=none&width=764" alt="slate.jpg"></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>Slate 使用 monorepo 方式管理仓库，packages 目录中有 4 个源码包。</p><h3 id="slate"><a href="#slate" class="headerlink" title="slate"></a>slate</h3><p><a href="https://github.com/ianstormtaylor/slate/tree/main/packages/slate" target="_blank" rel="noopener">slate</a> 核心仓库，包含抽象数据模型 interfaces，操作节点的方法 transforms，创建实例的方法等。</p><h4 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h4><p>intefaces 目录下是 Slate 定义的数据模型。</p><p><code>Node</code> 表示 Slate 文档树中不同类型的节点。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> BaseNode = Editor | Element | Text</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Descendant = Element | Text</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Ancestor = Editor | Element</span><br></pre></td></tr></table></figure><p><code>Editor</code>  对象用于存储编辑器的所有状态，可以通过插件添加辅助函数或实现新行为。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> BaseEditor &#123;</span><br><span class="line">  children: Descendant[]</span><br><span class="line">  selection: Selection</span><br><span class="line">  operations: Operation[]</span><br><span class="line">  marks: Omit&lt;Text, <span class="string">'text'</span>&gt; | <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Element</code> 对象是 Slate 文档树中包含其他 <code>Element</code> 或 <code>Text</code> 的一种节点，取决于编辑器配置它可以是块级 <code>block</code> 或内联 <code>inline</code> 的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ElementInterface &#123;</span><br><span class="line">  isAncestor: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is Ancestor</span><br><span class="line">  isElement: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is Element</span><br><span class="line">  isElementList: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is Element[]</span><br><span class="line">  isElementProps: <span class="function">(<span class="params">props: <span class="built_in">any</span></span>) =&gt;</span> props is Partial&lt;Element&gt;</span><br><span class="line">  matches: <span class="function">(<span class="params">element: Element, props: Partial&lt;Element&gt;</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Text</code> 对象表示文档树中的叶子节点，是实际包含文本和格式的节点，它们不能包含其他节点。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> TextInterface &#123;</span><br><span class="line">  equals: <span class="function">(<span class="params">text: Text, another: Text, options?: &#123; loose?: <span class="built_in">boolean</span> &#125;</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  isText: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is Text</span><br><span class="line">  isTextList: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is Text[]</span><br><span class="line">  isTextProps: <span class="function">(<span class="params">props: <span class="built_in">any</span></span>) =&gt;</span> props is Partial&lt;Text&gt;</span><br><span class="line">  matches: <span class="function">(<span class="params">text: Text, props: Partial&lt;Text&gt;</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  decorations: <span class="function">(<span class="params">node: Text, decorations: Range[]</span>) =&gt;</span> Text[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Path</code> 是一个描述节点在文档树中的具体位置的索引列表，一般相对于 <code>Editor</code> 节点，但也可以是其他 <code>Node</code> 节点。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> PathInterface &#123;</span><br><span class="line">  ancestors: <span class="function">(<span class="params">path: Path, options?: &#123; reverse?: <span class="built_in">boolean</span> &#125;</span>) =&gt;</span> Path[]</span><br><span class="line">  common: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> Path</span><br><span class="line">  compare: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="number">-1</span> | <span class="number">0</span> | <span class="number">1</span></span><br><span class="line">  endsAfter: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  endsAt: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  endsBefore: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  equals: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  hasPrevious: <span class="function">(<span class="params">path: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  isAfter: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  isAncestor: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  isBefore: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  isChild: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  isCommon: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  isDescendant: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  isParent: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  isPath: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is Path</span><br><span class="line">  isSibling: <span class="function">(<span class="params">path: Path, another: Path</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  levels: (</span><br><span class="line">    path: Path,</span><br><span class="line">    options?: &#123;</span><br><span class="line">      reverse?: <span class="built_in">boolean</span></span><br><span class="line">    &#125;</span><br><span class="line">  ) =&gt; Path[]</span><br><span class="line">  next: <span class="function">(<span class="params">path: Path</span>) =&gt;</span> Path</span><br><span class="line">  parent: <span class="function">(<span class="params">path: Path</span>) =&gt;</span> Path</span><br><span class="line">  previous: <span class="function">(<span class="params">path: Path</span>) =&gt;</span> Path</span><br><span class="line">  relative: <span class="function">(<span class="params">path: Path, ancestor: Path</span>) =&gt;</span> Path</span><br><span class="line">  transform: (</span><br><span class="line">    path: Path,</span><br><span class="line">    operation: Operation,</span><br><span class="line">    options?: &#123; affinity?: <span class="string">'forward'</span> | <span class="string">'backward'</span> | <span class="literal">null</span> &#125;</span><br><span class="line">  ) =&gt; Path | <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Point</code> 对象表示文本节点在文档树中的一个特定位置。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> PointInterface &#123;</span><br><span class="line">  compare: <span class="function">(<span class="params">point: Point, another: Point</span>) =&gt;</span> <span class="number">-1</span> | <span class="number">0</span> | <span class="number">1</span></span><br><span class="line">  isAfter: <span class="function">(<span class="params">point: Point, another: Point</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  isBefore: <span class="function">(<span class="params">point: Point, another: Point</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  equals: <span class="function">(<span class="params">point: Point, another: Point</span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line">  isPoint: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is Point</span><br><span class="line">  transform: (</span><br><span class="line">    point: Point,</span><br><span class="line">    op: Operation,</span><br><span class="line">    options?: &#123; affinity?: <span class="string">'forward'</span> | <span class="string">'backward'</span> | <span class="literal">null</span> &#125;</span><br><span class="line">  ) =&gt; Point | <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Operation</code> 对象是 Slate 用来更改内部状态的低级指令，Slate 将所有变化表示为 <code>Operation</code> 。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> OperationInterface &#123;</span><br><span class="line">  isNodeOperation: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is NodeOperation</span><br><span class="line">  isOperation: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is Operation</span><br><span class="line">  isOperationList: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is Operation[]</span><br><span class="line">  isSelectionOperation: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is SelectionOperation</span><br><span class="line">  isTextOperation: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> value is TextOperation</span><br><span class="line">  inverse: <span class="function">(<span class="params">op: Operation</span>) =&gt;</span> Operation</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Transforms"><a href="#Transforms" class="headerlink" title="Transforms"></a>Transforms</h4><p><code>Transforms</code>  是对文档进行操作的辅助函数，包括选区转换，节点转换，文本转换和通用转换。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Transforms = &#123;</span><br><span class="line">  ...GeneralTransforms, <span class="comment">// 操作 Operation 命令</span></span><br><span class="line">  ...NodeTransforms, <span class="comment">// 操作节点</span></span><br><span class="line">  ...SelectionTransforms, <span class="comment">// 操作选区</span></span><br><span class="line">  ...TextTransforms, <span class="comment">// 操作文本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="createEditor"><a href="#createEditor" class="headerlink" title="createEditor"></a>createEditor</h4><p>创建编辑器实例的方法，返回一个实现了 <code>Editor</code> 接口的编辑器实例对象。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// create-editor.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createEditor = (): <span class="function"><span class="params">Editor</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> editor: Editor = &#123;&#125;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">  <span class="keyword">return</span> editor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="slate-react"><a href="#slate-react" class="headerlink" title="slate-react"></a>slate-react</h3><p><a href="https://github.com/ianstormtaylor/slate/tree/main/packages/slate-react" target="_blank" rel="noopener">slate-react</a> 编辑器的 React 组件，渲染文档数据。</p><h4 id="Slate"><a href="#Slate" class="headerlink" title="Slate"></a>Slate</h4><p>组件上下文的包装器，处理 <code>onChange</code> 事件，接受文档数据 <code>value</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Slate.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Slate = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;SlateContext.Provider value=&#123;context&#125;&gt;</span><br><span class="line">      &lt;EditorContext.Provider value=&#123;editor&#125;&gt;</span><br><span class="line">        &lt;FocusedContext.Provider value=&#123;ReactEditor.isFocused(editor)&#125;&gt;</span><br><span class="line">          &#123;children&#125;</span><br><span class="line">        &lt;<span class="regexp">/FocusedContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>EditorContext.Provider&gt;</span><br><span class="line">    &lt;<span class="regexp">/SlateContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Editable"><a href="#Editable" class="headerlink" title="Editable"></a>Editable</h4><p>编辑器的主要区域，设置标签属性，处理 DOM 事件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Editable.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Editable = <span class="function">(<span class="params">props: EditableProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ReadOnlyContext.Provider value=&#123;readOnly&#125;&gt;</span><br><span class="line">      &lt;Component&gt;</span><br><span class="line">        &lt;Children /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Component&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ReadOnlyContext.Provider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Children"><a href="#Children" class="headerlink" title="Children"></a>Children</h4><p>根据编辑器文档数据生成渲染组件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Children.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Children = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> children = []</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">  <span class="keyword">return</span> &lt;React.Fragment&gt;&#123;children&#125;&lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h4><p>渲染 <code>Elment</code> 的组件，使用 <code>renderElement</code> 方法渲染元素，使用 <code>Children</code> 组件生成子元素。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Element.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Element = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;SelectedContext.Provider value=&#123;!!selection&#125;&gt;</span><br><span class="line">      &#123;renderElement(&#123; attributes, children, element &#125;)&#125;</span><br><span class="line">    &lt;<span class="regexp">/SelectedContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h4><p>渲染文本节点组件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Text.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Text = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;span data-slate-node=<span class="string">"text"</span> ref=&#123;ref&#125;&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="withReact"><a href="#withReact" class="headerlink" title="withReact"></a>withReact</h4><p>Slate 插件，添加/重写了编辑器实例的一些方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// with-react.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withReact = &lt;T <span class="keyword">extends</span> Editor&gt;<span class="function">(<span class="params">editor: T</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> e = editor <span class="keyword">as</span> T &amp; ReactEditor</span><br><span class="line">  <span class="keyword">const</span> &#123; apply, onChange &#125; = e</span><br><span class="line"></span><br><span class="line">  e.apply = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  e.setFragmentData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  e.insertData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  e.onChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="slate-history"><a href="#slate-history" class="headerlink" title="slate-history"></a>slate-history</h3><p><a href="https://github.com/ianstormtaylor/slate/tree/main/packages/slate-history" target="_blank" rel="noopener">slate-history</a> Slate 插件，为编辑器提供 <strong>撤销 **和</strong> 重做**功能。</p><h4 id="History"><a href="#History" class="headerlink" title="History"></a>History</h4><p>使用 <code>redos</code> 和 <code>undos</code> 数组存储编辑器所有底层 <code>Operation</code> 命令的对象。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// History.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> History &#123;</span><br><span class="line">  redos: Operation[][]</span><br><span class="line">  undos: Operation[][]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HistoryEditor"><a href="#HistoryEditor" class="headerlink" title="HistoryEditor"></a>HistoryEditor</h4><p>带有历史记录功能的编辑器对象，具有操作历史记录的方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// HistoryEditor.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> HistoryEditor = &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="withHistory"><a href="#withHistory" class="headerlink" title="withHistory"></a>withHistory</h4><p>Slate 编辑器插件，使用 <code>undos</code> 和 <code>redos</code> 栈追踪编辑器操作，实现编辑器的 <code>redo</code>，<code>undo</code> 方法，重写了<code>apply</code> 方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// with-history.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withHistory = &lt;T <span class="keyword">extends</span> Editor&gt;<span class="function">(<span class="params">editor: T</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> e = editor <span class="keyword">as</span> T &amp; HistoryEditor</span><br><span class="line">  <span class="keyword">const</span> &#123; apply &#125; = e</span><br><span class="line">  e.history = &#123; undos: [], redos: [] &#125;</span><br><span class="line"></span><br><span class="line">  e.redo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  e.undo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  e.apply = <span class="function">(<span class="params">op: Operation</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="slate-hyperscript"><a href="#slate-hyperscript" class="headerlink" title="slate-hyperscript"></a>slate-hyperscript</h3><p><a href="https://github.com/ianstormtaylor/slate/tree/main/packages/slate-hyperscript" target="_blank" rel="noopener">slate-hyperscript</a> 是一个使用  JSX  编写  Slate  文档的  hyperscript  工具</p><h2 id="插件机制"><a href="#插件机制" class="headerlink" title="插件机制"></a>插件机制</h2><p>Slate 的插件只是一个返回 <code>editor</code> 实例的函数，在这个函数中通过重写编辑器实例方法，修改编辑器行为。<br>在创建编辑器实例的时候调用插件函数即可。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Editor &#125; <span class="keyword">from</span> <span class="string">'slate'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myPlugin = <span class="function">(<span class="params">editor: Editor</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这里对 editor 的一些方法进行重写, 返回编辑器实例</span></span><br><span class="line">  editor.apply = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> editor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> myPlugin</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createEditor &#125; <span class="keyword">from</span> <span class="string">'slate'</span></span><br><span class="line"><span class="keyword">import</span> myPlugin <span class="keyword">from</span> <span class="string">'./myPlugin'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> editor = myPlugin(createEditor())</span><br></pre></td></tr></table></figure><p>如此以来插件就能完全控制编辑器行为，正如 Slate 的官方介绍所说</p><blockquote><p>Slate 是一个   完全   可定制的富文本编辑器框架。</p></blockquote><h2 id="渲染机制"><a href="#渲染机制" class="headerlink" title="渲染机制"></a>渲染机制</h2><h3 id="渲染原理"><a href="#渲染原理" class="headerlink" title="渲染原理"></a>渲染原理</h3><p>Slate 的文档数据是一颗类似 DOM 的节点树，slate-react 通过递归这颗树生成 <code>children</code> 数组，这个数组有两种类型的组件 <code>Element</code> 和 <code>Text</code>， 最终 raect 将 <code>children</code> 数组中的组件渲染到页面上，步骤如下。</p><ol><li>设置编辑器实例的 <code>children</code> 属性</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Slate.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Slate = (props: &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; editor, children, onChange, value, ...rest &#125; = props</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> context: [ReactEditor] = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置 editor 实例的 children 属性为 value</span></span><br><span class="line">    editor.children = value</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>Editable</code> 组件传递 <code>editor</code> 实例给 <code>Children</code></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Editable.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Editable = <span class="function">(<span class="params">props: EditableProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取 editor 实例</span></span><br><span class="line">  <span class="keyword">const</span> editor = useSlate()</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ReadOnlyContext.Provider value=&#123;readOnly&#125;&gt;</span><br><span class="line">      &lt;Component&gt;</span><br><span class="line">        &lt;Children</span><br><span class="line">          <span class="comment">// 将 editor 传递给 Children 组件</span></span><br><span class="line">          node=&#123;editor&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Component&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ReadOnlyContext.Provider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>Children</code> 生成渲染数组，交给 React 渲染组件。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Children.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Children = (props: &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">  <span class="keyword">const</span> children = []</span><br><span class="line">  <span class="comment">// 遍历 editor 实例上的 children 数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.children.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 判断数据为 Element 或 Text</span></span><br><span class="line">    <span class="keyword">if</span> (Element.isElement(n)) &#123;</span><br><span class="line">      children.push(&lt;ElementComponent /&gt;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      children.push(&lt;TextComponent /&gt;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &lt;React.Fragment&gt;&#123;children&#125;&lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/224563/1607849094929-29169d1b-fbd0-42b5-b624-87890e8f312b.jpeg#align=left&display=inline&height=761&margin=%5Bobject%20Object%5D&name=render.jpg&originHeight=761&originWidth=1173&size=149056&status=done&style=none&width=1173" alt="render.jpg"></p><p>假设有以下数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">;[</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'paragraph'</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        text: <span class="string">'A line of text in a paragraph.'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'paragraph'</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        text: <span class="string">'Another line of text in a paragraph.'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>页面显示为<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/224563/1607849801505-0de6e8ea-e8c9-4a5e-826e-025c33c6014a.jpeg#align=left&display=inline&height=774&margin=%5Bobject%20Object%5D&name=2line-text.jpg&originHeight=774&originWidth=1800&size=321159&status=done&style=none&width=1800" alt="2line-text.jpg"></p><h3 id="自定义渲染"><a href="#自定义渲染" class="headerlink" title="自定义渲染"></a>自定义渲染</h3><p>传递渲染函数 <code>renderElement</code> 和 <code>renderLeaf</code> 给 <code>Editable</code> 组件，对元素和叶子节点进行自定义渲染。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Leaf = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; attributes, children, leaf &#125; = props</span><br><span class="line">  <span class="comment">// 根据属性值设置 HTML 标签</span></span><br><span class="line">  <span class="keyword">if</span> (leaf.bold) &#123;</span><br><span class="line">    children = &lt;strong&gt;&#123;children&#125;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return &lt;span &#123;...attributes&#125;&gt;&#123;children&#125;&lt;/</span>span&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Element = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; element &#125; = props</span><br><span class="line">  <span class="comment">// 根据类型返回组件</span></span><br><span class="line">  <span class="keyword">switch</span> (element.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'custom-type'</span>:</span><br><span class="line">      <span class="keyword">return</span> &lt;CustomElement &#123;...props&#125; /&gt;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> &lt;DefaultElement &#123;...props&#125; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> renderLeaf = <span class="function"><span class="params">props</span> =&gt;</span> &lt;Leaf &#123;...props&#125; /&gt;</span><br><span class="line"><span class="keyword">const</span> renderElement = <span class="function"><span class="params">props</span> =&gt;</span> &lt;Element &#123;...props&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Slate&gt;</span><br><span class="line">  &lt;Editable</span><br><span class="line">    <span class="comment">// 传递自定义渲染函数</span></span><br><span class="line">    renderLeaf=&#123;renderLeaf&#125;</span><br><span class="line">    renderElement=&#123;renderElement&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;<span class="regexp">/Slate&gt;</span></span><br></pre></td></tr></table></figure><h3 id="触发渲染"><a href="#触发渲染" class="headerlink" title="触发渲染"></a>触发渲染</h3><p>slate-react 的 <code>withReact</code> 插件会重写编辑器的 <code>onChange</code> 方法，在每次文档数据更新时，调用 <code>onContextChange</code> 函数，执行 <code>setKey(key + 1)</code> 触发 React 重新渲染。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// slate.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Slate = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [key, setKey] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onContextChange = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    onChange(editor.children)</span><br><span class="line">    <span class="comment">// 设置 key + 1 触发 React 重新渲染</span></span><br><span class="line">    setKey(key + <span class="number">1</span>)</span><br><span class="line">  &#125;, [key, onChange])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 onContextChange 函数</span></span><br><span class="line">  EDITOR_TO_ON_CHANGE.set(editor, onContextChange)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// with.react.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withReact = &lt;T <span class="keyword">extends</span> Editor&gt;<span class="function">(<span class="params">editor: T</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 重写 onChange 方法</span></span><br><span class="line">  e.onChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ReactDOM.unstable_batchedUpdates(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> onContextChange = EDITOR_TO_ON_CHANGE.get(e)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (onContextChange) &#123;</span><br><span class="line">        <span class="comment">// 执行 onContextChange 进行 key + 1</span></span><br><span class="line">        onContextChange()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      onChange()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践示例"><a href="#实践示例" class="headerlink" title="实践示例"></a>实践示例</h2><h3 id="一个基础的富文本编辑器"><a href="#一个基础的富文本编辑器" class="headerlink" title="一个基础的富文本编辑器"></a>一个基础的富文本编辑器</h3><ol><li>导入依赖，创建 <code>&lt;MyEditor /&gt;</code>  组件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createEditor &#125; <span class="keyword">from</span> <span class="string">'slate'</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useMemo, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Slate, Editable, withReact &#125; <span class="keyword">from</span> <span class="string">'slate-react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyEditor = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyEditor</span><br></pre></td></tr></table></figure><ol start="2"><li>创建编辑器对象 <code>editor</code> 和文档数据 <code>value</code>，传递给 <code>&lt;Slate /&gt;</code> 。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyEditor = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState([])</span><br><span class="line">  <span class="keyword">const</span> editor = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> withReact(createEditor()), [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// Slate 组件保存编辑器的状态，目的是共享状态，使得其他组件比如工具栏也能获取到编辑器状态。</span></span><br><span class="line">    &lt;Slate</span><br><span class="line">      editor=&#123;editor&#125;</span><br><span class="line">      value=&#123;value&#125;</span><br><span class="line">      onChange=&#123;(value) =&gt; setValue(value)&#125;</span><br><span class="line">    &gt;&lt;<span class="regexp">/Slate&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用 <code>&lt;Editable /&gt;</code> 渲染编辑器主要区域。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyEditor = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState([])</span><br><span class="line">  <span class="keyword">const</span> editor = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> withReact(createEditor()), [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Slate editor=&#123;editor&#125; value=&#123;value&#125; onChange=&#123;(value) =&gt; setValue(value)&#125;&gt;</span><br><span class="line">      <span class="comment">// Editable 组件是编辑器实际的渲染区域，用户在这里进行交互</span></span><br><span class="line">      &lt;Editable</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          width: <span class="number">500</span>,</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          padding: <span class="number">20</span>,</span><br><span class="line">          border: <span class="string">'1px solid grey'</span>,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        placeholder=<span class="string">"This is placeholder..."</span></span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Slate&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>添加编辑器的默认值，此时页面上会出现这行文本。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编辑器的值是一个对象数组，slate 会根据它来生成数据模型，交给 slate-react 渲染</span></span><br><span class="line"><span class="keyword">const</span> initialValue = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'paragraph'</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        text: <span class="string">'A line of text in a paragraph.'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyEditor = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化编辑器 value 为 initialValue</span></span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(initialValue)</span><br><span class="line">  <span class="keyword">const</span> editor = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> withReact(createEditor()), [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Slate editor=&#123;editor&#125; value=&#123;value&#125; onChange=&#123;(value) =&gt; setValue(value)&#125;&gt;</span><br><span class="line">      &lt;Editable</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          width: <span class="number">500</span>,</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          padding: <span class="number">20</span>,</span><br><span class="line">          border: <span class="string">'1px solid grey'</span>,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        placeholder=<span class="string">"This is placeholder..."</span></span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Slate&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/224563/1607690549872-2a8f5d1f-2cb3-4379-8e6f-b49d935f2a1f.jpeg#align=left&display=inline&height=420&margin=%5Bobject%20Object%5D&name=basic-editor.jpg&originHeight=420&originWidth=640&size=21433&status=done&style=none&width=640" alt="basic-editor.jpg"></p><ol start="5"><li>创建工具栏组件，添加加粗，斜体，下划线按钮。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyToolbar = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div</span><br><span class="line">      style=&#123;&#123;</span><br><span class="line">        width: <span class="number">500</span>,</span><br><span class="line">        display: <span class="string">'flex'</span>,</span><br><span class="line">        padding: <span class="string">'10px 20px'</span>,</span><br><span class="line">        alignItems: <span class="string">'center'</span>,</span><br><span class="line">        margin: <span class="string">'0 auto'</span>,</span><br><span class="line">        marginTop: <span class="number">50</span>,</span><br><span class="line">        border: <span class="string">'1px solid grey'</span>,</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          marginRight: <span class="number">20</span>,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        onMouseDown=&#123;(event) =&gt; &#123;</span><br><span class="line">          event.preventDefault()</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        B</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;button</span></span><br><span class="line"><span class="regexp">        style=&#123;&#123;</span></span><br><span class="line"><span class="regexp">          marginRight: 20,</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">        onMouseDown=&#123;(event) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          event.preventDefault()</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">        I</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          marginRight: <span class="number">20</span>,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        onMouseDown=&#123;(event) =&gt; &#123;</span><br><span class="line">          event.preventDefault()</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        U</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&lt;Slate editor=&#123;editor&#125; value=&#123;value&#125; onChange=&#123;(value) =&gt; setValue(value)&#125;&gt;</span><br><span class="line">  <span class="comment">// 在此处使用</span></span><br><span class="line">  &lt;MyToolbar /&gt;</span><br><span class="line">  &lt;Editable</span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">      width: <span class="number">500</span>,</span><br><span class="line">      height: <span class="number">300</span>,</span><br><span class="line">      padding: <span class="number">20</span>,</span><br><span class="line">      margin: <span class="string">'0 auto'</span>,</span><br><span class="line">      border: <span class="string">'1px solid grey'</span>,</span><br><span class="line">      borderTopWidth: <span class="number">0</span>,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    placeholder=<span class="string">"This is placeholder..."</span></span><br><span class="line">  /&gt;</span><br><span class="line">&lt;<span class="regexp">/Slate&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/224563/1607691438279-9e7b3b6d-39e4-4fef-8b1e-f4cfcbd46a29.jpeg#align=left&display=inline&height=420&margin=%5Bobject%20Object%5D&name=toolbar.jpg&originHeight=420&originWidth=640&size=26074&status=done&style=none&width=640" alt="toolbar.jpg"></p><ol start="6"><li>设置加粗，斜体，下划线渲染样式，传递 <code>renderLeaf</code> 函数给 <code>Editable</code>。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///  MyEditor.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义具体样式如何渲染</span></span><br><span class="line"><span class="keyword">const</span> Leaf = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; attributes, children, leaf &#125; = props</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (leaf.bold) &#123;</span><br><span class="line">    children = <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (leaf.italic) &#123;</span><br><span class="line">    children = <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (leaf.underline) &#123;</span><br><span class="line">    children = <span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span> &#123;<span class="attr">...attributes</span>&#125;&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyEditor = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">const</span> renderLeaf = useCallback(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Leaf</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Slate editor=&#123;editor&#125; value=&#123;value&#125; onChange=&#123;(value) =&gt; setValue(value)&#125;&gt;</span><br><span class="line">      &lt;MyToolbar editor=&#123;editor&#125; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Editable</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        renderLeaf=&#123;renderLeaf&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Slate&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>在工具栏上添加转换节点属性的方法，点击时调用。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// MyToolbar.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Text, Editor &#125; <span class="keyword">from</span> <span class="string">'slate'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Transforms &#125; <span class="keyword">from</span> <span class="string">'slate'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断节点的属性值是否为真</span></span><br><span class="line"><span class="keyword">const</span> isFormatActive = <span class="function">(<span class="params">editor, format</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [match] = Editor.nodes(editor, &#123;</span><br><span class="line">    match: <span class="function">(<span class="params">n</span>) =&gt;</span> n[format] === <span class="literal">true</span>,</span><br><span class="line">    universal: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> !!match</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据样式切换属性值</span></span><br><span class="line"><span class="keyword">const</span> toggleFormat = <span class="function">(<span class="params">event, editor, format</span>) =&gt;</span> &#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line">  <span class="keyword">const</span> isActive = isFormatActive(editor, format)</span><br><span class="line"></span><br><span class="line">  Transforms.setNodes(</span><br><span class="line">    editor,</span><br><span class="line">    &#123; [format]: isActive ? <span class="literal">false</span> : <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">match</span>: <span class="function">(<span class="params">n</span>) =&gt;</span> Text.isText(n), <span class="attr">split</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyToolbar = <span class="function">(<span class="params">&#123; editor &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div</span><br><span class="line">      style=&#123;&#123;</span><br><span class="line">        width: <span class="number">500</span>,</span><br><span class="line">        display: <span class="string">'flex'</span>,</span><br><span class="line">        padding: <span class="string">'10px 20px'</span>,</span><br><span class="line">        alignItems: <span class="string">'center'</span>,</span><br><span class="line">        margin: <span class="string">'0 auto'</span>,</span><br><span class="line">        marginTop: <span class="number">50</span>,</span><br><span class="line">        border: <span class="string">'1px solid grey'</span>,</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          marginRight: <span class="number">20</span>,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        <span class="comment">// 在点击事件上调用</span></span><br><span class="line">        onClick=&#123;(event) =&gt; &#123;</span><br><span class="line">          toggleFormat(event, editor, <span class="string">'bold'</span>)</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        B</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      /</span><span class="comment">// ...</span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/224563/1607741881685-f065f648-4e0c-4084-9ff1-369188314062.gif#align=left&display=inline&height=420&margin=%5Bobject%20Object%5D&name=toggle-format.gif&originHeight=420&originWidth=640&size=230856&status=done&style=none&width=640" alt="toggle-format.gif"></p><h3 id="创建一个自定义树型元素"><a href="#创建一个自定义树型元素" class="headerlink" title="创建一个自定义树型元素"></a>创建一个自定义树型元素</h3><p>Slate 的强大之处在于它的可扩展性，以下展示如何自定义一个树形元素。</p><ol><li>定义树形元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// TreeElement.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TreeElement = <span class="function">(<span class="params">&#123; attributes, children, element &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; checked, label &#125; = element</span><br><span class="line">  <span class="keyword">const</span> [isChecked, setIsChecked] = useState(checked)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setIsChecked(!isChecked)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div &#123;...attributes&#125;&gt;</span><br><span class="line">      &lt;p</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          display: <span class="string">'flex'</span>,</span><br><span class="line">          alignItems: <span class="string">'center'</span>,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        contentEditable=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">"checkbox"</span></span><br><span class="line">          style=&#123;&#123;</span><br><span class="line">            width: <span class="number">20</span>,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          checked=&#123;isChecked&#125;</span><br><span class="line">          onChange=&#123;onChange&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;label&gt;&#123;label&#125;&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>p&gt;</span><br><span class="line">      &#123;isChecked ? <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">paddingLeft:</span> <span class="attr">20</span> &#125;&#125;&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> : <span class="literal">null</span>&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>将 <code>renderElement</code> 方法传递给 <code>&lt;Editable /&gt;</code>。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// ...</span></span><br><span class="line"><span class="keyword">const</span> Element = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; element &#125; = props</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (element.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'tree-item'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">TreeElement</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">DefaultElement</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// ...</span></span><br><span class="line"><span class="keyword">const</span> renderElement = useCallback(<span class="function">(<span class="params">props</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Element</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>, [])</span><br><span class="line"></span><br><span class="line"><span class="comment">/// ...</span></span><br><span class="line">&lt;Editable</span><br><span class="line">  renderElement=&#123;renderElement&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加树形元素数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialValue = [</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'tree-item'</span>,</span><br><span class="line">    checked: <span class="literal">true</span>,</span><br><span class="line">    label: <span class="string">'first level'</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">'tree-item'</span>,</span><br><span class="line">        checked: <span class="literal">false</span>,</span><br><span class="line">        label: <span class="string">'second level'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            type: <span class="string">'tree-item'</span>,</span><br><span class="line">            label: <span class="string">'third level'</span>,</span><br><span class="line">            checked: <span class="literal">false</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                type: <span class="string">'paragraph'</span>,</span><br><span class="line">                children: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    text: <span class="string">'This is a tree item'</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/224563/1607743615375-926fdbe6-5d1c-434b-a0ee-2c6f2fb34b37.gif#align=left&display=inline&height=420&margin=%5Bobject%20Object%5D&name=tree-element.gif&originHeight=420&originWidth=640&size=109844&status=done&style=none&width=640" alt="tree-element.gif"></p><h3 id="创建一个控制输入的插件"><a href="#创建一个控制输入的插件" class="headerlink" title="创建一个控制输入的插件"></a>创建一个控制输入的插件</h3><p>以下展示如何定义一个 Slate 插件</p><ol><li>创建一个 <code>withEmojis</code> 插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// with-emojis.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ReactEditor &#125; <span class="keyword">from</span> <span class="string">'slate-react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> letterEmojis = &#123;</span><br><span class="line">  a: <span class="string">'🐜'</span>,</span><br><span class="line">  b: <span class="string">'🐻'</span>,</span><br><span class="line">  c: <span class="string">'🐱'</span>,</span><br><span class="line">  d: <span class="string">'🐶'</span>,</span><br><span class="line">  e: <span class="string">'🐘'</span>,</span><br><span class="line">  f: <span class="string">'🦊'</span>,</span><br><span class="line">  g: <span class="string">'🐦'</span>,</span><br><span class="line">  h: <span class="string">'🐵'</span>,</span><br><span class="line">  i: <span class="string">'🦄'</span>,</span><br><span class="line">  j: <span class="string">'🦋'</span>,</span><br><span class="line">  k: <span class="string">'🦀'</span>,</span><br><span class="line">  l: <span class="string">'🦁'</span>,</span><br><span class="line">  m: <span class="string">'🐭'</span>,</span><br><span class="line">  n: <span class="string">'🐮'</span>,</span><br><span class="line">  o: <span class="string">'🐋'</span>,</span><br><span class="line">  p: <span class="string">'🐼'</span>,</span><br><span class="line">  q: <span class="string">'🐧'</span>,</span><br><span class="line">  r: <span class="string">'🐰'</span>,</span><br><span class="line">  s: <span class="string">'🕷'</span>,</span><br><span class="line">  t: <span class="string">'🐯'</span>,</span><br><span class="line">  u: <span class="string">'🐍'</span>,</span><br><span class="line">  v: <span class="string">'🦖'</span>,</span><br><span class="line">  w: <span class="string">'🦕'</span>,</span><br><span class="line">  x: <span class="string">'🦛'</span>,</span><br><span class="line">  y: <span class="string">'🐳'</span>,</span><br><span class="line">  z: <span class="string">'🦓'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> withEmojis = <span class="function">(<span class="params">editor: ReactEditor</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; insertText &#125; = editor</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写 editor 的 insertText 方法</span></span><br><span class="line">  editor.insertText = <span class="function">(<span class="params">text: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (letterEmojis[text.toLowerCase()]) &#123;</span><br><span class="line">      text = letterEmojis[text]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行原有的 insertText 方法</span></span><br><span class="line">    insertText(text)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> editor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withEmojis</span><br></pre></td></tr></table></figure><ol start="2"><li>在新建编辑器对象时使用插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// MyEditor.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> editor = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> withEmojis(withReact(createEditor())), [])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/224563/1607744811398-c468d0c2-b35a-4231-8e4e-09149df91db7.gif#align=left&display=inline&height=420&margin=%5Bobject%20Object%5D&name=with-emojis.gif&originHeight=420&originWidth=640&size=154855&status=done&style=none&width=640" alt="with-emojis.gif"></p><h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><ul><li>还没有发布正式版，处于 Beta 阶段，API 可能会有变化</li><li>渲染层目前只有 React，要在其他框架中使用需要自行实现</li><li>数据渲染分离，需要完全控制用户输入行为，否则可能导致数据和渲染不同步</li><li>基于 contenteditable 无法突破浏览器的排版效果</li><li>对中文输入支持不足，详见此 <a href="https://www.zhihu.com/question/361228704/answer/937791493" target="_blank" rel="noopener">链接</a></li><li>社区驱动开发，问题可能得不到及时修复</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Slate 是一个设计优秀的富文本编辑器开发框架，具有很高的可扩展性。<br>如果需要一个能迅速接入并使用的富文本编辑器，那么可以使用 ckeditor4, tinymce, ueditor 这些提供开箱即用功能的编辑器。如果是要开发一款功能丰富，需要定制化的编辑器那么 Slate 将是你的第一选择。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/268366406" target="_blank" rel="noopener">开源富文本编辑器技术的演进（2020 1024）</a><br><a href="https://zhuanlan.zhihu.com/p/262209236" target="_blank" rel="noopener">slate 架构设计分析</a><br><a href="https://zhuanlan.zhihu.com/p/90931631" target="_blank" rel="noopener">编辑器初体验</a><br><a href="https://rain120.github.io/athena/zh/slate/SlateStart.html" target="_blank" rel="noopener">Slate 中文文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Slate 是一个使用 TypeScript 开发富文本编辑器开发框架，诞生于 2016 年。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Web" scheme="https://coldstone.fun/tags/Web/"/>
    
      <category term="Rich Editor" scheme="https://coldstone.fun/tags/Rich-Editor/"/>
    
  </entry>
  
  <entry>
    <title>认识 Range 和 Selection 对象</title>
    <link href="https://coldstone.fun/post/2020/12/05/selection-and-range/"/>
    <id>https://coldstone.fun/post/2020/12/05/selection-and-range/</id>
    <published>2020-12-05T02:51:38.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器的 Range 和 Selection 对象</p><a id="more"></a><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>DOM 文档对象模型中总共有 12 种节点类型，常见的有以下几种</p><table><thead><tr><th align="left">常量</th><th align="left">值</th><th align="left">类型</th></tr></thead><tbody><tr><td align="left">ELEMENT_NODE</td><td align="left">1</td><td align="left">元素节点</td></tr><tr><td align="left">TEXT_NODE</td><td align="left">3</td><td align="left">文本节点</td></tr><tr><td align="left">COMMENT_NODE</td><td align="left">8</td><td align="left">注释节点</td></tr><tr><td align="left">DOCUMENT_NODE</td><td align="left">9</td><td align="left">Document 节点</td></tr><tr><td align="left">DOCUMENT_FRAGMENT_NODE</td><td align="left">11</td><td align="left">DocumentFragment 节点</td></tr></tbody></table><blockquote><p><a href="https://wiki.developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType" target="_blank" rel="noopener">https://wiki.developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType</a></p></blockquote><h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p><code>Range</code> 对象表示一个范围，有起始点和终止点，是用于管理选择范围的通用对象。</p><p>每个点都是一个相对于父节点的偏移量（offset），如果父节点是元素节点，则偏移量是子节点的编号。如果父节点是文本节点，则是文本中的位置。</p><p>需要注意的是终点要在起点之后。</p><p>有以下 HTML 片段</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span>&gt;</span>World<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>!<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-Range-选择节点"><a href="#使用-Range-选择节点" class="headerlink" title="使用 Range 选择节点"></a>使用 Range 选择节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>)</span><br><span class="line"><span class="comment">// 创建一个 `Range` 对象</span></span><br><span class="line"><span class="keyword">const</span> range = <span class="keyword">new</span> Range()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置范围起点为文本节点 Hello</span></span><br><span class="line">range.setStart(div, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 设置范围终点为元素节点 &lt;b&gt;!&lt;/b&gt; （不包括）</span></span><br><span class="line">range.setEnd(div, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 以文本形式返回其内容</span></span><br><span class="line"><span class="built_in">console</span>.log(range.toString()); <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure><h3 id="选择文本节点的一部分"><a href="#选择文本节点的一部分" class="headerlink" title="选择文本节点的一部分"></a>选择文本节点的一部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">range.setStart(div.firstChild, <span class="number">4</span>);</span><br><span class="line">range.setEnd(div, <span class="number">2</span>);</span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(range.toString()); <span class="comment">// o World</span></span><br></pre></td></tr></table></figure><h3 id="Range-的方法"><a href="#Range-的方法" class="headerlink" title="Range 的方法"></a>Range 的方法</h3><p><code>setStart(node, offset)</code> 将起点设置在：node 中的位置 offset<br><code>setStartBefore(node)</code> 将起点设置在：node 前面<br><code>setStartAfter(node)</code> 将起点设置在：node 后面</p><p><code>setEnd(node, offset)</code> 将终点设置为：node 中的位置 offset<br><code>setEndBefore(node)</code> 将终点设置为：node 前面<br><code>setEndAfter(node)</code> 将终点设置为：node 后面</p><p><code>selectNode(node)</code> 设置范围以选择整个 node<br><code>selectNodeContents(node)</code> 设置范围以选择整个 node 的内容<br><code>collapse(toStart)</code> 如果 toStart=true 则设置 end=start，否则设置 start=end，从而折叠范围<br><code>cloneRange()</code> 创建一个具有相同起点/终点的新范围</p><p><code>deleteContents()</code>  从文档中删除范围内容<br><code>extractContents()</code> 从文档中删除范围内容，并将删除的内容作为 DocumentFragment 返回<br><code>cloneContents()</code> 复制范围内容，并将复制的内容作为 DocumentFragment 返回<br><code>insertNode(node)</code> 在范围的起始处将 node 插入文档<br><code>surroundContents(node)</code> 使用 node 将所选范围内容包裹起来。要使此操作有效，则该范围必须包含其中所有元素的开始和结束标签：不能像 <i>abc 这样的部分范围</p><h2 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h2><p><code>Selection</code> 对象表示文档中的选择范围，可通过 <code>window.getSelection()</code> 或 <code>document.getSelection()</code> 来获取。</p><p>通过以下方式来监听选择事件</p><p><code>elem.onselectstart</code> —— 当选择在 elem 上触发时，例如，用户按下鼠标键并开始移动鼠标，阻止默认行为会使选择无法开始。</p><p><code>document.onselectionchange</code> —— 当选择变动时，此事件监听只能在 document 上设置。</p><p>选择对象的主要属性有</p><p><code>anchorNode</code> 选择的起始节点<br><code>anchorOffset</code> 选择起始节点的偏移量<br><code>focusNode</code> 选择的结束节点<br><code>focusOffset</code> 选择结束节点的偏移量<br><code>isCollapsed</code> 选择是否为空或不存在<br><code>rangeCount</code> 选择中的范围 (Range) 数，除 Firefox 外，其他浏览器最多为 1</p><h3 id="获取选择"><a href="#获取选择" class="headerlink" title="获取选择"></a>获取选择</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span>&gt;</span>World<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>!<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'selectionchange'</span>, event =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;anchorNode, anchorOffset, focusNode, focusOffset&#125; = <span class="built_in">document</span>.getSelection();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'anchorNode: '</span>, anchorNode)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'anchorOffset: '</span>, anchorOffset)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'focusNode: '</span>, focusNode)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'focusOffset: '</span>, focusOffset)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'----------'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="./images/selection-and-range/right-to-left.jpg" alt="right-to-left"></p><h3 id="选择的方法"><a href="#选择的方法" class="headerlink" title="选择的方法"></a>选择的方法</h3><p><code>getRangeAt(i)</code> 获取从 0 开始的第 i 个范围。在除 Firefox 之外的所有浏览器中，仅使用 0。<br><code>addRange(range)</code> 将 range 添加到选择中。如果选择已有关联的范围，则除 Firefox 外的所有浏览器都将忽略该调用。<br><code>removeRange(range)</code> 从选择中删除 range。<br><code>removeAllRanges()</code> 删除选择中所有范围。<br><code>empty()</code> removeAllRanges 的别名。</p><p><code>collapse(node, offset)</code> 用一个新的范围替换选定的范围，该新范围从给定的 node 处开始，到偏移 offset 处结束。<br><code>setPosition(node, offset)</code> collapse 的别名。<br><code>collapseToStart()</code> 折叠（替换为空范围）到选择起点。<br><code>collapseToEnd()</code> 折叠到选择终点。<br><code>extend(node, offset)</code> 将选择的焦点（focus）移到给定的 node，位置偏移 oofset。</p><p><code>setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset)</code> 用给定的起点 anchorNode/anchorOffset 和终点 focusNode/focusOffset 来替换选择范围。选中它们之间的所有内容。<br><code>selectAllChildren(node)</code> 选择 node 的所有子节点。<br><code>deleteFromDocument()</code> 从文档中删除所选择的内容。<br><code>containsNode(node, allowPartialContainment = false)</code> 检查选择中是否包含 node（特别是如果第二个参数是 true 的话）。</p><h2 id="使文档中某些内容不可选"><a href="#使文档中某些内容不可选" class="headerlink" title="使文档中某些内容不可选"></a>使文档中某些内容不可选</h2><ol><li>使用 CSS 属性 <code>user-select: none</code> 不允许选择从 elem 开始，但是用户可以在其他地方开始选择，并将 elem 包含在内。</li><li>阻止 <code>onselectstart</code> 或 <code>mousedown</code> 事件中的默认行为，这样可以防止在 elem 上开始选择，但是访问者可以在另一个元素上开始选择，然后扩展到 elem。</li><li>使用 <code>document.getSelection().empty()</code> 方法在选择发生后清除选择范围。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node" target="_blank" rel="noopener">Node</a><br><a href="https://zh.javascript.info/selection-range#comments" target="_blank" rel="noopener">选择（Selection）和范围（Range）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器的 Range 和 Selection 对象&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Web" scheme="https://coldstone.fun/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>什么是 peerDependencies</title>
    <link href="https://coldstone.fun/post/2020/11/29/npm-peerDependencies/"/>
    <id>https://coldstone.fun/post/2020/11/29/npm-peerDependencies/</id>
    <published>2020-11-29T11:30:00.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p><code>package.json</code> 里面的 <code>peerDependencies</code> 是什么意思</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知 <code>dependencies</code> 是项目的依赖包，<code>devDependencies</code> 项目开发阶段的依赖包，这些依赖包会在 <code>npm install</code> 过程中自动安装。</p><p>假设项目本身依赖 package A, 但是另一个 package B 同时依赖 package A，为了避免冲突，这时候就需要将 package A 设置为 package B 的<br><code>peerDependencies</code>。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>假设项目 A 依赖 package B</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;b&quot;: &quot;^1.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>package B 有一个 <code>peerDependencies</code> package c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;peerDependencies&quot;: &#123;</span><br><span class="line">    &quot;c&quot;: &quot;^1.x&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在项目 A 安装 package B 的时候, 要求同时安装 package C 作为 A 的 <code>dependencies</code>。</p><p>总而言之 <code>peerDependencies</code> 是<code>宿主</code>项目安装给其他依赖包使用的 package。</p><blockquote><p>注意: npm 1 和 2 版本会自动安装 peerDependencies。从 npm@3 开始将不再自动安装，而是得到一个警告，告知 <code>peerDependency</code> 没有被安装。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://flaviocopes.com/npm-peer-dependencies/" target="_blank" rel="noopener">What are peer dependencies in a Node module?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; 里面的 &lt;code&gt;peerDependencies&lt;/code&gt; 是什么意思&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="npm" scheme="https://coldstone.fun/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>学习观察者模式</title>
    <link href="https://coldstone.fun/post/2020/10/20/design-patterns-observer/"/>
    <id>https://coldstone.fun/post/2020/10/20/design-patterns-observer/</id>
    <published>2020-10-20T14:00:00.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式是一种行为设计模式，允许你定义一种订阅机制，可在对象事件发生时通知多个 “观察” 该对象的对象。</p><a id="more"></a><h2 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h2><p>观察者模式是一种行为设计模式，允许你定义一种订阅机制，可在对象事件发生时通知多个 “观察” 该对象的对象。</p><p>有值得关注的状态的对象通常被称为目标，由于它要将自身的状态改变通知给其他对象，我们也将其称为发布者 （publisher），所有希望关注发布者状态变化的其他对象被称为订阅者（subscribers）。</p><p>当发布者发布了事件，它要遍历订阅者并调用其对象的特定通知方法。</p><p>举例说明观察者模式类似于明星与粉丝的关系，粉丝关注明星，当明星发布消息的时候，粉丝会对这个消息做出反应。</p><h2 id="观察者模式适用场景"><a href="#观察者模式适用场景" class="headerlink" title="观察者模式适用场景"></a>观察者模式适用场景</h2><p>当一个对象状态的改变需要改变其他对象，可使用观察者模式。</p><p>当一些对象必须观察其他对象时，可使用观察者模式。</p><h2 id="实现观察者模式"><a href="#实现观察者模式" class="headerlink" title="实现观察者模式"></a>实现观察者模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加观察者</span></span><br><span class="line">  attach(observer) &#123;</span><br><span class="line">    <span class="keyword">const</span> isExist = <span class="keyword">this</span>.observers.includes(observer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isExist) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'观察者已添加'</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.observers.push(observer)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除观察者</span></span><br><span class="line">  detach(observer) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.observers.indexOf(observer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'观察者不存在'</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.observers.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通知观察者</span></span><br><span class="line">  notify() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> observer <span class="keyword">of</span> <span class="keyword">this</span>.observers) &#123;</span><br><span class="line">      observer.update(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 接收发布事件</span></span><br><span class="line">  update(subject) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>小明，小红，小安都会留意早餐吃什么，不同的早餐会使他们产生不同的情绪，因此早餐是目标，三人是观察者。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承目标类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Breakfast</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(element) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">''</span></span><br><span class="line">    <span class="keyword">this</span>.element = element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.element.addEventListener(<span class="string">'change'</span>, (event) =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = <span class="keyword">this</span>.element.value</span><br><span class="line">      <span class="keyword">this</span>.notify()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notify() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> observer <span class="keyword">of</span> <span class="keyword">this</span>.observers) &#123;</span><br><span class="line">      observer.update(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承观察者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(element) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.mood = <span class="string">''</span></span><br><span class="line">    <span class="keyword">this</span>.element = element</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update(subject) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  update(value) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'bread'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'开心'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'noodles'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'喜悦'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'gruel'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'讨厌'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">''</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.element.querySelector(<span class="string">'.mood'</span>).innerHTML = <span class="keyword">this</span>.mood</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  update(value) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'bread'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'讨厌'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'noodles'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'开心'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'gruel'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'还可以'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">''</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.element.querySelector(<span class="string">'.mood'</span>).innerHTML = <span class="keyword">this</span>.mood</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型三</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  update(value) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'bread'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'不喜欢'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'noodles'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'还可以'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'gruel'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'开心'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">''</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.element.querySelector(<span class="string">'.mood'</span>).innerHTML = <span class="keyword">this</span>.mood</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目标“早餐”</span></span><br><span class="line"><span class="keyword">const</span> breakfast = <span class="keyword">new</span> Breakfast(<span class="built_in">document</span>.getElementById(<span class="string">'breakfast'</span>))</span><br><span class="line"><span class="comment">// 创建观察者小明</span></span><br><span class="line"><span class="keyword">const</span> xiaoming = <span class="keyword">new</span> Person1(<span class="built_in">document</span>.getElementById(<span class="string">'xiaoming'</span>))</span><br><span class="line"><span class="comment">// 创建观察者小红</span></span><br><span class="line"><span class="keyword">const</span> xiaohong = <span class="keyword">new</span> Person2(<span class="built_in">document</span>.getElementById(<span class="string">'xiaohong'</span>))</span><br><span class="line"><span class="comment">// 创建观察者小安</span></span><br><span class="line"><span class="keyword">const</span> xiaoan = <span class="keyword">new</span> Person3(<span class="built_in">document</span>.getElementById(<span class="string">'xiaoan'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加观察者</span></span><br><span class="line">breakfast.attach(xiaoming)</span><br><span class="line">breakfast.attach(xiaohong)</span><br><span class="line">breakfast.attach(xiaoan)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消观察</span></span><br><span class="line"><span class="comment">// breakfast.detach(xiaoan)</span></span><br></pre></td></tr></table></figure><p>当早餐发生变化时，不同类型的人会根据不同的早餐产生不同的情绪。</p><p><img src="./images/design-patterns-observer/breakfast.gif" alt="breakfrast"></p><p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="js,result" data-user="xrr2016" data-slug-hash="xxOEqJK" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Observer Pattern">  <span>See the Pen <a href="https://codepen.io/xrr2016/pen/xxOEqJK" target="_blank" rel="noopener">  Observer Pattern</a> by Cold Stone (<a href="https://codepen.io/xrr2016" target="_blank" rel="noopener">@xrr2016</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;观察者模式是一种行为设计模式，允许你定义一种订阅机制，可在对象事件发生时通知多个 “观察” 该对象的对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://coldstone.fun/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Design Patterns" scheme="https://coldstone.fun/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 绘制图形 Circle Packing</title>
    <link href="https://coldstone.fun/post/2020/09/17/flutter-generative-artistry-03/"/>
    <id>https://coldstone.fun/post/2020/09/17/flutter-generative-artistry-03/</id>
    <published>2020-09-17T13:28:44.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解使用 Flutter 实现 Generative Artistry 教程里面的第六个图形 Circle Packing（圆形填充）</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>懒癌发作，好久没写博客了…</p><p>本文讲解使用 Flutter 实现 <a href="https://generativeartistry.com/tutorials" target="_blank" rel="noopener">Generative Artistry</a> 教程里面的第六个图形 Circle Packing（圆形填充）。</p><p>实现这个图形的思路大致是：</p><ol><li>创建一个圆。</li><li>判断这个圆是否与其他圆发生碰撞。</li><li>没有则不断增大圆的半径，再次进行碰撞检测，直至最大半径。</li><li>绘制更多的圆形，重复以上。</li></ol><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>照旧创建一个 <code>CirclePacking</code> 控件以及 <code>CirclePackingPainter</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CirclePacking</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CustomPaint(</span><br><span class="line">      painter: CirclePackingPainter(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CirclePackingPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(CirclePackingPainter oldDelegate) =&gt; <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个 <code>Circle</code> 类，代表绘制的圆形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  Point center;</span><br><span class="line">  <span class="built_in">double</span> radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在声明绘制需要的变量。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成的圆形数组</span></span><br><span class="line"><span class="built_in">List</span>&lt;Circle&gt; circles = [];</span><br><span class="line"><span class="comment">// 圆形的最小半径</span></span><br><span class="line"><span class="built_in">double</span> minRaidus = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 圆形的最大半径</span></span><br><span class="line"><span class="built_in">double</span> maxRaidus = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 圆形的总数</span></span><br><span class="line"><span class="built_in">int</span> totalCircles = <span class="number">500</span>;</span><br><span class="line"><span class="comment">// 尝试绘制圆形的总数</span></span><br><span class="line"><span class="built_in">int</span> createCircleAttemps = <span class="number">500</span>;</span><br><span class="line"><span class="comment">// 随机因子</span></span><br><span class="line">Random random = Random();</span><br></pre></td></tr></table></figure><h2 id="创建圆形"><a href="#创建圆形" class="headerlink" title="创建圆形"></a>创建圆形</h2><p>使用 <code>_createCircles</code> 方法生成需要绘制的圆形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _createCircles(Canvas canvas, Size size) &#123;</span><br><span class="line">  Circle circle = Circle()</span><br><span class="line">    ..radius = minRaidus</span><br><span class="line">    ..center = Point(</span><br><span class="line">      random.nextDouble() * size.width,</span><br><span class="line">      random.nextDouble() * size.height,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果没有检测到碰撞，一直增大圆形的半径</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = minRaidus; i &lt; maxRaidus; i++) &#123;</span><br><span class="line">    circle.radius = i;</span><br><span class="line">    <span class="keyword">if</span> (_doesHaveCollision(circle, size)) &#123;</span><br><span class="line">      circle.radius--;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  circles.add(circle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>_doesHaveCollision</code> 方法进行碰撞检测，目前都返回 <code>false</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> _doesHaveCollision(Circle circle, Size size) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制圆形"><a href="#绘制圆形" class="headerlink" title="绘制圆形"></a>绘制圆形</h2><p>创建一个 <code>_drawCircles</code> 方法绘制圆形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawCircles(Canvas canvas) &#123;</span><br><span class="line">  Paint paint = Paint()</span><br><span class="line">    ..strokeWidth = <span class="number">0.5</span></span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span></span><br><span class="line">    ..color = Colors.black</span><br><span class="line">    ..style = PaintingStyle.stroke;</span><br><span class="line"></span><br><span class="line">  circles.asMap().forEach((key, circle) &#123;</span><br><span class="line">    <span class="keyword">final</span> Offset offset = Offset(circle.center.x, circle.center.y);</span><br><span class="line">    canvas.drawCircle(offset, circle.radius, paint);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>paint</code> 方法里调用创建和绘制圆形的方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; totalCircles; i++) &#123;</span><br><span class="line">    _createCircles(canvas, size);</span><br><span class="line">    _drawCircles(canvas);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>噔噔噔，一团乱麻！</p><img src="./images/flutter-generative-artistry-03/mess.png" width="640" style="width: 320px"><h2 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h2><p>完善圆形之间的碰撞检测方法 <code>_doesHaveCollision</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> _doesHaveCollision(Circle circle, Size size) &#123;</span><br><span class="line">  <span class="comment">// 这里进行传入圆形与其他圆形的碰撞检测</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; circles.length; i++) &#123;</span><br><span class="line">    Circle otherCircle = circles[i];</span><br><span class="line">    <span class="built_in">double</span> r2 = circle.radius + otherCircle.radius;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断两圆圆心的距离是否小于它们的半径和</span></span><br><span class="line">    <span class="keyword">if</span> (r2 &gt;= circle.center.distanceTo(otherCircle.center) - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里判断圆形是否超过左右边界</span></span><br><span class="line">  <span class="keyword">if</span> (circle.center.x + circle.radius &gt;= size.width ||</span><br><span class="line">      circle.center.x - circle.radius &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这里判断圆形是否超过上下边界</span></span><br><span class="line">  <span class="keyword">if</span> (circle.center.y + circle.radius &gt;= size.height ||</span><br><span class="line">      circle.center.y - circle.radius &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-03/collision.png" width="640" style="width: 320px"><p>最后需要做的是在创建圆形之前的检测，更新创建圆形的方法 <code>_createCircles</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _createCircles(Canvas canvas, Size size) &#123;</span><br><span class="line">  Circle circle;</span><br><span class="line">  <span class="built_in">bool</span> circleSafeToDraw = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用尝试绘制圆形的次数进行循环</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; createCircleAttemps; i++) &#123;</span><br><span class="line">    circle = Circle()</span><br><span class="line">      ..radius = minRaidus</span><br><span class="line">      ..center = Point(</span><br><span class="line">        random.nextDouble() * size.width,</span><br><span class="line">        random.nextDouble() * size.height,</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果碰撞检测失败跳过这个圆形，进行下一次尝试</span></span><br><span class="line">    <span class="comment">// 否则跳出循环将这个圆形加入 circles 数组</span></span><br><span class="line">    <span class="keyword">if</span> (_doesHaveCollision(circle, size)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      circleSafeToDraw = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!circleSafeToDraw) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不断增大圆形的半径</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = minRaidus; i &lt; maxRaidus; i++) &#123;</span><br><span class="line">    circle.radius = i;</span><br><span class="line">    <span class="keyword">if</span> (_doesHaveCollision(circle, size)) &#123;</span><br><span class="line">      circle.radius--;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  circles.add(circle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成 🎉</p><img src="./images/flutter-generative-artistry-03/finish.png" width="640" style="width: 320px"><p>最终代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  Point center;</span><br><span class="line">  <span class="built_in">double</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CirclePacking</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CustomPaint(</span><br><span class="line">      painter: CirclePackingPainter(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CirclePackingPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 生成的圆形数组</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Circle&gt; circles = [];</span><br><span class="line">  <span class="comment">// 圆形的最小半径</span></span><br><span class="line">  <span class="built_in">double</span> minRaidus = <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// 圆形的最大半径</span></span><br><span class="line">  <span class="built_in">double</span> maxRaidus = <span class="number">100</span>;</span><br><span class="line">  <span class="comment">// 圆形的总数</span></span><br><span class="line">  <span class="built_in">int</span> totalCircles = <span class="number">500</span>;</span><br><span class="line">  <span class="comment">// 尝试绘制圆形的总数</span></span><br><span class="line">  <span class="built_in">int</span> createCircleAttemps = <span class="number">500</span>;</span><br><span class="line">  <span class="comment">// 随机因子</span></span><br><span class="line">  Random random = Random();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _createCircles(Canvas canvas, Size size) &#123;</span><br><span class="line">    Circle circle;</span><br><span class="line">    <span class="built_in">bool</span> circleSafeToDraw = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; createCircleAttemps; i++) &#123;</span><br><span class="line">      circle = Circle()</span><br><span class="line">        ..radius = minRaidus</span><br><span class="line">        ..center = Point(</span><br><span class="line">          random.nextDouble() * size.width,</span><br><span class="line">          random.nextDouble() * size.height,</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果碰撞检测失败跳过这个圆形，进行下一次尝试</span></span><br><span class="line">      <span class="comment">// 否则跳出循环将这个圆形加入 circles 数组</span></span><br><span class="line">      <span class="keyword">if</span> (_doesHaveCollision(circle, size)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        circleSafeToDraw = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!circleSafeToDraw) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不断增大圆形的半径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = minRaidus; i &lt; maxRaidus; i++) &#123;</span><br><span class="line">      circle.radius = i;</span><br><span class="line">      <span class="keyword">if</span> (_doesHaveCollision(circle, size)) &#123;</span><br><span class="line">        circle.radius--;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    circles.add(circle);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> _doesHaveCollision(Circle circle, Size size) &#123;</span><br><span class="line">    <span class="comment">// 这里对传入的圆形与其他绘制圆形的检测</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; circles.length; i++) &#123;</span><br><span class="line">      Circle otherCircle = circles[i];</span><br><span class="line">      <span class="built_in">double</span> r2 = circle.radius + otherCircle.radius;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断两个圆形圆心的距离是否小于两圆形的半径和</span></span><br><span class="line">      <span class="keyword">if</span> (r2 &gt;= circle.center.distanceTo(otherCircle.center) - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里判断圆形是否超过左右边界</span></span><br><span class="line">    <span class="keyword">if</span> (circle.center.x + circle.radius &gt;= size.width ||</span><br><span class="line">        circle.center.x - circle.radius &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里判断圆形是否超过上下边界</span></span><br><span class="line">    <span class="keyword">if</span> (circle.center.y + circle.radius &gt;= size.height ||</span><br><span class="line">        circle.center.y - circle.radius &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _drawCircles(Canvas canvas) &#123;</span><br><span class="line">    Paint paint = Paint()</span><br><span class="line">      ..strokeWidth = <span class="number">0.5</span></span><br><span class="line">      ..isAntiAlias = <span class="keyword">true</span></span><br><span class="line">      ..style = PaintingStyle.stroke;</span><br><span class="line"></span><br><span class="line">    circles.asMap().forEach((key, circle) &#123;</span><br><span class="line">      paint.color = Colors.black;</span><br><span class="line">      Offset offset = Offset(circle.center.x, circle.center.y);</span><br><span class="line">      canvas.drawCircle(offset, circle.radius, paint);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; totalCircles; i++) &#123;</span><br><span class="line">      _createCircles(canvas, size);</span><br><span class="line">      _drawCircles(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(CirclePackingPainter oldDelegate) =&gt; <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲解使用 Flutter 实现 Generative Artistry 教程里面的第六个图形 Circle Packing（圆形填充）&lt;/p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="https://coldstone.fun/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Generative artistry" scheme="https://coldstone.fun/tags/Generative-artistry/"/>
    
  </entry>
  
  <entry>
    <title>阿里的三道面试题</title>
    <link href="https://coldstone.fun/post/2020/08/31/ali-interview-questions/"/>
    <id>https://coldstone.fun/post/2020/08/31/ali-interview-questions/</id>
    <published>2020-08-31T09:00:00.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间做了三道阿里的在线面试题，分享一下</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间做了三道阿里的在线面试题，分享一下。</p><h2 id="一-身为前端，我很抱歉"><a href="#一-身为前端，我很抱歉" class="headerlink" title="(一) 身为前端，我很抱歉"></a>(一) 身为前端，我很抱歉</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">根据表达式计算字母数。</span><br><span class="line">说明：</span><br><span class="line">  给定一个描述字母数量的表达式，计算表达式里的每个字母实际数量</span><br><span class="line">  表达式格式：</span><br><span class="line">    字母紧跟表示次数的数字，如 A2B3</span><br><span class="line">    括号可将表达式局部分组后跟上数字，(A2)<span class="number">2</span>B</span><br><span class="line">    数字为<span class="number">1</span>时可缺省，如 AB3。</span><br><span class="line">示例：</span><br><span class="line">  countOfLetters(<span class="string">'A2B3'</span>); <span class="comment">// &#123; A: 2, B: 3 &#125;</span></span><br><span class="line">  countOfLetters(<span class="string">'A(A3B)2'</span>); <span class="comment">// &#123; A: 7, B: 2 &#125;</span></span><br><span class="line">  countOfLetters(<span class="string">'C4(A(A3B)2)2'</span>); <span class="comment">// &#123; A: 14, B: 4, C: 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countOfLetters</span>(<span class="params">letters, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/** 代码实现 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题面试的时候完全没思路，之后搜索了一下，发现跟 LeetCode 上的一道算法题类似类似 <a href="https://leetcode-cn.com/problems/number-of-atoms/" target="_blank" rel="noopener">726.原子的数量</a> 🤥</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isNum = <span class="function">(<span class="params">a</span>) =&gt;</span> <span class="regexp">/[\d]/</span>.test(a);</span><br><span class="line"><span class="keyword">const</span> isUpper = <span class="function">(<span class="params">a</span>) =&gt;</span> <span class="regexp">/[A-Z]/</span>.test(a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countOfLetters</span>(<span class="params">formula</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  stack.push([]);</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getNums = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span> (isNum(formula[index])) &#123;</span><br><span class="line">      num += formula[index];</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; formula.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isUpper(formula[i])) &#123;</span><br><span class="line">      <span class="keyword">let</span> atom = formula[i];</span><br><span class="line">      i += atom.length;</span><br><span class="line">      <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">      obj[<span class="string">"name"</span>] = atom;</span><br><span class="line">      <span class="keyword">if</span> (isNum(formula[i])) &#123;</span><br><span class="line">        <span class="keyword">let</span> num = getNums(i);</span><br><span class="line">        i += num.length;</span><br><span class="line">        obj[<span class="string">"value"</span>] = <span class="built_in">Number</span>(num);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[<span class="string">"value"</span>] = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      stack[stack.length - <span class="number">1</span>].push(obj);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (formula[i] === <span class="string">"("</span>) &#123;</span><br><span class="line">      stack.push([]);</span><br><span class="line">      i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (formula[i] === <span class="string">")"</span>) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      <span class="keyword">let</span> multi = getNums(i);</span><br><span class="line">      i += multi.length;</span><br><span class="line">      <span class="keyword">let</span> left = stack[stack.length - <span class="number">2</span>];</span><br><span class="line">      <span class="keyword">let</span> right = stack[stack.length - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; right.length; ++j) &#123;</span><br><span class="line">        <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">        obj[<span class="string">"value"</span>] = multi * right[j].value;</span><br><span class="line">        obj[<span class="string">"name"</span>] = right[j].name;</span><br><span class="line">        left.push(obj);</span><br><span class="line">      &#125;</span><br><span class="line">      stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(stack[0])</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stack[<span class="number">0</span>].length; ++i) &#123;</span><br><span class="line">    obj[stack[<span class="number">0</span>][i].name] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stack[<span class="number">0</span>].length; ++i) &#123;</span><br><span class="line">    obj[stack[<span class="number">0</span>][i].name] += stack[<span class="number">0</span>][i].value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = countOfLetters(<span class="string">"C4(A(A3B)2)2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><h2 id="二-防抖节流，力争上游"><a href="#二-防抖节流，力争上游" class="headerlink" title="(二) 防抖节流，力争上游"></a>(二) 防抖节流，力争上游</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">实现一个<span class="string">`Foo`</span>方法，接受函数<span class="string">`func`</span>和时间<span class="string">`wait`</span>，返回一个新函数，新函数即时连续多次执行，但也只限制在<span class="string">`wait`</span>的时间执行一次。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 代码实现 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题是常见的防抖节流函数，需要牢牢掌握啊。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      func.call(<span class="keyword">this</span>, args);</span><br><span class="line">      clearTimeout(timeout);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-递归递归，学会不亏"><a href="#三-递归递归，学会不亏" class="headerlink" title="(三) 递归递归，学会不亏"></a>(三) 递归递归，学会不亏</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">对象扁平化</span><br><span class="line">  说明：请实现 flatten(input) 函数，input 为一个 javascript 对象（<span class="built_in">Object</span> 或者 <span class="built_in">Array</span>），返回值为扁平化后的结果。</span><br><span class="line">  示例：</span><br><span class="line">    <span class="keyword">var</span> input = &#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      b: [ <span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">c</span>: <span class="literal">true</span> &#125;, [ <span class="number">3</span> ] ],</span><br><span class="line">      d: &#123; <span class="attr">e</span>: <span class="number">2</span>, <span class="attr">f</span>: <span class="number">3</span> &#125;,</span><br><span class="line">      g: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> output = flatten(input);</span><br><span class="line">    output如下</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"a"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"b[0]"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"b[1]"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">"b[2].c"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"b[3][0]"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="string">"d.e"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">"d.f"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="comment">// "g": null,  值为null或者undefined，丢弃</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/** 代码实现 */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>递归思想实现对象的扁平化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">obj, parentKey = <span class="string">""</span>, result = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="keyword">let</span> keyName = <span class="string">`<span class="subst">$&#123;parentKey&#125;</span><span class="subst">$&#123;key&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">"object"</span>) &#123;</span><br><span class="line">        flatten(obj[key], keyName + <span class="string">"."</span>, result);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[keyName] = obj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间做了三道阿里的在线面试题，分享一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://coldstone.fun/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Interview" scheme="https://coldstone.fun/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>使用 Github Action 发布 Flutter 插件</title>
    <link href="https://coldstone.fun/post/2020/07/28/github-action-publish-flutter-plugin/"/>
    <id>https://coldstone.fun/post/2020/07/28/github-action-publish-flutter-plugin/</id>
    <published>2020-07-28T06:49:16.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>本文说明如何使用 Github Actions 自动发布 Flutter 插件到 pub.dev</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者有发布过几个 Flutter 插件，一直在手动更新。手动更新插件有点麻烦且容易失败（需要科学上网），因此研究了下如何使用 <a href="https://help.github.com/en/actions" target="_blank" rel="noopener">Github Actions</a>（Github 提供的一种 CI/CD 服务）自动发布插件到 pub.dev，这样做的好处有</p><ol><li>避免手动发布，节约上传时间</li><li>在 Github 合并别人提交的代码后也可以立即发布</li></ol><p>以下说明如何进行</p><h2 id="添加流程"><a href="#添加流程" class="headerlink" title="添加流程"></a>添加流程</h2><p>首先在插件的 <code>.github/workflows</code> 目录内创建一个配置文件 <code>publish.yml</code>。</p><p><img src="./images/github-action-publish-flutter-plugin/publish.png" alt="publish"></p><p>内容如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Publish</span> <span class="string">to</span> <span class="string">Pub.dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 流程触发时机，当有标签创建时触发，如 v1.0.0。当然也可以选择别的触发时机，如 push，release 等</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">create</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publishing:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 拉取仓库代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Checkout"</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="comment"># 发布插件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dart</span> <span class="string">and</span> <span class="string">Flutter</span> <span class="string">Package</span> <span class="string">Publisher</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">k-paxian/dart-package-publisher@v1.2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 设置发布插件需要的 Token</span></span><br><span class="line">          <span class="attr">accessToken:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.OAUTH_ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">refreshToken:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.OAUTH_REFRESH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>流程中需要设置 <code>OAUTH_ACCESS_TOKEN</code> 和 <code>OAUTH_REFRESH_TOKEN</code> 这两个 Token，他们在 <code>.pub-cache/credentials.json</code> 的文件内，这个文件是第一次手动发布插件成功后自动生成的，在用户的 home 目录或者是安装 Flutter SDK 目录内。</p><p><img src="./images/github-action-publish-flutter-plugin/credentials.png" alt="credentials"></p><p>拿到 Token 后去插件仓库添加以上两个 Secret，至此配置工作已完成 🎉</p><p><img src="./images/github-action-publish-flutter-plugin/secrets.png" alt="secrets"></p><h2 id="发布插件"><a href="#发布插件" class="headerlink" title="发布插件"></a>发布插件</h2><p>现在每次更新插件只需要新增标签然后推送到仓库，就可以自动更新插件啦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0.1</span><br><span class="line"></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p><img src="./images/github-action-publish-flutter-plugin/action.png" alt="action"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/marketplace/actions/dart-and-flutter-package-publisher" target="_blank" rel="noopener">Dart and Flutter Package Publisher</a></p><p>第一次发布插件看这里 <a href="https://flutter.cn/docs/development/packages-and-plugins/developing-packages" target="_blank" rel="noopener">Publishing your package</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文说明如何使用 Github Actions 自动发布 Flutter 插件到 pub.dev&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Github" scheme="https://coldstone.fun/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 绘制三角网格 Triangular Mesh</title>
    <link href="https://coldstone.fun/post/2020/07/14/flutter-generative-artistry-02/"/>
    <id>https://coldstone.fun/post/2020/07/14/flutter-generative-artistry-02/</id>
    <published>2020-07-14T09:56:19.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>本文实现 Generative Artistry 教程的第 4 篇图形 Triangular mesh 效果如下</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文实现 <a href="https://generativeartistry.com/tutorials/" target="_blank" rel="noopener">Generative Artistry</a> 教程的第 4 篇图形 Triangular mesh 效果如下。</p><img src="./images/flutter-generative-artistry-02/colors.png" width="580" style="width: 290px"><p>没按顺序来，因为第二篇 Joy Division 我还没实现 😝</p><h2 id="创建画布"><a href="#创建画布" class="headerlink" title="创建画布"></a>创建画布</h2><p>首先创建一个用于绘制的画布，然后实现 <code>TriangularMeshPainter</code> 的 <code>paint</code> 方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TriangularMesh</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CustomPaint(</span><br><span class="line">      painter: TriangularMeshPainter(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TriangularMeshPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;&#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(TriangularMeshPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制端点"><a href="#绘制端点" class="headerlink" title="绘制端点"></a>绘制端点</h2><p>声明一个 <code>gap</code> 变量等比分割画布，在纵轴，横轴方向每隔 <code>gap</code> 长度使用 <code>canvas.drawCircle</code> 方法绘制圆点。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TriangularMeshPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// 声明 line 和 lines 变量存储点和线</span></span><br><span class="line">    <span class="built_in">List</span> line;</span><br><span class="line">    <span class="built_in">List</span> lines = [];</span><br><span class="line">    <span class="built_in">double</span> gap = size.width / <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置点的绘制属性</span></span><br><span class="line">    Paint paint = Paint()</span><br><span class="line">      ..color = Colors.black</span><br><span class="line">      ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 纵轴方向</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">double</span> y = gap / <span class="number">2</span>; y &lt;= size.height; y += gap) &#123;</span><br><span class="line">      line = [];</span><br><span class="line">      <span class="comment">// 横轴方向</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">double</span> x = gap / <span class="number">4</span>; x &lt;= size.width; x += gap) &#123;</span><br><span class="line">        line.add(&#123;<span class="string">"x"</span>: x, <span class="string">"y"</span>: y&#125;);</span><br><span class="line">        <span class="comment">// 绘制圆，参数分别是圆点位置，圆的半径，绘制属性</span></span><br><span class="line">        canvas.drawCircle(Offset(x, y), <span class="number">1</span>, paint);</span><br><span class="line">      &#125;</span><br><span class="line">      lines.add(line);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-02/circle.png" width="580" style="width: 290px"><p>创建一个 <code>Point</code> 类，表示一个绘制的圆点。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> x;</span><br><span class="line">  <span class="built_in">double</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了使点之间形成三角形，使用一个 <code>odd</code> 变量，在每次添加圆点的时候改变点的横轴值，形成交错效果。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="built_in">bool</span> odd = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">List</span>&lt;Point&gt; line;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;Point&gt;&gt; lines = [];</span><br><span class="line">  <span class="built_in">double</span> gap = size.width / <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">  Paint paint = Paint()</span><br><span class="line">    ..color = Colors.black</span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">double</span> y = gap / <span class="number">2</span>; y &lt;= size.height; y += gap) &#123;</span><br><span class="line">    <span class="comment">// 每次添加圆点之前对 odd 取反</span></span><br><span class="line">    odd = !odd;</span><br><span class="line">    line = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">double</span> x = gap / <span class="number">4</span>; x &lt;= size.width; x += gap) &#123;</span><br><span class="line">      Point point = Point();</span><br><span class="line">      <span class="comment">// 赋值圆点横轴位置时根据 odd 变量判断是否需要增加距离</span></span><br><span class="line">      point.x = x + (odd ? gap / <span class="number">2</span> : <span class="number">0</span>);</span><br><span class="line">      point.y = y;</span><br><span class="line">      <span class="comment">// 将点添加到 line 数组</span></span><br><span class="line">      line.add(point);</span><br><span class="line">      canvas.drawCircle(Offset(point.x, point.y), <span class="number">1</span>, paint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lines.add(line);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-02/odd.png" width="580" style="width: 290px"><h2 id="绘制网格"><a href="#绘制网格" class="headerlink" title="绘制网格"></a>绘制网格</h2><p>接下来需要建立 3 个点之间的关系，从而绘制三角形。首先创建一个接收三角形三个坐标，并连接绘制它们的函数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawTriangle(Canvas canvas, Point pointA, Point pointB, Point pointC) &#123;</span><br><span class="line">  <span class="comment">// 使用一个路径链接 3 点并绘制这条路径</span></span><br><span class="line">  Path path = Path();</span><br><span class="line">  Paint line = Paint()</span><br><span class="line">    ..color = Colors.black</span><br><span class="line">    ..style = PaintingStyle.stroke</span><br><span class="line">    ..strokeJoin = StrokeJoin.bevel</span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  path.moveTo(pointA.x, pointA.y);</span><br><span class="line">  path.lineTo(pointB.x, pointB.y);</span><br><span class="line">  path.lineTo(pointC.x, pointC.y);</span><br><span class="line">  path.lineTo(pointA.x, pointA.y);</span><br><span class="line">  <span class="comment">// 参数分别是路径，路径的绘制属性</span></span><br><span class="line">  canvas.drawPath(path, line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后遍历所有存储的线，并组合相邻线的点以形成三角形。</p><blockquote><p><a href="https://github.com/JChehe/blog/issues/24" target="_blank" rel="noopener">这部分也许会有点难以理解。脚本会遍历所有线，并组合相邻线的点以形成三角形。为了便于理解，我们将相邻的两条线分别称为 a 和 b。然后将两线符合要求的点合并到一个数组中，使其看起来像“之”字型：a1、b1、a2、b2、a3 以此类推。<br>这将为我们提供了一个含有三角形所有坐标的数组。如：[a1, b1, a2]、[b1, a2, b2], [a2, b2, a3] 等。</a></p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="comment">///<span class="markdown">...</span></span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span> dotLine;</span><br><span class="line">  odd = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> y = <span class="number">0</span>; y &lt; lines.length - <span class="number">1</span>; y++) &#123;</span><br><span class="line">    odd = !odd;</span><br><span class="line">    dotLine = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lines[y].length; i++) &#123;</span><br><span class="line">      dotLine.add(odd ? lines[y][i] : lines[y + <span class="number">1</span>][i]);</span><br><span class="line">      dotLine.add(odd ? lines[y + <span class="number">1</span>][i] : lines[y][i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; dotLine.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">      _drawTriangle(canvas, dotLine[i], dotLine[i + <span class="number">1</span>], dotLine[i + <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-02/triangle.png" width="580" style="width: 290px"><p>创建圆点时加入随机量，形成不规则的三角形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">double</span> x = gap / <span class="number">4</span>; x &lt;= size.width; x += gap) &#123;</span><br><span class="line">  Point point = Point();</span><br><span class="line">  <span class="built_in">double</span> random = (Random().nextDouble() * <span class="number">.8</span> - <span class="number">.4</span>) * gap;</span><br><span class="line">  point.x = x + random + (odd ? gap / <span class="number">2</span> : <span class="number">0</span>);</span><br><span class="line">  point.y = y + (Random().nextDouble() * <span class="number">.8</span> - <span class="number">.4</span>) * gap;</span><br><span class="line">  line.add(point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-02/random.png" width="580" style="width: 290px"><h2 id="添加颜色"><a href="#添加颜色" class="headerlink" title="添加颜色"></a>添加颜色</h2><p>最后在绘制三角形函数那里加上一些颜色，只需要设置路径的 <code>color</code> 和 <code>style</code> 绘制属性即可。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawTriangle(Canvas canvas, Point pointA, Point pointB, Point pointC) &#123;</span><br><span class="line">  Path path = Path();</span><br><span class="line">  Paint fill = Paint()</span><br><span class="line">    <span class="comment">// 添加颜色，可以尝试设置不同的颜色</span></span><br><span class="line">    ..color = Colors.black.withOpacity(Random().nextDouble() * <span class="number">.9</span>)</span><br><span class="line">    <span class="comment">// ..color = colors[Random().nextInt(colors.length)].withOpacity(.8)</span></span><br><span class="line">    <span class="comment">// 将路径的绘制样式设置为 fill</span></span><br><span class="line">    ..style = PaintingStyle.fill</span><br><span class="line">    ..strokeJoin = StrokeJoin.bevel</span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  Paint line = Paint()</span><br><span class="line">    ..color = Colors.black</span><br><span class="line">    ..style = PaintingStyle.stroke</span><br><span class="line">    ..strokeJoin = StrokeJoin.bevel</span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  path.moveTo(pointA.x, pointA.y);</span><br><span class="line">  path.lineTo(pointB.x, pointB.y);</span><br><span class="line">  path.lineTo(pointC.x, pointC.y);</span><br><span class="line">  path.lineTo(pointA.x, pointA.y);</span><br><span class="line"></span><br><span class="line">  canvas.drawPath(path, fill);</span><br><span class="line">  <span class="comment">// 新增一个路径绘制</span></span><br><span class="line">  canvas.drawPath(path, line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成！👏</p><img src="./images/flutter-generative-artistry-02/black.png" width="580" style="width: 290px"><img src="./images/flutter-generative-artistry-02/colors.png" width="580" style="width: 290px"><p><a href="https://github.com/xrr2016/flutter-generative-artistry/blob/master/lib/graphs/triangular_mesh.dart" target="_blank" rel="noopener">代码地址</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://generativeartistry.com/tutorials/triangular-mesh" target="_blank" rel="noopener">Triangular Mesh</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实现 Generative Artistry 教程的第 4 篇图形 Triangular mesh 效果如下&lt;/p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="https://coldstone.fun/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Generative artistry" scheme="https://coldstone.fun/tags/Generative-artistry/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 绘制瓷砖线 Tiled Lines</title>
    <link href="https://coldstone.fun/post/2020/07/07/flutter-generative-artistry-01/"/>
    <id>https://coldstone.fun/post/2020/07/07/flutter-generative-artistry-01/</id>
    <published>2020-07-07T08:20:50.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>前几天发现了一个使用 <code>&lt;canvas&gt;</code> 绘制图形的教程 generative artistry 感觉很有意思，尝试用 Flutter 实现。本文实现第一篇教程的图形 Tiled Lines 效果如下。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天发现了一个使用 <code>&lt;canvas&gt;</code> 绘制图形的教程 <a href="https://generativeartistry.com/tutorials/" target="_blank" rel="noopener">generative artistry</a> 感觉很有意思，尝试用 Flutter 实现。本文实现第一篇教程的图形 Tiled Lines 效果如下。</p><img src="./images/flutter-generative-artistry-01/tiled-lines.png" width="580" style="width: 290px"><h2 id="创建画布"><a href="#创建画布" class="headerlink" title="创建画布"></a>创建画布</h2><p>首先使用一个 <code>Container</code> 控件创建一个 <code>320*320</code> 大小的绘制区域，添加 <code>CustomPaint</code> 画布和一个继承 <code>CustomPainter</code><br>的画笔 <code>TiledLinesPainter</code>。关于 <code>CustomPaint</code> 和 <code>CustomPainter</code> 的知识可以查阅这篇文章 <a href="https://coldstone.fun/post/2020/05/31/flutter-bar-chart">使用 Flutter 绘制图表（一）柱状图 📊</a>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLines</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Container(</span><br><span class="line">          width: <span class="number">320.0</span>,</span><br><span class="line">          height: <span class="number">320.0</span>,</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            border: Border.all(</span><br><span class="line">              color: Colors.black,</span><br><span class="line">              width: <span class="number">1.0</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          child: CustomPaint(</span><br><span class="line">            painter: TiledLinesPainter(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLinesPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(TiledLinesPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-01/container.png" width="580" style="width: 290px"><h2 id="绘制线条"><a href="#绘制线条" class="headerlink" title="绘制线条"></a>绘制线条</h2><p>创建好画布后在 <code>TiledLinesPainter</code> 的 <code>paint</code> 方法里进行绘制。添加一个 <code>_drawLine</code> 方法用来绘制线条，绘制线条需要起始点和终止点，通过参数将数值传入。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLinesPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> _drawLine(</span><br><span class="line">    Canvas canvas,</span><br><span class="line">    <span class="built_in">double</span> x,</span><br><span class="line">    <span class="built_in">double</span> y,</span><br><span class="line">    <span class="built_in">double</span> width,</span><br><span class="line">    <span class="built_in">double</span> height,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">      ..strokeCap = StrokeCap.square</span><br><span class="line">      ..strokeWidth = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    Offset p1 = Offset(x, y);</span><br><span class="line">    Offset p2 = Offset(x + width, y + height);</span><br><span class="line"></span><br><span class="line">    canvas.drawLine(p1, p2, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    _drawLine(canvas, <span class="number">0</span>, <span class="number">0</span>, size.width, size.height);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(TiledLinesPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-01/line.png" width="580" style="width: 290px"><h2 id="加入随机性"><a href="#加入随机性" class="headerlink" title="加入随机性"></a>加入随机性</h2><p>使用 <code>Random().nextBool()</code> 方法创建一个随机的布尔值，在绘制线条之前改变起始点和终止点的坐标，这样 <code>_drawLine</code> 方法就有了绘制不同方向的线条的能力。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawLine(</span><br><span class="line">    Canvas canvas,</span><br><span class="line">    <span class="built_in">double</span> x,</span><br><span class="line">    <span class="built_in">double</span> y,</span><br><span class="line">    <span class="built_in">double</span> width,</span><br><span class="line">    <span class="built_in">double</span> height,</span><br><span class="line">  ) &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> isLeftToRight = Random().nextBool();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">    ..strokeCap = StrokeCap.square</span><br><span class="line">    ..strokeWidth = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  Offset p1;</span><br><span class="line">  Offset p2;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isLeftToRight) &#123;</span><br><span class="line">    p1 = Offset(x, y);</span><br><span class="line">    p2 = Offset(x + width, y + height);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    p1 = Offset(x + width, y);</span><br><span class="line">    p2 = Offset(x, y + height);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  canvas.drawLine(p1, p2, paint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-01/line2.png" width="580" style="width: 290px"><h2 id="绘制更多的线条"><a href="#绘制更多的线条" class="headerlink" title="绘制更多的线条"></a>绘制更多的线条</h2><p>可以绘制更多的线条喽！给 <code>TiledLinesPainter</code> 添加一个 <code>step</code> 属性，表示在画布上每隔多长距离绘制一条线。使用 <code>step</code> 将画布分割为多个小的方格，在每个小的方格里面绘制线条。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLinesPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> step;</span><br><span class="line"></span><br><span class="line">  TiledLinesPainter(<span class="keyword">this</span>.step);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _drawLine(</span><br><span class="line">    Canvas canvas,</span><br><span class="line">    <span class="built_in">double</span> x,</span><br><span class="line">    <span class="built_in">double</span> y,</span><br><span class="line">    <span class="built_in">double</span> width,</span><br><span class="line">    <span class="built_in">double</span> height,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">bool</span> isLeftToRight = Random().nextBool();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">      ..strokeCap = StrokeCap.square</span><br><span class="line">      ..strokeWidth = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    Offset p1;</span><br><span class="line">    Offset p2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isLeftToRight) &#123;</span><br><span class="line">      p1 = Offset(x, y);</span><br><span class="line">      p2 = Offset(x + width, y + height);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      p1 = Offset(x + width, y);</span><br><span class="line">      p2 = Offset(x, y + height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    canvas.drawLine(p1, p2, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">double</span> x = <span class="number">0</span>; x &lt; size.width; x += step) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">double</span> y = <span class="number">0</span>; y &lt; size.height; y += step) &#123;</span><br><span class="line">        _drawLine(canvas, x, y, step, step);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(TiledLinesPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">TiledLinesPainter(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-01/step.png" width="580" style="width: 290px"><h2 id="绘制边框和阴影"><a href="#绘制边框和阴影" class="headerlink" title="绘制边框和阴影"></a>绘制边框和阴影</h2><p>最后给画布添加边框和阴影效果，大功告成！👏 感谢阅读。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLines</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;BoxShadow&gt; shadows = [];</span><br><span class="line">    <span class="built_in">double</span> opacity = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加画布阴影</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">double</span> i = <span class="number">1</span>; i &lt;= <span class="number">16</span>; i++) &#123;</span><br><span class="line">      opacity -= <span class="number">0.01</span>;</span><br><span class="line">      opacity = opacity &gt; <span class="number">0.01</span> ? opacity : <span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line">      shadows.add(</span><br><span class="line">        BoxShadow(</span><br><span class="line">          offset: Offset(-i, i),</span><br><span class="line">          color: Color.fromRGBO(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, opacity),</span><br><span class="line">          blurRadius: <span class="number">2</span>,</span><br><span class="line">          spreadRadius: <span class="number">1</span>,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Container(</span><br><span class="line">          width: <span class="number">320.0</span>,</span><br><span class="line">          height: <span class="number">320.0</span>,</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            <span class="comment">// 添加画布边框</span></span><br><span class="line">            border: Border.all(</span><br><span class="line">              color: Colors.black,</span><br><span class="line">              width: <span class="number">20.0</span>,</span><br><span class="line">            ),</span><br><span class="line">            boxShadow: shadows,</span><br><span class="line">          ),</span><br><span class="line">          child: Container(</span><br><span class="line">            color: Colors.white,</span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">            child: CustomPaint(</span><br><span class="line">              painter: TiledLinesPainter(<span class="number">20</span>),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLinesPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> step;</span><br><span class="line"></span><br><span class="line">  TiledLinesPainter(<span class="keyword">this</span>.step);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _drawLine(</span><br><span class="line">    Canvas canvas,</span><br><span class="line">    <span class="built_in">double</span> x,</span><br><span class="line">    <span class="built_in">double</span> y,</span><br><span class="line">    <span class="built_in">double</span> width,</span><br><span class="line">    <span class="built_in">double</span> height,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 创建随机性</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">bool</span> isLeftToRight = Random().nextBool();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">      ..strokeCap = StrokeCap.square</span><br><span class="line">      ..strokeWidth = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    Offset p1;</span><br><span class="line">    Offset p2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置线条的起始点和终止点</span></span><br><span class="line">    <span class="keyword">if</span> (isLeftToRight) &#123;</span><br><span class="line">      p1 = Offset(x, y);</span><br><span class="line">      p2 = Offset(x + width, y + height);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      p1 = Offset(x + width, y);</span><br><span class="line">      p2 = Offset(x, y + height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    canvas.drawLine(p1, p2, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// 使用 step 分割画布，创建小的绘制方格</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">double</span> x = <span class="number">0</span>; x &lt; size.width; x += step) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">double</span> y = <span class="number">0</span>; y &lt; size.height; y += step) &#123;</span><br><span class="line">        _drawLine(canvas, x, y, step, step);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(TiledLinesPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-01/tiled-lines.png" width="580" style="width: 290px"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://generativeartistry.com/tutorials/tiled-lines/" target="_blank" rel="noopener">Tiled Lines</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天发现了一个使用 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 绘制图形的教程 generative artistry 感觉很有意思，尝试用 Flutter 实现。本文实现第一篇教程的图形 Tiled Lines 效果如下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="https://coldstone.fun/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Generative artistry" scheme="https://coldstone.fun/tags/Generative-artistry/"/>
    
  </entry>
  
  <entry>
    <title>用 Flutter 实现探探卡片布局</title>
    <link href="https://coldstone.fun/post/2020/06/18/flutter-tinder-card/"/>
    <id>https://coldstone.fun/post/2020/06/18/flutter-tinder-card/</id>
    <published>2020-06-18T04:22:08.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>前几天写了一个 Fluter 插件 tcard，用来实现类似于探探卡片的布局。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天写了一个 Fluter 插件 <a href="https://github.com/xrr2016/tcard" target="_blank" rel="noopener">tcard</a>，用来实现类似于探探卡片的布局。效果如下，本文讲解如何使用 <code>Stack</code> 控件实现这个布局。</p><img src="./images/flutter-tinder-card/images.gif" width="900" style="width: 500px"><p><a href="https://dartpad.dev/efe152273d6835af5cec6d8f40ab0c58" target="_blank" rel="noopener">在线查看</a></p><h2 id="初识-Stack"><a href="#初识-Stack" class="headerlink" title="初识 Stack"></a>初识 Stack</h2><p><code>Stack</code> 是一个有多子项的控件，它会将自己的子项相对于自身边缘进行定位，后面的子项会覆盖前面的子项。通常用来实现将一个控件覆盖于另一个控件之上的布局，比如在一张图片上显示一些文字。子项的默认位置在 <code>Stack</code> 左上角，也可以用 <code>Align</code> 或者 <code>Positioned</code> 控件分别进行定位。</p><img src="https://flutter.github.io/assets-for-api-docs/assets/widgets/stack.png" style="width: 520px"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Stack(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    ),</span><br><span class="line">    Container(</span><br><span class="line">      width: <span class="number">90</span>,</span><br><span class="line">      height: <span class="number">90</span>,</span><br><span class="line">      color: Colors.green,</span><br><span class="line">    ),</span><br><span class="line">    Container(</span><br><span class="line">      width: <span class="number">80</span>,</span><br><span class="line">      height: <span class="number">80</span>,</span><br><span class="line">      color: Colors.blue,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="https://youtu.be/liEGSeD3Zt8" target="_blank" rel="noopener">Stack (Flutter Widget of the Week)</a></p><h2 id="布局思路"><a href="#布局思路" class="headerlink" title="布局思路"></a>布局思路</h2><p>要使用 <code>Stack</code> 实现这个卡片布局的大致思路如下</p><ol><li>首先需要前，中，后三个子控件，使用 <code>Align</code> 控件定位在容器中。</li><li>需要一个手势监听器 <code>GestureDetector</code> 监听手指滑动。</li><li>监听手指在屏幕上滑动同时更新最前面卡片的位置。</li><li>判断移动的横轴距离进行卡片位置变换动画或者卡片回弹动画。</li><li>如果运行了卡片位置变换动画在动画结束后更新卡片的索引值。</li></ol><h2 id="卡片布局"><a href="#卡片布局" class="headerlink" title="卡片布局"></a>卡片布局</h2><ol><li>创建 <code>Stack</code> 容器以及前，中，后三个子控件</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">//  前面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _frontCard() &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _middleCard() &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _backCard() &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.green,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'TCards demo'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: SizedBox(</span><br><span class="line">            width: <span class="number">300</span>,</span><br><span class="line">            height: <span class="number">400</span>,</span><br><span class="line">            child: Stack(</span><br><span class="line">              children: [</span><br><span class="line">                <span class="comment">// 后面的子项会显示在上面，所以前面的卡片放在最后</span></span><br><span class="line">                _backCard(),</span><br><span class="line">                _middleCard(),</span><br><span class="line">                _frontCard(),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-tinder-card/stack.png" width="560" style="width: 280px"><ol start="2"><li>对子控件分别定位并设置其尺寸</li></ol><p>定位需要设置 <code>Align</code> 控件的 alignment 属性，传入一个 <code>Alignment(x, y)</code> 进行设置。设置尺寸需要使用 <code>LayoutBuilder</code> 获取当前父容器的尺寸，然后根据容器尺寸进行计算。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">//  前面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _frontCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: Alignment(<span class="number">0.0</span>, <span class="number">-0.5</span>),</span><br><span class="line">      <span class="comment">// 使用 SizedBox 确定卡片尺寸</span></span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        <span class="comment">// 计算卡片尺寸，相对于父容器</span></span><br><span class="line">        size: Size(constraints.maxWidth * <span class="number">0.9</span>, constraints.maxHeight * <span class="number">0.9</span>),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _middleCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: Alignment(<span class="number">0.0</span>, <span class="number">0.0</span>),</span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        <span class="comment">// 计算卡片尺寸，相对于父容器</span></span><br><span class="line">        size: Size(constraints.maxWidth * <span class="number">0.85</span>, constraints.maxHeight * <span class="number">0.9</span>),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _backCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: Alignment(<span class="number">0.0</span>, <span class="number">0.5</span>),</span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        <span class="comment">// 计算卡片尺寸，相对于父容器</span></span><br><span class="line">        size: Size(constraints.maxWidth * <span class="number">0.8</span>, constraints.maxHeight * <span class="number">.9</span>),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.green,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'TCards demo'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: SizedBox(</span><br><span class="line">            width: <span class="number">300</span>,</span><br><span class="line">            height: <span class="number">400</span>,</span><br><span class="line">            child: LayoutBuilder(</span><br><span class="line">              builder: (context, constraints) &#123;</span><br><span class="line">                <span class="comment">// 使用 LayoutBuilder 获取容器的尺寸，传个子项计算卡片尺寸</span></span><br><span class="line">                <span class="keyword">return</span> Stack(</span><br><span class="line">                  children: [</span><br><span class="line">                    <span class="comment">// 后面的子项会显示在上面，所以前面的卡片放在最后</span></span><br><span class="line">                    _backCard(constraints),</span><br><span class="line">                    _middleCard(constraints),</span><br><span class="line">                    _frontCard(constraints),</span><br><span class="line">                  ],</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-tinder-card/align.png" width="560" style="width: 280px"><ol start="3"><li>更新最前面卡片位置</li></ol><p>向 <code>Stack</code> 容器添加一个 <code>GestureDetector</code>，手指在屏幕上移动时更新最前面卡片的位置。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 保存最前面卡片的定位</span></span><br><span class="line">  Alignment _frontCardAlignment = Alignment(<span class="number">0.0</span>, <span class="number">-0.5</span>);</span><br><span class="line">  <span class="comment">// 保存最前面卡片的旋转角度</span></span><br><span class="line">  <span class="built_in">double</span> _frontCardRotation = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  前面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _frontCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: _frontCardAlignment,</span><br><span class="line">      <span class="comment">// 使用 Transform.rotate 旋转卡片</span></span><br><span class="line">      child: Transform.rotate(</span><br><span class="line">        angle: (pi / <span class="number">180.0</span>) * _frontCardRotation,</span><br><span class="line">        <span class="comment">// 使用 SizedBox 确定卡片尺寸</span></span><br><span class="line">        child: SizedBox.fromSize(</span><br><span class="line">          size: Size(constraints.maxWidth * <span class="number">0.9</span>, constraints.maxHeight * <span class="number">0.9</span>),</span><br><span class="line">          child: Container(</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略......</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'TCards demo'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: SizedBox(</span><br><span class="line">            width: <span class="number">300</span>,</span><br><span class="line">            height: <span class="number">400</span>,</span><br><span class="line">            child: LayoutBuilder(</span><br><span class="line">              builder: (context, constraints) &#123;</span><br><span class="line">                <span class="comment">// 使用 LayoutBuilder 获取容器的尺寸，传个子项计算卡片尺寸</span></span><br><span class="line">                Size size = MediaQuery.of(context).size;</span><br><span class="line">                <span class="built_in">double</span> speed = <span class="number">10.0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> Stack(</span><br><span class="line">                  children: [</span><br><span class="line">                    <span class="comment">// 后面的子项会显示在上面，所以前面的卡片放在最后</span></span><br><span class="line">                    _backCard(constraints),</span><br><span class="line">                    _middleCard(constraints),</span><br><span class="line">                    _frontCard(constraints),</span><br><span class="line">                    <span class="comment">// 使用一个占满父元素的 GestureDetector 监听手指移动</span></span><br><span class="line">                    SizedBox.expand(</span><br><span class="line">                      child: GestureDetector(</span><br><span class="line">                        onPanDown: (DragDownDetails details) &#123;&#125;,</span><br><span class="line">                        onPanUpdate: (DragUpdateDetails details) &#123;</span><br><span class="line">                          <span class="comment">// 手指移动就更新最前面卡片的 alignment 属性</span></span><br><span class="line">                          _frontCardAlignment += Alignment(</span><br><span class="line">                            details.delta.dx / (size.width / <span class="number">2</span>) * speed,</span><br><span class="line">                            details.delta.dy / (size.height / <span class="number">2</span>) * speed,</span><br><span class="line">                          );</span><br><span class="line">                          <span class="comment">// 设置最前面卡片的旋转角度</span></span><br><span class="line">                          _frontCardRotation = _frontCardAlignment.x;</span><br><span class="line">                          <span class="comment">// setState 更新界面</span></span><br><span class="line">                          setState(() &#123;&#125;);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        onPanEnd: (DragEndDetails details) &#123;&#125;,</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ],</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-tinder-card/pan.gif" width="260" style="width: 280px"><h2 id="卡片动画"><a href="#卡片动画" class="headerlink" title="卡片动画"></a>卡片动画</h2><p>这个布局有三种动画，最前面卡片移开的动画；后面两张卡片位置和尺寸变化的动画；最前面卡片回到原位的动画。</p><ol><li>判断卡片横轴移动距离</li></ol><p>在手指离开屏幕时判断卡片横轴的移动距离，如果最前面的卡片横轴移动距离超过限制就运行换位动画，否则运行回弹动画。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改变位置的动画</span></span><br><span class="line"><span class="keyword">void</span> _runChangeOrderAnimation() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卡片回弹的动画</span></span><br><span class="line"><span class="keyword">void</span> _runReboundAnimation(Offset pixelsPerSecond, Size size) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 卡片横轴距离限制</span></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">double</span> limit = <span class="number">10.0</span>;</span><br><span class="line"></span><br><span class="line">SizedBox.expand(</span><br><span class="line">  child: GestureDetector(</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">    onPanEnd: (DragEndDetails details) &#123;</span><br><span class="line">      <span class="comment">// 如果最前面的卡片横轴移动距离超过限制就运行换位动画，否则运行回弹动画</span></span><br><span class="line">      <span class="keyword">if</span> (_frontCardAlignment.x &gt; limit ||</span><br><span class="line">          _frontCardAlignment.x &lt; -limit) &#123;</span><br><span class="line">        _runChangeOrderAnimation();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _runReboundAnimation(</span><br><span class="line">          details.velocity.pixelsPerSecond,</span><br><span class="line">          size,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><ol start="2"><li>卡片回弹动画</li></ol><p>首先实现卡片回弹的动画，使用 <code>AnimationController</code> 控制动画，在 <code>initState</code> 初始化动画控制器。创建一个 <code>AlignmentTween</code> 设置动画运动值，起始值是卡片当前位置，最终值是卡片的默认位置。然后将一个弹簧模拟 <code>SpringSimulation</code> 传递给动画控制器，让动画模拟运行。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">  <span class="comment">// 卡片回弹动画</span></span><br><span class="line">  Animation&lt;Alignment&gt; _reboundAnimation;</span><br><span class="line">  <span class="comment">// 卡片回弹动画控制器</span></span><br><span class="line">  AnimationController _reboundController;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 卡片回弹的动画</span></span><br><span class="line">  <span class="keyword">void</span> _runReboundAnimation(Offset pixelsPerSecond, Size size) &#123;</span><br><span class="line">    <span class="comment">// 创建动画值</span></span><br><span class="line">    _reboundAnimation = _reboundController.drive(</span><br><span class="line">      AlignmentTween(</span><br><span class="line">        <span class="comment">// 起始值是卡片当前位置，最终值是卡片的默认位置</span></span><br><span class="line">        begin: _frontCardAlignment,</span><br><span class="line">        end: Alignment(<span class="number">0.0</span>, <span class="number">-0.5</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 计算卡片运动速度</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> unitsPerSecondX = pixelsPerSecond.dx / size.width;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> unitsPerSecondY = pixelsPerSecond.dy / size.height;</span><br><span class="line">    <span class="keyword">final</span> unitsPerSecond = Offset(unitsPerSecondX, unitsPerSecondY);</span><br><span class="line">    <span class="keyword">final</span> unitVelocity = unitsPerSecond.distance;</span><br><span class="line">    <span class="comment">// 创建弹簧模拟的定义</span></span><br><span class="line">    <span class="keyword">const</span> spring = SpringDescription(mass: <span class="number">30</span>, stiffness: <span class="number">1</span>, damping: <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 创建弹簧模拟</span></span><br><span class="line">    <span class="keyword">final</span> simulation = SpringSimulation(spring, <span class="number">0</span>, <span class="number">1</span>, -unitVelocity);</span><br><span class="line">    <span class="comment">// 根据给定的模拟运行动画</span></span><br><span class="line">    _reboundController.animateWith(simulation);</span><br><span class="line">    <span class="comment">// 重置旋转值</span></span><br><span class="line">    _frontCardRotation = <span class="number">0.0</span>;</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 初始化回弹的动画控制器</span></span><br><span class="line">    _reboundController = AnimationController(vsync: <span class="keyword">this</span>)</span><br><span class="line">      ..addListener(() &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="comment">// 动画运行时更新最前面卡片的 alignment 属性</span></span><br><span class="line">          _frontCardAlignment = _reboundAnimation.value;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-tinder-card/rebound.gif" width="536" style="width: 280px"><ol start="3"><li>卡片换位动画</li></ol><p>卡片换位动画就是将最前面的卡片移除可视区，将中间的卡片移动到最前面，将最后的卡片移动到中间，然后新建一个最后面的卡片。在卡片更换位置的同时需要改变卡片的尺寸，位置动画和尺寸动画同时进行。首先定义每个卡片运动时的动画值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="markdown">卡片尺寸</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CardSizes</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> Size front(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Size(constraints.maxWidth * <span class="number">0.9</span>, constraints.maxHeight * <span class="number">0.9</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Size middle(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Size(constraints.maxWidth * <span class="number">0.85</span>, constraints.maxHeight * <span class="number">0.9</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Size back(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Size(constraints.maxWidth * <span class="number">0.8</span>, constraints.maxHeight * <span class="number">.9</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="markdown">卡片位置</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CardAlignments</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> Alignment front = Alignment(<span class="number">0.0</span>, <span class="number">-0.5</span>);</span><br><span class="line">  <span class="keyword">static</span> Alignment middle = Alignment(<span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">  <span class="keyword">static</span> Alignment back = Alignment(<span class="number">0.0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="markdown">卡片运动动画</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CardAnimations</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">最前面卡片的消失动画值</span></span></span><br><span class="line">  <span class="keyword">static</span> Animation&lt;Alignment&gt; frontCardDisappearAnimation(</span><br><span class="line">    AnimationController parent,</span><br><span class="line">    Alignment beginAlignment,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> AlignmentTween(</span><br><span class="line">      begin: beginAlignment,</span><br><span class="line">      end: Alignment(</span><br><span class="line">        beginAlignment.x &gt; <span class="number">0</span></span><br><span class="line">            ? beginAlignment.x + <span class="number">30.0</span></span><br><span class="line">            : beginAlignment.x - <span class="number">30.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">      ),</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: parent,</span><br><span class="line">        curve: Interval(<span class="number">0.0</span>, <span class="number">0.5</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">中间卡片位置变换动画值</span></span></span><br><span class="line">  <span class="keyword">static</span> Animation&lt;Alignment&gt; middleCardAlignmentAnimation(</span><br><span class="line">    AnimationController parent,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> AlignmentTween(</span><br><span class="line">      begin: CardAlignments.middle,</span><br><span class="line">      end: CardAlignments.front,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: parent,</span><br><span class="line">        curve: Interval(<span class="number">0.2</span>, <span class="number">0.5</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">中间卡片尺寸变换动画值</span></span></span><br><span class="line">  <span class="keyword">static</span> Animation&lt;Size&gt; middleCardSizeAnimation(</span><br><span class="line">    AnimationController parent,</span><br><span class="line">    BoxConstraints constraints,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> SizeTween(</span><br><span class="line">      begin: CardSizes.middle(constraints),</span><br><span class="line">      end: CardSizes.front(constraints),</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: parent,</span><br><span class="line">        curve: Interval(<span class="number">0.2</span>, <span class="number">0.5</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">最后面卡片位置变换动画值</span></span></span><br><span class="line">  <span class="keyword">static</span> Animation&lt;Alignment&gt; backCardAlignmentAnimation(</span><br><span class="line">    AnimationController parent,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> AlignmentTween(</span><br><span class="line">      begin: CardAlignments.back,</span><br><span class="line">      end: CardAlignments.middle,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: parent,</span><br><span class="line">        curve: Interval(<span class="number">0.4</span>, <span class="number">0.7</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">最后面卡片尺寸变换动画值</span></span></span><br><span class="line">  <span class="keyword">static</span> Animation&lt;Size&gt; backCardSizeAnimation(</span><br><span class="line">    AnimationController parent,</span><br><span class="line">    BoxConstraints constraints,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> SizeTween(</span><br><span class="line">      begin: CardSizes.back(constraints),</span><br><span class="line">      end: CardSizes.middle(constraints),</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: parent,</span><br><span class="line">        curve: Interval(<span class="number">0.4</span>, <span class="number">0.7</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用一个 <code>AnimationController</code> 控制动画运行，动画运行时在卡片上应用以上的动画值，否则使用卡片默认的位置和尺寸。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 卡片位置变换动画控制器</span></span><br><span class="line">  AnimationController _cardChangeController;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  前面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _frontCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断动画是否在运行</span></span><br><span class="line">    <span class="built_in">bool</span> forward = _cardChangeController.status == AnimationStatus.forward;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Transform.rotate 旋转卡片</span></span><br><span class="line">    Widget rotate = Transform.rotate(</span><br><span class="line">      angle: (pi / <span class="number">180.0</span>) * _frontCardRotation,</span><br><span class="line">      <span class="comment">// 使用 SizedBox 确定卡片尺寸</span></span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        size: CardSizes.front(constraints),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在动画运行时使用动画值</span></span><br><span class="line">    <span class="keyword">if</span> (forward) &#123;</span><br><span class="line">      <span class="keyword">return</span> Align(</span><br><span class="line">        alignment: CardAnimations.frontCardDisappearAnimation(</span><br><span class="line">          _cardChangeController,</span><br><span class="line">          _frontCardAlignment,</span><br><span class="line">        ).value,</span><br><span class="line">        child: rotate,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则使用默认值</span></span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: _frontCardAlignment,</span><br><span class="line">      child: rotate,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _middleCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断动画是否在运行</span></span><br><span class="line">    <span class="built_in">bool</span> forward = _cardChangeController.status == AnimationStatus.forward;</span><br><span class="line">    Widget child = Container(color: Colors.red);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在动画运行时使用动画值</span></span><br><span class="line">    <span class="keyword">if</span> (forward) &#123;</span><br><span class="line">      <span class="keyword">return</span> Align(</span><br><span class="line">        alignment: CardAnimations.middleCardAlignmentAnimation(</span><br><span class="line">          _cardChangeController,</span><br><span class="line">        ).value,</span><br><span class="line">        child: SizedBox.fromSize(</span><br><span class="line">          size: CardAnimations.middleCardSizeAnimation(</span><br><span class="line">            _cardChangeController,</span><br><span class="line">            constraints,</span><br><span class="line">          ).value,</span><br><span class="line">          child: child,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则使用默认值</span></span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: CardAlignments.middle,</span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        size: CardSizes.middle(constraints),</span><br><span class="line">        child: child,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _backCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断动画是否在运行</span></span><br><span class="line">    <span class="built_in">bool</span> forward = _cardChangeController.status == AnimationStatus.forward;</span><br><span class="line">    Widget child = Container(color: Colors.green);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在动画运行时使用动画值</span></span><br><span class="line">    <span class="keyword">if</span> (forward) &#123;</span><br><span class="line">      <span class="keyword">return</span> Align(</span><br><span class="line">        alignment: CardAnimations.backCardAlignmentAnimation(</span><br><span class="line">          _cardChangeController,</span><br><span class="line">        ).value,</span><br><span class="line">        child: SizedBox.fromSize(</span><br><span class="line">          size: CardAnimations.backCardSizeAnimation(</span><br><span class="line">            _cardChangeController,</span><br><span class="line">            constraints,</span><br><span class="line">          ).value,</span><br><span class="line">          child: child,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则使用默认值</span></span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: CardAlignments.back,</span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        size: CardSizes.back(constraints),</span><br><span class="line">        child: child,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改变位置的动画</span></span><br><span class="line">  <span class="keyword">void</span> _runChangeOrderAnimation() &#123;</span><br><span class="line">    _cardChangeController.reset();</span><br><span class="line">    _cardChangeController.forward();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化卡片换位动画控制器</span></span><br><span class="line">    _cardChangeController = AnimationController(</span><br><span class="line">      duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    )</span><br><span class="line">      ..addListener(() =&gt; setState(() &#123;&#125;))</span><br><span class="line">      ..addStatusListener((status) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status == AnimationStatus.completed) &#123;</span><br><span class="line">          <span class="comment">// 动画运行结束后重置位置和旋转</span></span><br><span class="line">          _frontCardRotation = <span class="number">0.0</span>;</span><br><span class="line">          _frontCardAlignment = CardAlignments.front;</span><br><span class="line">          setState(() &#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-tinder-card/foward.gif" width="260" style="width: 280px"><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><p>可以看到动画运行之后三张卡片都恢复了默认的位置和尺寸，而需要的效果是当卡片换位动画完成后三张卡片的数据会改变，所以还需要在动画之后进行数据处理。</p><p>创建一个数组保存全部子项目，使用一个索引更新最前面卡片的子项索引，在卡片换位动画结束后索引值加一。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; images = [</span><br><span class="line">  <span class="string">'https://gank.io/images/5ba77f3415b44f6c843af5e149443f94'</span>,</span><br><span class="line">  <span class="string">'https://gank.io/images/02eb8ca3297f4931ab64b7ebd7b5b89c'</span>,</span><br><span class="line">  <span class="string">'https://gank.io/images/31f92f7845f34f05bc10779a468c3c13'</span>,</span><br><span class="line">  <span class="string">'https://gank.io/images/b0f73f9527694f44b523ff059d8a8841'</span>,</span><br><span class="line">  <span class="string">'https://gank.io/images/1af9d69bc60242d7aa2e53125a4586ad'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成卡片数组</span></span><br><span class="line"><span class="built_in">List</span>&lt;Widget&gt; cards = <span class="built_in">List</span>.generate(</span><br><span class="line">  images.length,</span><br><span class="line">  (<span class="built_in">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        color: Colors.white,</span><br><span class="line">        borderRadius: BorderRadius.circular(<span class="number">16.0</span>),</span><br><span class="line">        boxShadow: [</span><br><span class="line">          BoxShadow(</span><br><span class="line">            offset: Offset(<span class="number">0</span>, <span class="number">17</span>),</span><br><span class="line">            blurRadius: <span class="number">23.0</span>,</span><br><span class="line">            spreadRadius: <span class="number">-13.0</span>,</span><br><span class="line">            color: Colors.black54,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      child: ClipRRect(</span><br><span class="line">        borderRadius: BorderRadius.circular(<span class="number">16.0</span>),</span><br><span class="line">        child: Image.network(</span><br><span class="line">          images[index],</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// 使用生成的卡片数组</span></span><br><span class="line">  runApp(MyApp(cards: cards));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; cards;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;<span class="meta">@required</span> <span class="keyword">this</span>.cards&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 卡片列表</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; _cards = [];</span><br><span class="line">  <span class="comment">// 最前面卡片的索引</span></span><br><span class="line">  <span class="built_in">int</span> _frontCardIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  前面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _frontCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断是否还有卡片</span></span><br><span class="line">    Widget card =</span><br><span class="line">        _frontCardIndex &lt; _cards.length ? _cards[_frontCardIndex] : Container();</span><br><span class="line">    <span class="built_in">bool</span> forward = _cardChangeController.status == AnimationStatus.forward;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Transform.rotate 旋转卡片</span></span><br><span class="line">    Widget rotate = Transform.rotate(</span><br><span class="line">      angle: (pi / <span class="number">180.0</span>) * _frontCardRotation,</span><br><span class="line">      <span class="comment">// 使用 SizedBox 确定卡片尺寸</span></span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        size: CardSizes.front(constraints),</span><br><span class="line">        <span class="comment">// 使用数组中的子项</span></span><br><span class="line">        child: card,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 省略...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _middleCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断是否还有两张卡片</span></span><br><span class="line">    Widget card = _frontCardIndex &lt; _cards.length - <span class="number">1</span></span><br><span class="line">        ? _cards[_frontCardIndex + <span class="number">1</span>]</span><br><span class="line">        : Container();</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _backCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断数组中是否还有三张卡片</span></span><br><span class="line">    Widget card = _frontCardIndex &lt; _cards.length - <span class="number">2</span></span><br><span class="line">        ? _cards[_frontCardIndex + <span class="number">2</span>]</span><br><span class="line">        : Container();</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 初始化卡片数组</span></span><br><span class="line">    _cards.addAll(widget.cards);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化卡片换位动画控制器</span></span><br><span class="line">    _cardChangeController = AnimationController(</span><br><span class="line">      duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    )</span><br><span class="line">      ..addListener(() =&gt; setState(() &#123;&#125;))</span><br><span class="line">      ..addStatusListener((status) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status == AnimationStatus.completed) &#123;</span><br><span class="line">          <span class="comment">// 动画结束后将最前面卡片的索引向前移动一位</span></span><br><span class="line">          _frontCardIndex++;</span><br><span class="line">          <span class="comment">// 动画运行结束后重置位置和旋转</span></span><br><span class="line">          _frontCardRotation = <span class="number">0.0</span>;</span><br><span class="line">          _frontCardAlignment = CardAlignments.front;</span><br><span class="line">          setState(() &#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Stack(</span><br><span class="line">  children: [</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用一个占满父元素的 GestureDetector 监听手指移动</span></span><br><span class="line">    <span class="comment">// 如果动画在运行中就不在响应手势</span></span><br><span class="line">    _cardChangeController.status != AnimationStatus.forward</span><br><span class="line">        ? SizedBox.expand(</span><br><span class="line">            child: GestureDetector(</span><br><span class="line">              <span class="comment">// 省略...</span></span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        : IgnorePointer(),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此整个布局就实现了 🎉</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个布局的关键点在于</p><ol><li>三张卡片的定位</li><li>监听手势更新最前面卡片的位置</li><li>卡片的换位动画和回弹动画</li></ol><p>作者已经封装了这个插件，地址是 <a href="https://pub.dev/packages/tcard" target="_blank" rel="noopener">https://pub.dev/packages/tcard</a> 欢迎使用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://api.flutter.dev/flutter/widgets/Stack-class.html" target="_blank" rel="noopener">Stack class</a></p><p><a href="https://github.com/Ivaskuu/tinder_cards" target="_blank" rel="noopener">tinder_cards</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天写了一个 Fluter 插件 tcard，用来实现类似于探探卡片的布局。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>最好的你</title>
    <link href="https://coldstone.fun/post/2020/06/17/leetcode-1014/"/>
    <id>https://coldstone.fun/post/2020/06/17/leetcode-1014/</id>
    <published>2020-06-17T06:19:00.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode 1014 最佳观光组合</p><a id="more"></a><p><a href="https://leetcode-cn.com/problems/best-sightseeing-pair/" target="_blank" rel="noopener">LeetCode 1014. 最佳观光组合</a></p><img src="./images/best_of_you.png" width="1106" style="width: 553px" alt="best_of_you">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LeetCode 1014 最佳观光组合&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码写诗" scheme="https://coldstone.fun/categories/%E4%BB%A3%E7%A0%81%E5%86%99%E8%AF%97/"/>
    
    
      <category term="leetcode" scheme="https://coldstone.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 绘制图表（二）饼状图🍪</title>
    <link href="https://coldstone.fun/post/2020/06/09/flutter-pie-chart/"/>
    <id>https://coldstone.fun/post/2020/06/09/flutter-pie-chart/</id>
    <published>2020-06-09T06:08:00.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解如何使用 Flutter 绘制饼状图</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接上文，本文讲解如何使用 Flutter 绘制饼状图，最终效果如图</p><img src="./images/flutter-pie-chart/pie.gif" width="524" style="width: 260px"><p><a href="https://dartpad.dartlang.org/b8a2b88647fa75df5d31445a93cb390f" target="_blank" rel="noopener">在线查看</a></p><h2 id="定义-PieChart-amp-PiePart"><a href="#定义-PieChart-amp-PiePart" class="headerlink" title="定义 PieChart &amp; PiePart"></a>定义 PieChart &amp; PiePart</h2><p>第一步定义 <code>PieChart</code> 和 <code>PiePart</code> 类。<code>PieChart</code> 是整个饼状图控件，有 <code>datas</code> 和 <code>legends</code> 两个属性，表示饼图的数据和每部分的标识。<br><code>PiePart</code> 表示饼图的一部分，有 <code>color</code>, <code>startAngle</code>, <code>sweepAngle</code> 三个属性，分别表示颜色，起始弧度值，占据圆形的弧度值。<code>PeiChartPainter</code> 类实现了具体的绘制方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PiePart</span> </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> sweepAngle;</span><br><span class="line">  <span class="keyword">final</span> Color color;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> startAngle;</span><br><span class="line"></span><br><span class="line">  PiePart(</span><br><span class="line">    <span class="keyword">this</span>.startAngle,</span><br><span class="line">    <span class="keyword">this</span>.sweepAngle,</span><br><span class="line">    <span class="keyword">this</span>.color,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PieChart</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; legends;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> PieChart(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.datas,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.legends,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _PieChartState createState() =&gt; _PieChartState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PieChartState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PieChart</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _total = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;PiePart&gt; _parts = &lt;PiePart&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          width: <span class="number">300</span>,</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          child: CustomPaint(</span><br><span class="line">            painter: PeiChartPainter(</span><br><span class="line">              total: _total,</span><br><span class="line">              parts: _parts,</span><br><span class="line">              datas: widget.datas,</span><br><span class="line">              legends: widget.legends</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeiChartPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> total;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;PiePart&gt; parts;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; legends;</span><br><span class="line"></span><br><span class="line">  PeiChartPainter(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.total,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.datas,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.parts,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.legends,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(PeiChartPainter oldDelegate) =&gt; <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制圆框"><a href="#绘制圆框" class="headerlink" title="绘制圆框"></a>绘制圆框</h2><p>先绘制图表的圆框，在 <code>PeiChartPainter</code> 上添加 <code>drawCircle</code> 方法，以圆的中心点和圆的半径绘制一个空心圆形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> drawCircle(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> sw = size.width;</span><br><span class="line">  <span class="keyword">final</span> sh = size.height;</span><br><span class="line">  <span class="comment">// 确定圆的半径</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> radius = math.min(sw, sh) / <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// 定义中心点</span></span><br><span class="line">  <span class="keyword">final</span> Offset center = Offset(sw / <span class="number">2</span>, sh / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义圆形的绘制属性</span></span><br><span class="line">  <span class="keyword">final</span> paint = Paint()</span><br><span class="line">    ..style = PaintingStyle.stroke</span><br><span class="line">    ..color = Colors.grey</span><br><span class="line">    ..strokeWidth = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 Canvas 的 drawCircle 绘制</span></span><br><span class="line">  canvas.drawCircle(center, radius, paint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  drawCircle(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-pie-chart/circle.png" width="520" style="width: 260px"><h2 id="绘制标识"><a href="#绘制标识" class="headerlink" title="绘制标识"></a>绘制标识</h2><p>这一步需要先在 <code>_PieChartState</code> 里面进行数据的初始化，然后绘制每个数据对应的标识，分以下几步进行</p><ol><li>计算出每个数据占总和的占比</li><li>根据占比计算数据占据圆的弧度值</li><li>根据之前数据占据圆形的弧度值计算出下一个数据的起始弧度值</li><li>根据计算出的起始弧度值和占据弧度值创建 <code>PiePart</code> 对象</li><li>使用 <code>PiePart</code> 对象绘制标识</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PieChartState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PieChart</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _total = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;PiePart&gt; _parts = &lt;PiePart&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas = widget.datas;</span><br><span class="line">    <span class="comment">// 计算出数据总和</span></span><br><span class="line">    _total = datas.reduce((a, b) =&gt; a + b);</span><br><span class="line">    <span class="comment">// 定义一个起始变量</span></span><br><span class="line">    <span class="built_in">double</span> startAngle = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> data = datas[i];</span><br><span class="line">      <span class="comment">// 计算出每个数据所占的弧度值</span></span><br><span class="line">      <span class="keyword">final</span> angle = (data / _total) * -math.pi * <span class="number">2</span>;</span><br><span class="line">      PiePart peiPart;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 下一个数据的起始弧度值等于之前的数据弧度值之和</span></span><br><span class="line">        <span class="built_in">double</span> lastSweepAngle = _parts[i - <span class="number">1</span>].sweepAngle;</span><br><span class="line">        startAngle += lastSweepAngle;</span><br><span class="line">        peiPart = PiePart(startAngle, angle, colors[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 第一个数据的起始弧度为 0.0</span></span><br><span class="line">        peiPart = PiePart(<span class="number">0.0</span>, angle, colors[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 添加到数组中</span></span><br><span class="line">      _parts.add(peiPart);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          width: <span class="number">300</span>,</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          child: CustomPaint(</span><br><span class="line">            <span class="comment">// 将数据传给 PeiChartPainter</span></span><br><span class="line">            painter: PeiChartPainter(</span><br><span class="line">              total: _total,</span><br><span class="line">              parts: _parts,</span><br><span class="line">              datas: widget.datas,</span><br><span class="line">              legends: widget.legends,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 PeiChartPainter 上添加 <code>drawLegends</code> 方法，在圆框的外围绘制每部分对应的标识。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> drawLegends(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> sw = size.width;</span><br><span class="line">  <span class="keyword">final</span> sh = size.height;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> radius = math.min(sw, sh) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> fontSize = <span class="number">12.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> PiePart <span class="keyword">part</span> = parts[i];</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> legend = legends[i];</span><br><span class="line">    <span class="comment">// 根据每部分的起始弧度加上自身弧度值的一半得到每部分的中间弧度值</span></span><br><span class="line">    <span class="keyword">final</span> radians = <span class="keyword">part</span>.startAngle + <span class="keyword">part</span>.sweepAngle / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 根据三角函数计算中出标识文字的 x 和 y 位置，需要加上宽和高的一半适配 Canvas 的坐标</span></span><br><span class="line">    <span class="built_in">double</span> x = math.cos(radians) * (radius + <span class="number">32</span>) + sw / <span class="number">2</span> - fontSize;</span><br><span class="line">    <span class="built_in">double</span> y = math.sin(radians) * (radius + <span class="number">32</span>) + sh / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">final</span> offset = Offset(x, y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 TextPainter 绘制文字标识</span></span><br><span class="line">    TextPainter(</span><br><span class="line">      textAlign: TextAlign.center,</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: legend,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          fontSize: fontSize,</span><br><span class="line">          color: Colors.black,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      textDirection: TextDirection.ltr,</span><br><span class="line">    )</span><br><span class="line">      ..layout(</span><br><span class="line">        minWidth: <span class="number">0</span>,</span><br><span class="line">        maxWidth: size.width,</span><br><span class="line">      )</span><br><span class="line">      ..paint(canvas, offset);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  drawCircle(canvas, size);</span><br><span class="line">  drawLegends(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-pie-chart/legend.png" width="520" style="width: 260px"><p>计算文字位置用到的的三角函数是</p><p><img src="./images/flutter-pie-chart/angle.png" alt="angle"></p><h2 id="绘制数据对应的弧形"><a href="#绘制数据对应的弧形" class="headerlink" title="绘制数据对应的弧形"></a>绘制数据对应的弧形</h2><p>在 <code>PeiChartPainter</code> 上添加 <code>drawParts</code> 方法，绘制每个数据对应的弧形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> drawParts(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> sw = size.width;</span><br><span class="line">  <span class="keyword">final</span> sh = size.height;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> fontSize = <span class="number">10.0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> radius = math.min(sw, sh) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">final</span> Offset center = Offset(sw / <span class="number">2</span>, sh / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建弧形依照的矩形</span></span><br><span class="line">  <span class="keyword">final</span> rect = Rect.fromCenter(</span><br><span class="line">    center: center,</span><br><span class="line">    width: radius * <span class="number">2</span>,</span><br><span class="line">    height: radius * <span class="number">2</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 设置绘制属性</span></span><br><span class="line">  <span class="keyword">final</span> paint = Paint()</span><br><span class="line">    ..strokeWidth = <span class="number">0.0</span></span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span></span><br><span class="line">    ..style = PaintingStyle.fill;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; parts.length; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> PiePart <span class="keyword">part</span> = parts[i];</span><br><span class="line">    <span class="comment">// 设置每部分的颜色</span></span><br><span class="line">    paint.color = <span class="keyword">part</span>.color;</span><br><span class="line">    <span class="comment">// 使用 drawArc 方法画出弧形，参数依次是依照的矩形，起始弧度值，占据的弧度值，是否从中心点绘制，绘制属性</span></span><br><span class="line">    canvas.drawArc(rect, <span class="keyword">part</span>.startAngle, <span class="keyword">part</span>.sweepAngle, <span class="keyword">true</span>, paint);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> data = datas[i];</span><br><span class="line">    <span class="comment">// 计算每部分占比</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> percent = (data / total * <span class="number">100</span>).toStringAsFixed(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> radians = <span class="keyword">part</span>.startAngle + <span class="keyword">part</span>.sweepAngle / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 使用三角函数计算文字位置</span></span><br><span class="line">    <span class="built_in">double</span> x = math.cos(radians) * radius / <span class="number">2</span> + sw / <span class="number">2</span> - fontSize * <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">double</span> y = math.sin(radians) * radius / <span class="number">2</span> + sh / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">final</span> Offset offset = Offset(x, y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 TextPainter 绘制文字标识</span></span><br><span class="line">    TextPainter(</span><br><span class="line">      textAlign: TextAlign.start,</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: <span class="string">'<span class="subst">$data</span> <span class="subst">$percent</span>%'</span>,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          fontSize: fontSize,</span><br><span class="line">          color: Colors.white,</span><br><span class="line">          fontWeight: FontWeight.bold,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      textDirection: TextDirection.ltr,</span><br><span class="line">    )</span><br><span class="line">      ..layout(</span><br><span class="line">        minWidth: <span class="number">0</span>,</span><br><span class="line">        maxWidth: size.width,</span><br><span class="line">      )</span><br><span class="line">      ..paint(canvas, offset);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  drawCircle(canvas, size);</span><br><span class="line">  drawLegends(canvas, size);</span><br><span class="line">  drawParts(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-pie-chart/part.png" width="520" style="width: 260px"><h2 id="添加动画"><a href="#添加动画" class="headerlink" title="添加动画"></a>添加动画</h2><p>最后给饼图添加一个数据不断增长的动画效果，在 <code>_PieChartState</code> 添加动画的控制器 <code>_controller</code> 和保存动画数据的 <code>_animateDatas</code> 数组。在 <code>initState</code> 中初始化动画控制器和填充 <code>_animateDatas</code> 数组。然后创建两个 <code>double</code> 类型的补间动画，将动画值传给 <code>PeiChartPainter</code> 使用即可。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PieChartState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PieChart</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _total = <span class="number">0.0</span>;</span><br><span class="line">  AnimationController _controller;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; _animateDatas = [];</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;PiePart&gt; _parts = &lt;PiePart&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 初始化动画控制器</span></span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">3000</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas = widget.datas;</span><br><span class="line">    <span class="comment">// 计算出数据总和</span></span><br><span class="line">    _total = datas.reduce((a, b) =&gt; a + b);</span><br><span class="line">    <span class="comment">// 设置一个起始变量</span></span><br><span class="line">    <span class="built_in">double</span> startAngle = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">      <span class="comment">// 填充动画数组</span></span><br><span class="line">      _animateDatas.add(<span class="number">0.0</span>);</span><br><span class="line">      <span class="keyword">final</span> data = datas[i];</span><br><span class="line">      <span class="comment">// 计算出每个数据所占的弧度值</span></span><br><span class="line">      <span class="keyword">final</span> angle = (data / _total) * -math.pi * <span class="number">2</span>;</span><br><span class="line">      PiePart peiPart;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 下一个数据的起始弧度值等于之前的弧度值相加</span></span><br><span class="line">        <span class="built_in">double</span> lastSweepAngle = _parts[i - <span class="number">1</span>].sweepAngle;</span><br><span class="line">        startAngle += lastSweepAngle;</span><br><span class="line">        peiPart = PiePart(startAngle, angle, colors[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 第一个数据的起始弧度为 0.0</span></span><br><span class="line">        peiPart = PiePart(<span class="number">0.0</span>, angle, colors[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 添加到数组中</span></span><br><span class="line">      _parts.add(peiPart);</span><br><span class="line"></span><br><span class="line">      CurvedAnimation curvedAnimation = CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Curves.ease,</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建弧形的补间动画</span></span><br><span class="line">      <span class="keyword">final</span> partTween = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.0</span>, end: peiPart.sweepAngle);</span><br><span class="line">      Animation&lt;<span class="built_in">double</span>&gt; animation = partTween.animate(curvedAnimation);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建文字的补间动画</span></span><br><span class="line">      <span class="keyword">final</span> percentTween = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.0</span>, end: data);</span><br><span class="line">      Animation&lt;<span class="built_in">double</span>&gt; percentAnimation =</span><br><span class="line">          percentTween.animate(curvedAnimation);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在动画启动后不断改变数据值</span></span><br><span class="line">      _controller.addListener(() &#123;</span><br><span class="line">        _parts[i].sweepAngle = animation.value;</span><br><span class="line">        _animateDatas[i] =</span><br><span class="line">            <span class="built_in">double</span>.parse(percentAnimation.value.toStringAsFixed(<span class="number">1</span>));</span><br><span class="line">        setState(() &#123;&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 开始动画</span></span><br><span class="line">      _controller.forward();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          width: <span class="number">300</span>,</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          child: CustomPaint(</span><br><span class="line">            <span class="comment">// 将数据传给 PeiChartPainter</span></span><br><span class="line">            painter: PeiChartPainter(</span><br><span class="line">              total: _total,</span><br><span class="line">              parts: _parts,</span><br><span class="line">              datas: _animateDatas,</span><br><span class="line">              legends: widget.legends,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        SizedBox(height: <span class="number">80</span>),</span><br><span class="line">        Container(</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            shape: BoxShape.circle,</span><br><span class="line">          ),</span><br><span class="line">          child: IconButton(</span><br><span class="line">            color: Colors.white,</span><br><span class="line">            icon: Icon(Icons.refresh),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              _controller.reset();</span><br><span class="line">              _controller.forward();</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此整个饼状图的绘制就完成了，传入数据即可使用 🎉🎉🎉</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PieChart(</span><br><span class="line">  datas: [<span class="number">60.0</span>, <span class="number">50.0</span>, <span class="number">40.0</span>, <span class="number">30.0</span>, <span class="number">90.0</span>],</span><br><span class="line">  legends: [<span class="string">'一月'</span>, <span class="string">'二月'</span>, <span class="string">'三月'</span>, <span class="string">'四月'</span>, <span class="string">'五月'</span>],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>完整代码地址：<a href="https://github.com/xrr2016/flutter-charts/blob/master/lib/charts/pie_chart.dart" target="_blank" rel="noopener">pie_chart.dart</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文说明了如何使用 Flutter 绘制一个饼状图，使用了一点三角函数，关键点在于计算出每个数据占据整个圆形的弧度值，以及数据的起始弧度值。<br>数值增长的动画效果使用一个 <code>AnimationController</code> 在开始动画后不断的更新绘制使用的数据，在将数据传递给 <code>PeiChartPainter</code> 使用即可实现。</p><h2 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h2><p>准备写一系列关于用 Flutter 画图表的文章，用来分享这方面的知识，这篇文章是这个系列的第二篇，预计 6 篇。</p><ol><li><a href="https://coldstone.fun/post/2020/05/31/flutter-bar-chart/">Flutter 绘制图表（一）柱状图📊</a></li><li><a href="https://coldstone.fun/post/2020/06/09/flutter-pie-chart/">Flutter 绘制图表（二）饼状图🍪</a>（本文）</li><li>Flutter 绘制图表（三）折线图📈</li><li>Flutter 绘制图表（四）雷达图🎯</li><li>Flutter 绘制图表（五）环状图🍩</li><li>Flutter 绘制图表（六）条形图📏</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲解如何使用 Flutter 绘制饼状图&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 绘制图表（一）柱状图📊</title>
    <link href="https://coldstone.fun/post/2020/05/31/flutter-bar-chart/"/>
    <id>https://coldstone.fun/post/2020/05/31/flutter-bar-chart/</id>
    <published>2020-05-31T14:00:00.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解如何使用 Flutter 绘制一个带有动画效果的柱状图表</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文讲解如何使用 <a href="https://flutter.dev/" target="_blank" rel="noopener">Flutter</a> （Google 开源的 UI 工具包，帮助开发者通过一套代码库高效构建多平台精美应用，支持移动、Web、桌面和嵌入式平台） 绘制一个带有动画效果的柱状图表，最终效果如下图。</p><img src="./images/flutter-bar-chart/bar-chart.gif" width="568" style="width: 260px"><p>要绘制这样的图表普通的 Widget 难以实现，这时就需要 <code>CustomPaint</code> 和 <code>CustomPainter</code> 出场了，它们类似于 Web 里面的 <code>&lt;canvas&gt;</code> 元素，<code>CustomPaint</code> 提供了一个绘制区域，而 <code>CustomPainter</code> 拥有具体的绘制方法。</p><h2 id="CustomPaint-是什么"><a href="#CustomPaint-是什么" class="headerlink" title="CustomPaint 是什么"></a>CustomPaint 是什么</h2><p><code>CustomPaint</code> 是用来提供画布的控件，它使用传入画笔 <code>painter</code> 在 <code>child</code> 控件后面绘制图形, ，<code>foregroundPainter</code> 画笔绘制在 <code>child</code> 控件之前。<code>size</code> 属性控制画布的大小，假如定义了子控件 <code>child</code>，那么画布的大小将由子控件的大小决定，<code>size</code> 属性被忽略。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPaint</span> <span class="keyword">extends</span> <span class="title">SingleChildRenderObjectWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> CustomPaint(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.painter,</span><br><span class="line">    <span class="keyword">this</span>.foregroundPainter,</span><br><span class="line">    <span class="keyword">this</span>.size = Size.zero,</span><br><span class="line">    <span class="keyword">this</span>.isComplex = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.willChange = <span class="keyword">false</span>,</span><br><span class="line">    Widget child,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>CustomPainter</code> 是实现绘制图形的控件，要在画布上绘制图形需要实现它的 <code>paint</code> 方法。<code>paint</code> 方法有两个参数，<code>Canvas canvas</code> 和 <code>Size size</code>。<code>Size</code> 对象表示画布的尺寸，<code>Canvas</code> 对象上是具体的绘制图形的方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPainter</span> <span class="keyword">extends</span> <span class="title">Listenable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(<span class="keyword">covariant</span> CustomPainter oldDelegate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Canvas canvas</code> 对象主要的绘制图形方法有</p><table><thead><tr><th align="left">方法名</th><th align="left">参数</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left"><code>drawColor</code></td><td align="left"><code>Color color</code>, <code>BlendMode blendMode</code></td><td align="left">绘制颜色到画布上</td></tr><tr><td align="left"><code>drawLine</code></td><td align="left"><code>Offset p1</code>, <code>Offset p2</code>, <code>Paint paint</code></td><td align="left">两点之间画线</td></tr><tr><td align="left"><code>drawPaint</code></td><td align="left"><code>Paint paint</code></td><td align="left">使用 [Paint] 填充画布</td></tr><tr><td align="left"><code>drawRect</code></td><td align="left"><code>Rect rect</code>, <code>Paint paint</code></td><td align="left">绘制矩形</td></tr><tr><td align="left"><code>drawRRect</code></td><td align="left"><code>RRect rrect</code>, <code>Paint paint</code></td><td align="left">绘制带圆角的矩形</td></tr><tr><td align="left"><code>drawOval</code></td><td align="left"><code>Rect rect</code>, <code>Paint paint</code></td><td align="left">绘制椭圆</td></tr><tr><td align="left"><code>drawCircle</code></td><td align="left"><code>Offset c</code>, <code>double radius</code>, <code>Paint paint</code></td><td align="left">绘制圆形</td></tr><tr><td align="left"><code>drawArc</code></td><td align="left"><code>Rect rect</code>, <code>double startAngle</code>, <code>double sweepAngle</code>, <code>bool useCenter</code>, <code>Paint paint</code></td><td align="left">绘制弧形</td></tr><tr><td align="left"><code>drawPath</code></td><td align="left"><code>Path path</code>, <code>Paint paint</code></td><td align="left">绘制路径</td></tr><tr><td align="left"><code>drawImage</code></td><td align="left"><code>Image image</code>, <code>Offset p</code>, <code>Paint paint</code></td><td align="left">绘制图像</td></tr><tr><td align="left"><code>drawPoints</code></td><td align="left"><code>PointMode pointMode</code>, <code>List&lt;Offset&gt; points</code>, <code>Paint paint</code></td><td align="left">绘制多个点</td></tr></tbody></table><p>要将图形绘制到画布上需要先创建一个继承至 <code>CustomPainter</code> 的自定义画笔，例如绘制一个矩形需要实现一个绘制矩形的画笔 <code>RectanglePainter</code>，然后在画布 <code>CustomPaint</code> 上应用它。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RectanglePainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// 定义一个矩形</span></span><br><span class="line">    <span class="keyword">final</span> Rect rect = Rect.fromLTWH(<span class="number">50.0</span>, <span class="number">50.0</span>, <span class="number">100.0</span>, <span class="number">100.0</span>);</span><br><span class="line">    <span class="comment">// 指定绘制的样式</span></span><br><span class="line">    <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">      ..color = Colors.orange</span><br><span class="line">      ..strokeWidth = <span class="number">4.0</span></span><br><span class="line">      ..style = PaintingStyle.stroke</span><br><span class="line">      ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 drawRect 绘制矩形</span></span><br><span class="line">    canvas.drawRect(rect, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(RectanglePainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: CustomPaint(</span><br><span class="line">        <span class="comment">// 使用 RectanglePainter 在画布上绘制</span></span><br><span class="line">        painter: RectanglePainter(),</span><br><span class="line">        child: Container(</span><br><span class="line">          width: <span class="number">300</span>,</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            border: Border.all(</span><br><span class="line">              width: <span class="number">1.0</span>,</span><br><span class="line">              color: Colors.grey[<span class="number">300</span>],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><img src="./images/flutter-bar-chart/rect.png" width="520" style="width: 260px"><h2 id="绘制柱状图表"><a href="#绘制柱状图表" class="headerlink" title="绘制柱状图表"></a>绘制柱状图表</h2><p>介绍完毕，下面开始绘制柱状图表，第一步创建 <code>BarChart</code> 控件代表柱状图，它有两个构造参数一个是 <code>data</code> 用来接收图表数据，以及 <code>xAxis</code> 表示图表横轴标识。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarChart</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; data;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; xAxis;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> BarChart(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.data,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.xAxis,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _BarChartState createState() =&gt; _BarChartState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BarChartState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BarChart</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: [</span><br><span class="line">        CustomPaint(</span><br><span class="line">          painter: BarChartPainter(</span><br><span class="line">            datas: widget.data,</span><br><span class="line">            xAxis: widget.xAxis,</span><br><span class="line">          ),</span><br><span class="line">          child: Container(width: <span class="number">300</span>, height: <span class="number">300</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个用来绘制的自定义画笔 <code>BarChartPainter</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarChartPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; xAxis;</span><br><span class="line"></span><br><span class="line">  BarChartPainter(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.xAxis,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.datas,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(BarChartPainter oldDelegate) =&gt; <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRebuildSemantics(BarChartPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绘制坐标轴"><a href="#绘制坐标轴" class="headerlink" title="绘制坐标轴"></a>绘制坐标轴</h3><p>在 <code>BarChartPainter</code> 上定义一个 <code>_drawAxis</code> 方法用于绘制横坐标轴，使用一个由左上，左下，右下三个点控制的 <code>Path</code> 路径绘制。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawAxis(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> sw = size.width;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> sh = size.height;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 Paint 定义路径的样式</span></span><br><span class="line">  <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">    ..color = Colors.black87</span><br><span class="line">    ..style = PaintingStyle.stroke</span><br><span class="line">    ..strokeWidth = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 Path 定义绘制的路径，从画布的左上角到左下角在到右下角</span></span><br><span class="line">  <span class="keyword">final</span> Path path = Path()</span><br><span class="line">    ..moveTo(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    ..lineTo(<span class="number">0</span>, sh)</span><br><span class="line">    ..lineTo(sw, sh);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 drawPath 方法绘制路径</span></span><br><span class="line">  canvas.drawPath(path, paint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  _drawAxis(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="./images/flutter-bar-chart/chart-axis.png" width="508" style="width: 260px" alt="chart-axis"><h3 id="绘制标识"><a href="#绘制标识" class="headerlink" title="绘制标识"></a>绘制标识</h3><p>在 <code>BarChartPainter</code> 上定义一个 <code>_drawLabels</code> 方法绘制纵轴标识。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawLabels(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> gap = <span class="number">50.0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> sh = size.height;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; yAxisLabels = [];</span><br><span class="line"></span><br><span class="line">  Paint paint = Paint()</span><br><span class="line">    ..color = Colors.black87</span><br><span class="line">    ..strokeWidth = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 50.0 为间隔绘制比传入数据多一个的标识</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= datas.length; i++) &#123;</span><br><span class="line">    yAxisLabels.add(gap * i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  yAxisLabels.asMap().forEach(</span><br><span class="line">    (index, label) &#123;</span><br><span class="line">      <span class="comment">// 标识的高度为画布高度减去标识的值</span></span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">double</span> top = sh - label;</span><br><span class="line">      <span class="keyword">final</span> rect = Rect.fromLTWH(<span class="number">0</span>, top, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">final</span> Offset textOffset = Offset(</span><br><span class="line">        <span class="number">0</span> - labelFontSize * <span class="number">3</span>,</span><br><span class="line">        top - labelFontSize / <span class="number">2</span>,</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 绘制 Y 轴右边的线条</span></span><br><span class="line">      canvas.drawRect(rect, paint);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 绘制文字需要用 `TextPainter`，最后调用 paint 方法绘制文字</span></span><br><span class="line">      TextPainter(</span><br><span class="line">        text: TextSpan(</span><br><span class="line">          text: label.toStringAsFixed(<span class="number">0</span>),</span><br><span class="line">          style: TextStyle(fontSize: labelFontSize, color: Colors.black87),</span><br><span class="line">        ),</span><br><span class="line">        textAlign: TextAlign.right,</span><br><span class="line">        textDirection: TextDirection.ltr,</span><br><span class="line">        textWidthBasis: TextWidthBasis.longestLine,</span><br><span class="line">      )</span><br><span class="line">        ..layout(minWidth: <span class="number">0</span>, maxWidth: <span class="number">24</span>)</span><br><span class="line">        ..paint(canvas, textOffset);</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  _drawAxis(canvas, size);</span><br><span class="line">  _drawLabels(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="./images/flutter-bar-chart/chart-yaxis.png" width="520" style="width: 260px" alt="chart-yaxis"><h3 id="绘制数据矩形"><a href="#绘制数据矩形" class="headerlink" title="绘制数据矩形"></a>绘制数据矩形</h3><p>然后定义一个 <code>_darwBars</code> 方法将具体矩形和横轴标识绘制出来。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;Color&gt; colors = [</span><br><span class="line">  Color(<span class="number">0xff8e43e7</span>),</span><br><span class="line">  Color(<span class="number">0xffff4f81</span>),</span><br><span class="line">  Color(<span class="number">0xff1cc7d0</span>),</span><br><span class="line">  Color(<span class="number">0xff00aeff</span>),</span><br><span class="line">  Color(<span class="number">0xff3369e7</span>),</span><br><span class="line">  Color(<span class="number">0xffb84592</span>),</span><br><span class="line">  Color(<span class="number">0xff2dde98</span>),</span><br><span class="line">  Color(<span class="number">0xffff6c5f</span>),</span><br><span class="line">  Color(<span class="number">0xff003666</span>),</span><br><span class="line">  Color(<span class="number">0xffffc168</span>),</span><br><span class="line">  Color(<span class="number">0xff050f2c</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _darwBars(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> sh = size.height;</span><br><span class="line">  <span class="keyword">final</span> paint = Paint()..style = PaintingStyle.fill;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 每个矩形使用预设的 colors 数组里面的颜色</span></span><br><span class="line">    paint.color = colors[i];</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> textFontSize = <span class="number">14.0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> data = datas[i];</span><br><span class="line">    <span class="comment">// 矩形的上边缘为画布高度减去数据值</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> top = sh - data;</span><br><span class="line">    <span class="comment">// 矩形的左边缘为当前索引值乘以矩形宽度加上矩形之间的间距</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> left = i * _barWidth + (i * _barGap) + _barGap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Rect.fromLTWH 方法创建要绘制的矩形</span></span><br><span class="line">    <span class="keyword">final</span> rect = Rect.fromLTWH(left, top, _barWidth, data);</span><br><span class="line">    <span class="comment">// 使用 drawRect 方法绘制矩形</span></span><br><span class="line">    canvas.drawRect(rect, paint);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> offset = Offset(</span><br><span class="line">      left + _barWidth / <span class="number">2</span> - textFontSize * <span class="number">1.2</span>,</span><br><span class="line">      top - textFontSize * <span class="number">2</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 使用 TextPainter 绘制矩形上放的数值</span></span><br><span class="line">    TextPainter(</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: data.toStringAsFixed(<span class="number">1</span>),</span><br><span class="line">        style: TextStyle(fontSize: textFontSize, color: paint.color),</span><br><span class="line">      ),</span><br><span class="line">      textAlign: TextAlign.center,</span><br><span class="line">      textDirection: TextDirection.ltr,</span><br><span class="line">    )</span><br><span class="line">      ..layout(</span><br><span class="line">        minWidth: <span class="number">0</span>,</span><br><span class="line">        maxWidth: textFontSize * data.toString().length,</span><br><span class="line">      )</span><br><span class="line">      ..paint(canvas, offset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> xData = xAxis[i];</span><br><span class="line">    <span class="keyword">final</span> xOffset = Offset(left + _barWidth / <span class="number">2</span> - textFontSize, sh + <span class="number">12</span>);</span><br><span class="line">    <span class="comment">// 绘制横轴标识</span></span><br><span class="line">    TextPainter(</span><br><span class="line">      textAlign: TextAlign.center,</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: <span class="string">'<span class="subst">$xData</span>'</span>,</span><br><span class="line">        style: TextStyle(fontSize: <span class="number">12</span>, color: Colors.black87),</span><br><span class="line">      ),</span><br><span class="line">      textDirection: TextDirection.ltr,</span><br><span class="line">    )</span><br><span class="line">      ..layout(</span><br><span class="line">        minWidth: <span class="number">0</span>,</span><br><span class="line">        maxWidth: size.width,</span><br><span class="line">      )</span><br><span class="line">      ..paint(canvas, xOffset);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  _drawAxis(canvas, size);</span><br><span class="line">  _drawLabels(canvas, size);</span><br><span class="line">  _darwBars(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="./images/flutter-bar-chart/chart-data.png" width="520" style="width: 260px" alt="chart-data"><h3 id="添加运动动画"><a href="#添加运动动画" class="headerlink" title="添加运动动画"></a>添加运动动画</h3><p>最后在 <code>_BarChartState</code> 里使用一个 <code>AnimationController</code> 创建柱状图运动的动画，关于动画方面的知识可以查阅 <a href="https://coldstone.fun/post/2020/04/26/flutter-animation-from-zero/">从零开始的 Flutter 动画</a> 这篇文章。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BarChartState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BarChart</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController _controller;</span><br><span class="line">  <span class="keyword">final</span> _animations = &lt;<span class="built_in">double</span>&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="built_in">double</span> begin = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas = widget.data;</span><br><span class="line">    <span class="comment">// 初始化动画控制器，并调用 forward 方法启动动画</span></span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">      duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">3000</span>),</span><br><span class="line">    )..forward();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">double</span> end = datas[i];</span><br><span class="line">      <span class="comment">// 使用一个补间值 Tween 创建每个矩形的动画值</span></span><br><span class="line">      <span class="keyword">final</span> Tween&lt;<span class="built_in">double</span>&gt; tween = Tween(begin: begin, end: end);</span><br><span class="line">      <span class="comment">// 初始化数组里面的值</span></span><br><span class="line">      _animations.add(begin);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建补间动画</span></span><br><span class="line">      Animation&lt;<span class="built_in">double</span>&gt; animation = tween.animate(</span><br><span class="line">        CurvedAnimation(</span><br><span class="line">          parent: _controller,</span><br><span class="line">          curve: Curves.ease,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">      _controller.addListener(() &#123;</span><br><span class="line">        <span class="comment">// 使用 setState 更新 _animations 数组里面的动画值</span></span><br><span class="line">        setState(() &#123;</span><br><span class="line">          _animations[i] = animation.value;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: [</span><br><span class="line">        CustomPaint(</span><br><span class="line">          <span class="comment">// 最后向 BarChartPainter 传入 _animations 数组，实现动画</span></span><br><span class="line">          painter: BarChartPainter(</span><br><span class="line">            datas: _animations,</span><br><span class="line">            xAxis: widget.xAxis,</span><br><span class="line">            animation: _controller,</span><br><span class="line">          ),</span><br><span class="line">          child: Container(width: <span class="number">300</span>, height: <span class="number">300</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此整个柱状图的绘制就完成了，传入数据即可使用 🎉🎉🎉</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BarChart(</span><br><span class="line">  data: [<span class="number">180.0</span>, <span class="number">98.0</span>, <span class="number">126.0</span>, <span class="number">64.0</span>, <span class="number">118.0</span>],</span><br><span class="line">  xAxis: [<span class="string">'一月'</span>, <span class="string">'二月'</span>, <span class="string">'三月'</span>, <span class="string">'四月'</span>, <span class="string">'五月'</span>],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>完整代码地址：<a href="https://github.com/xrr2016/flutter-charts/blob/master/lib/charts/bar_chart.dart" target="_blank" rel="noopener">bar_chart.dart</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文说明了什么是 <code>CustomPaint</code> 和 <code>CustomPainter</code>。以及如何使用它们绘制一个带有动画的柱状图表。</p><h2 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h2><p>准备写一系列关于用 Flutter 画图表的文章，用来分享这方面的知识，这篇文章是这个系列的开篇，预计一共会写 6 篇。</p><ol><li><a href="https://coldstone.fun/post/2020/05/31/flutter-bar-chart/">Flutter 绘制图表（一）柱状图📊</a>（本文）</li><li>Flutter 绘制图表（二）饼状图🍪</li><li>Flutter 绘制图表（三）折线图📈</li><li>Flutter 绘制图表（四）雷达图🎯</li><li>Flutter 绘制图表（五）环状图🍩</li><li>Flutter 绘制图表（六）条形图📏</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲解如何使用 Flutter 绘制一个带有动画效果的柱状图表&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>选择适合的 Flutter 动画控件</title>
    <link href="https://coldstone.fun/post/2020/05/07/flutter-animation-decision/"/>
    <id>https://coldstone.fun/post/2020/05/07/flutter-animation-decision/</id>
    <published>2020-05-07T02:04:58.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>如何在 Flutter 中选择合适的动画 Widget 中文翻译</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Flutter 团队推出了一个关于 <a href="https://www.youtube.com/watch?v=GXIJJkq_H8g" target="_blank" rel="noopener">如何在 Flutter 中选择合适的动画 Widget</a> 的视频以及配套的文章 <a href="https://medium.com/flutter/how-to-choose-which-flutter-animation-widget-is-right-for-you-79ecfb7e72b5" target="_blank" rel="noopener">How to Choose Which Flutter Animation Widget is Right for You?</a> 都挺有好的，所以将文中的选择图翻译出来。</p><h2 id="英文版"><a href="#英文版" class="headerlink" title="英文版"></a>英文版</h2><p><img src="./images/flutter-animation-decision/animation-decision-tree.png" alt="animation-decision-tree"></p><h2 id="中文版"><a href="#中文版" class="headerlink" title="中文版"></a>中文版</h2><p><img src="./images/flutter-animation-decision/animation-decision-tree-zh.png" alt="animation-decision-tree-zh"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://medium.com/flutter/how-to-choose-which-flutter-animation-widget-is-right-for-you-79ecfb7e72b5" target="_blank" rel="noopener">How to Choose Which Flutter Animation Widget is Right for You?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在 Flutter 中选择合适的动画 Widget 中文翻译&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Animation" scheme="https://coldstone.fun/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的 Flutter 动画</title>
    <link href="https://coldstone.fun/post/2020/04/26/flutter-animation-from-zero/"/>
    <id>https://coldstone.fun/post/2020/04/26/flutter-animation-from-zero/</id>
    <published>2020-04-26T12:00:00.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter 中的动画</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>动画本质是在一段时间内不断改变屏幕上显示的内容，从而产生<a href="https://zh.wikipedia.org/wiki/%E8%A6%96%E8%A6%BA%E6%9A%AB%E7%95%99" target="_blank" rel="noopener">视觉暂留</a>现象。</p><p>动画一般可分为两类：</p><p><strong>补间动画</strong>：补间动画是一种预先定义物体运动的起点和终点，物体的运动方式，运动时间，时间曲线，然后从起点过渡到终点的动画。</p><p><strong>基于物理的动画</strong>：基于物理的动画是一种模拟现实世界运动的动画，通过建立运动模型来实现。例如一个篮球🏀从高处落下，需要根据其下落高度，重力加速度，地面反弹力等影响因素来建立运动模型。</p><h2 id="Flutter-中的动画"><a href="#Flutter-中的动画" class="headerlink" title="Flutter 中的动画"></a>Flutter 中的动画</h2><p>Flutter 中有多种类型的动画，先从一个简单的例子开始，使用一个 <code>AnimatedContainer</code> 控件，然后设置动画时长 <code>duration</code>，最后调用 <code>setState</code> 方法改变需要变化的属性值，一个动画就创建了。</p><img src="./images/flutter-animation-from-zero/animated-container.gif" alt="animated-container" style="width: 240px;" width="240"><p>代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimatedContainerPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimatedContainerPageState createState() =&gt; _AnimatedContainerPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimatedContainerPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimatedContainerPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 初始的属性值</span></span><br><span class="line">  <span class="built_in">double</span> size = <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">double</span> raidus = <span class="number">25</span>;</span><br><span class="line">  Color color = Colors.yellow;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _animate() &#123;</span><br><span class="line">    <span class="comment">// 改变属性值</span></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      size = size == <span class="number">100</span> ? <span class="number">200</span> : <span class="number">100</span>;</span><br><span class="line">      raidus = raidus == <span class="number">25</span> ? <span class="number">100</span> : <span class="number">25</span>;</span><br><span class="line">      color = color == Colors.yellow ? Colors.greenAccent : Colors.yellow;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Animated Container'</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: [</span><br><span class="line">            <span class="comment">// 在 AnimatedContainer 上应用属性值</span></span><br><span class="line">            AnimatedContainer(</span><br><span class="line">              width: size,</span><br><span class="line">              height: size,</span><br><span class="line">              curve: Curves.easeIn,</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">              decoration: BoxDecoration(</span><br><span class="line">                color: color,</span><br><span class="line">                borderRadius: BorderRadius.circular(raidus),</span><br><span class="line">              ),</span><br><span class="line">              duration: <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">              child: FlutterLogo(),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _animate,</span><br><span class="line">        child: Icon(Icons.refresh),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个隐式动画，除此之外还有显式动画，Hreo 动画，交织动画。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>Flutter 动画是建立在以下的概念之上。</p><p><code>Animation</code></p><p>Flutter 中的动画系统基于 <code>Animation</code> 对象， 它是一个抽象类，保存了当前动画的值和状态（开始、暂停、前进、倒退），但不记录屏幕上显示的内容。UI 元素通过读取 <code>Animation</code> 对象的值和监听状态变化运行 <code>build</code> 函数，然后渲染到屏幕上形成动画效果。</p><p>一个 <code>Animation</code> 对象在一段时间内会持续生成介于两个值之间的值，比较常见的类型是 <code>Animation&lt;double&gt;</code>，除 <code>double</code> 类型之外还有 <code>Animation&lt;Color&gt;</code> 或者 <code>Animation&lt;Size&gt;</code> 等。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animation</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Listenable</span> <span class="keyword">implements</span> <span class="title">ValueListenable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AnimationController</code></p><p>带有控制方法的 <code>Animation</code> 对象，用来控制动画的启动，暂停，结束，设定动画运行时间等。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimationController</span> <span class="keyword">extends</span> <span class="title">Animation</span>&lt;<span class="title">double</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">with</span> <span class="title">AnimationEagerListenerMixin</span>, <span class="title">AnimationLocalListenersMixin</span>, <span class="title">AnimationLocalStatusListenersMixin</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AnimationController controller = AnimationController(</span><br><span class="line">  vsync: <span class="keyword">this</span>,</span><br><span class="line">  duration: <span class="built_in">Duration</span>(seconds: <span class="number">10</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>Tween</code></p><p>用来生成不同类型和范围的动画取值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tween</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">dynamic</span>&gt; <span class="keyword">extends</span> <span class="title">Animatable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  Tween(&#123; <span class="keyword">this</span>.begin, <span class="keyword">this</span>.end &#125;);</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// double 类型</span></span><br><span class="line">Tween&lt;<span class="built_in">double</span>&gt; tween = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">-200</span>, end: <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// color 类型</span></span><br><span class="line">ColorTween colorTween = ColorTween(begin: Colors.blue, end: Colors.yellow);</span><br><span class="line"></span><br><span class="line"><span class="comment">// border radius 类型</span></span><br><span class="line">BorderRadiusTween radiusTween = BorderRadiusTween(</span><br><span class="line">  begin: BorderRadius.circular(<span class="number">0.0</span>),</span><br><span class="line">  end: BorderRadius.circular(<span class="number">150.0</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>Curve</code></p><p>Flutter 动画的默认动画过程是匀速的，使用 <code>CurvedAnimation</code> 可以将时间曲线定义为非线性曲线。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurvedAnimation</span> <span class="keyword">extends</span> <span class="title">Animation</span>&lt;<span class="title">double</span>&gt; <span class="title">with</span> <span class="title">AnimationWithParentMixin</span>&lt;<span class="title">double</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animation animation = CurvedAnimation(parent: controller, curve: Curves.easeIn);</span><br></pre></td></tr></table></figure><p><code>Ticker</code></p><p><code>Ticker</code> 用来添加每次屏幕刷新的回调函数 <code>TickerCallback</code>，每次屏幕刷新都会调用。类似于 Web 里面的 <code>requestAnimationFrame</code> 方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticker</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ticker ticker = Ticker(callback);</span><br></pre></td></tr></table></figure><h2 id="隐式动画"><a href="#隐式动画" class="headerlink" title="隐式动画"></a>隐式动画</h2><p>隐式动画使用 Flutter 框架内置的动画部件创建，通过设置动画的起始值和最终值来触发。当使用 <code>setState</code> 方法改变部件的动画属性值时，框架会自动计算出一个从旧值过渡到新值的动画。</p><p>比如 <code>AnimatedOpacity</code> 部件，改变它的 <code>opacity</code> 值就可以触发动画。</p><img src="./images/flutter-animation-from-zero/opacity-toggle.gif" alt="opacity-toggle" style="width: 240px;" width="240"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpacityChangePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _OpacityChangePageState createState() =&gt; _OpacityChangePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_OpacityChangePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">OpacityChangePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _opacity = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改变目标值</span></span><br><span class="line">  <span class="keyword">void</span> _toggle() &#123;</span><br><span class="line">    _opacity = _opacity &gt; <span class="number">0</span> ? <span class="number">0.0</span> : <span class="number">1.0</span>;</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'隐式动画'</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedOpacity(</span><br><span class="line">          <span class="comment">// 传入目标值</span></span><br><span class="line">          opacity: _opacity,</span><br><span class="line">          duration: <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">          child: Container(</span><br><span class="line">            width: <span class="number">200</span>,</span><br><span class="line">            height: <span class="number">200</span>,</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _toggle,</span><br><span class="line">        child: Icon(Icons.play_arrow),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了 <code>AnimatedOpacity</code> 外，还有其他的内置隐式动画部件如：<code>AnimatedContainer</code>, <code>AnimatedPadding</code>, <code>AnimatedPositioned</code>, <code>AnimatedSwitcher</code>， <code>AnimatedAlign</code> 等。</p><h2 id="显式动画"><a href="#显式动画" class="headerlink" title="显式动画"></a>显式动画</h2><p>显式动画指的是需要手动设置动画的时间，运动曲线，取值范围的动画。将值传递给动画部件如: <code>RotationTransition</code>，最后使用一个<code>AnimationController</code> 控制动画的开始和结束。</p><img src="./images/flutter-animation-from-zero/explicit-animation.gif" alt="explicit-animation" style="width: 240px;" width="240"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RotationAinmationPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _RotationAinmationPageState createState() =&gt; _RotationAinmationPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RotationAinmationPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RotationAinmationPage</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController _controller;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _turns;</span><br><span class="line">  <span class="built_in">bool</span> _playing = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 控制动画运行状态</span></span><br><span class="line">  <span class="keyword">void</span> _toggle() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_playing) &#123;</span><br><span class="line">      _playing = <span class="keyword">false</span>;</span><br><span class="line">      _controller.stop();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _controller.forward()..whenComplete(() =&gt; _controller.reverse());</span><br><span class="line">      _playing = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 初始化动画控制器，设置动画时间</span></span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">      duration: <span class="built_in">Duration</span>(seconds: <span class="number">10</span>),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置动画取值范围和时间曲线</span></span><br><span class="line">    _turns = Tween(begin: <span class="number">0.0</span>, end: pi * <span class="number">2</span>).animate(</span><br><span class="line">      CurvedAnimation(parent: _controller, curve: Curves.easeIn),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _controller.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'显示动画'</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: RotationTransition(</span><br><span class="line">          <span class="comment">// 传入动画值</span></span><br><span class="line">          turns: _turns,</span><br><span class="line">          child: Container(</span><br><span class="line">            width: <span class="number">200</span>,</span><br><span class="line">            height: <span class="number">200</span>,</span><br><span class="line">            child: Image.asset(</span><br><span class="line">              <span class="string">'assets/images/fan.png'</span>,</span><br><span class="line">              fit: BoxFit.cover,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _toggle,</span><br><span class="line">        child: Icon(_playing ? Icons.pause : Icons.play_arrow),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了 <code>RotationTransition</code> 外，还有其他的显示动画部件如：<code>FadeTransition</code>, <code>ScaleTransition</code>, <code>SizeTransition</code>, <code>SlideTransition</code> 等。</p><h2 id="Hero-动画"><a href="#Hero-动画" class="headerlink" title="Hero 动画"></a>Hero 动画</h2><p>Hero 动画指的是在页面切换时一个元素从旧页面运动到新页面的动画。Hero 动画需要使用两个 <code>Hero</code> 控件实现：一个用来在旧页面中，另一个在新页面。两个 <code>Hero</code> 控件需要使用相同的 <code>tag</code> 属性，并且不能与其他<code>tag</code>重复。</p><img src="./images/flutter-animation-from-zero/hero-animation.gif" alt="hero-animation" style="width: 240px;" width="240"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面 1</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'hero_animation_page2.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> cake1 = <span class="string">'assets/images/cake01.jpg'</span>;</span><br><span class="line"><span class="built_in">String</span> cake2 = <span class="string">'assets/images/cake02.jpg'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroAnimationPage1</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  GestureDetector buildRowItem(context, <span class="built_in">String</span> image) &#123;</span><br><span class="line">    <span class="keyword">return</span> GestureDetector(</span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        <span class="comment">// 跳转到页面 2</span></span><br><span class="line">        Navigator.of(context).push(</span><br><span class="line">          MaterialPageRoute(builder: (ctx) &#123;</span><br><span class="line">            <span class="keyword">return</span> HeroAnimationPage2(image: image);</span><br><span class="line">          &#125;),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      child: Container(</span><br><span class="line">        width: <span class="number">100</span>,</span><br><span class="line">        height: <span class="number">100</span>,</span><br><span class="line">        child: Hero(</span><br><span class="line">          <span class="comment">// 设置 Hero 的 tag 属性</span></span><br><span class="line">          tag: image,</span><br><span class="line">          child: ClipOval(child: Image.asset(image)),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'页面 1'</span>)),</span><br><span class="line">      body: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          SizedBox(height: <span class="number">40.0</span>),</span><br><span class="line">          Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              buildRowItem(context, cake1),</span><br><span class="line">              buildRowItem(context, cake2),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面 2</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroAnimationPage2</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> image;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> HeroAnimationPage2(&#123;<span class="meta">@required</span> <span class="keyword">this</span>.image&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: CustomScrollView(</span><br><span class="line">        slivers: &lt;Widget&gt;[</span><br><span class="line">          SliverAppBar(</span><br><span class="line">            expandedHeight: <span class="number">400.0</span>,</span><br><span class="line">            title: Text(<span class="string">'页面 2'</span>),</span><br><span class="line">            backgroundColor: Colors.grey[<span class="number">200</span>],</span><br><span class="line">            flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">              collapseMode: CollapseMode.parallax,</span><br><span class="line">              background: Hero(</span><br><span class="line">                <span class="comment">// 使用从页面 1 传入的 tag 值</span></span><br><span class="line">                tag: image,</span><br><span class="line">                child: Container(</span><br><span class="line">                  decoration: BoxDecoration(</span><br><span class="line">                    image: DecorationImage(</span><br><span class="line">                      image: AssetImage(image),</span><br><span class="line">                      fit: BoxFit.cover,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          SliverList(</span><br><span class="line">            delegate: SliverChildListDelegate(</span><br><span class="line">              &lt;Widget&gt;[</span><br><span class="line">                Container(height: <span class="number">600.0</span>, color: Colors.grey[<span class="number">200</span>]),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交织动画"><a href="#交织动画" class="headerlink" title="交织动画"></a>交织动画</h2><p>交织动画是由一系列的小动画组成的动画。每个小动画可以是连续或间断的，也可以相互重叠。其关键点在于使用 <code>Interval</code> 部件给每个小动画设置一个时间间隔，以及为每个动画的设置一个取值范围 <code>Tween</code>，最后使用一个 <code>AnimationController</code> 控制总体的动画状态。</p><p><code>Interval</code> 继承至 <code>Curve</code> 类，通过设置属性 <code>begin</code> 和 <code>end</code> 来确定这个小动画的运行范围。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Interval</span> <span class="keyword">extends</span> <span class="title">Curve</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">动画起始点</span></span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> begin;</span><br><span class="line">  <span class="comment">/// <span class="markdown">动画结束点</span></span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> end;</span><br><span class="line">  <span class="comment">/// <span class="markdown">动画缓动曲线</span></span></span><br><span class="line">  <span class="keyword">final</span> Curve curve;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-animation-from-zero/staggered-animation.gif" alt="staggered-animation" style="width: 240px;" width="240"><p>这是一个由 5 个小动画组成的交织动画，宽度，高度，颜色，圆角，边框，每个动画都有自己的动画区间。</p><p><img src="./images/flutter-animation-from-zero/staggered-animation-timeline.png" alt="staggered-animation-timeline"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaggeredAnimationPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StaggeredAnimationPageState createState() =&gt; _StaggeredAnimationPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StaggeredAnimationPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StaggeredAnimationPage</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController _controller;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _width;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _height;</span><br><span class="line">  Animation&lt;Color&gt; _color;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _border;</span><br><span class="line">  Animation&lt;BorderRadius&gt; _borderRadius;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _play() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_controller.isCompleted) &#123;</span><br><span class="line">      _controller.reverse();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _controller.forward();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line"></span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">      duration: <span class="built_in">Duration</span>(seconds: <span class="number">5</span>),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _width = Tween&lt;<span class="built_in">double</span>&gt;(</span><br><span class="line">      begin: <span class="number">100</span>,</span><br><span class="line">      end: <span class="number">300</span>,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(</span><br><span class="line">          <span class="number">0.0</span>,</span><br><span class="line">          <span class="number">0.2</span>,</span><br><span class="line">          curve: Curves.ease,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _height = Tween&lt;<span class="built_in">double</span>&gt;(</span><br><span class="line">      begin: <span class="number">100</span>,</span><br><span class="line">      end: <span class="number">300</span>,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(</span><br><span class="line">          <span class="number">0.2</span>,</span><br><span class="line">          <span class="number">0.4</span>,</span><br><span class="line">          curve: Curves.ease,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _color = ColorTween(</span><br><span class="line">      begin: Colors.blue,</span><br><span class="line">      end: Colors.yellow,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(</span><br><span class="line">          <span class="number">0.4</span>,</span><br><span class="line">          <span class="number">0.6</span>,</span><br><span class="line">          curve: Curves.ease,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _borderRadius = BorderRadiusTween(</span><br><span class="line">      begin: BorderRadius.circular(<span class="number">0.0</span>),</span><br><span class="line">      end: BorderRadius.circular(<span class="number">150.0</span>),</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(</span><br><span class="line">          <span class="number">0.6</span>,</span><br><span class="line">          <span class="number">0.8</span>,</span><br><span class="line">          curve: Curves.ease,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _border = Tween&lt;<span class="built_in">double</span>&gt;(</span><br><span class="line">      begin: <span class="number">0</span>,</span><br><span class="line">      end: <span class="number">25</span>,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(<span class="number">0.8</span>, <span class="number">1.0</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'交织动画'</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedBuilder(</span><br><span class="line">          animation: _controller,</span><br><span class="line">          builder: (BuildContext context, Widget child) &#123;</span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              width: _width.value,</span><br><span class="line">              height: _height.value,</span><br><span class="line">              decoration: BoxDecoration(</span><br><span class="line">                color: _color.value,</span><br><span class="line">                borderRadius: _borderRadius.value,</span><br><span class="line">                border: Border.all(</span><br><span class="line">                  width: _border.value,</span><br><span class="line">                  color: Colors.orange,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _play,</span><br><span class="line">        child: Icon(Icons.refresh),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="物理动画"><a href="#物理动画" class="headerlink" title="物理动画"></a>物理动画</h2><p>物理动画是一种模拟现实世界物体运动的动画。需要建立物体的运动模型，以一个物体下落为例，这个运动受到物体的下落高度，重力加速度，地面的反作用力等因素的影响。</p><img src="./images/flutter-animation-from-zero/throw-animation.gif" alt="throw-animation" style="width: 240px;" width="240"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/scheduler.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThrowAnimationPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ThrowAnimationPageState createState() =&gt; _ThrowAnimationPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ThrowAnimationPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ThrowAnimationPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 球心高度</span></span><br><span class="line">  <span class="built_in">double</span> y = <span class="number">70.0</span>;</span><br><span class="line">  <span class="comment">// Y 轴速度</span></span><br><span class="line">  <span class="built_in">double</span> vy = <span class="number">-10.0</span>;</span><br><span class="line">  <span class="comment">// 重力</span></span><br><span class="line">  <span class="built_in">double</span> gravity = <span class="number">0.1</span>;</span><br><span class="line">  <span class="comment">// 地面反弹力</span></span><br><span class="line">  <span class="built_in">double</span> bounce = <span class="number">-0.5</span>;</span><br><span class="line">  <span class="comment">// 球的半径</span></span><br><span class="line">  <span class="built_in">double</span> radius = <span class="number">50.0</span>;</span><br><span class="line">  <span class="comment">// 地面高度</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> height = <span class="number">700</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下落方法</span></span><br><span class="line">  <span class="keyword">void</span> _fall(_) &#123;</span><br><span class="line">    y += vy;</span><br><span class="line">    vy += gravity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果球体接触到地面，根据地面反弹力改变球体的 Y 轴速度</span></span><br><span class="line">    <span class="keyword">if</span> (y + radius &gt; height) &#123;</span><br><span class="line">      y = height - radius;</span><br><span class="line">      vy *= bounce;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y - radius &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      y = <span class="number">0</span> + radius;</span><br><span class="line">      vy *= bounce;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 使用一个 Ticker 在每次更新界面时运行球体下落方法</span></span><br><span class="line">    Ticker(_fall)..start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">double</span> screenWidth = MediaQuery.of(context).size.width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'物理动画'</span>)),</span><br><span class="line">      body: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Container(</span><br><span class="line">            height: height,</span><br><span class="line">            child: Stack(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Positioned(</span><br><span class="line">                  top: y - radius,</span><br><span class="line">                  left: screenWidth / <span class="number">2</span> - radius,</span><br><span class="line">                  child: Container(</span><br><span class="line">                    width: radius * <span class="number">2</span>,</span><br><span class="line">                    height: radius * <span class="number">2</span>,</span><br><span class="line">                    decoration: BoxDecoration(</span><br><span class="line">                      color: Colors.blue,</span><br><span class="line">                      shape: BoxShape.circle,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          Expanded(child: Container(color: Colors.blue)),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了 Flutter 中多种类型的动画，分别是</p><ul><li>隐式动画</li><li>显式动画</li><li>Hero 动画</li><li>交织动画</li><li>基于物理的动画</li></ul><p>一个动画的主要因素有</p><ul><li><code>Animation</code> 动画对象</li><li><code>AnimationController</code> 动画控制器</li><li><code>Tween</code>     动画取值范围</li><li><code>Curve</code>     动画运动曲线</li></ul><p>Flutter 动画基于类型化的 <code>Animation</code> 对象，<code>Widgets</code> 通过读取动画对象的当前值和监听状态变化重新运行 <code>build</code> 函数，不断变化 UI 形成动画效果。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916" target="_blank" rel="noopener">Flutter animation basics with implicit animations</a></p><p><a href="https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7" target="_blank" rel="noopener">Directional animations with built-in explicit animations</a></p><p><a href="https://flutter.cn/docs/development/ui/animations" target="_blank" rel="noopener">动画效果介绍</a></p><p><a href="https://book.flutterchina.club/chapter9/intro.html" target="_blank" rel="noopener">Flutter动画简介</a></p><p><a href="https://flutter.cn/docs/development/ui/animations/tutorial" target="_blank" rel="noopener">在 Flutter 应用里实现动画效果</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flutter 中的动画&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Animation" scheme="https://coldstone.fun/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>在 Flutter 里使用 Stream</title>
    <link href="https://coldstone.fun/post/2020/04/13/flutter-stream/"/>
    <id>https://coldstone.fun/post/2020/04/13/flutter-stream/</id>
    <published>2020-04-13T04:07:56.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>在 Flutter 中有两种处理异步操作的方式 <code>Future</code> 和 <code>Stream</code>，<code>Future</code> 用于处理单个异步操作，<code>Stream</code> 用来处理连续的异步操作</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Flutter 中有两种处理异步操作的方式 <code>Future</code> 和 <code>Stream</code>，<code>Future</code> 用于处理单个异步操作，<code>Stream</code> 用来处理连续的异步操作。比如往水杯倒水，将一个水杯倒满为一个 <code>Future</code>，连续的将多个水杯倒满就是 <code>Stream</code>。</p><p><img src="./images/flutter-stream/water-fill.png" alt="water-fill"></p><h2 id="Stream-详解"><a href="#Stream-详解" class="headerlink" title="Stream 详解"></a>Stream 详解</h2><p><code>Stream</code> 是一个抽象类，用于表示一序列异步数据的源。它是一种产生连续事件的方式，可以生成数据事件或者错误事件，以及流结束时的完成事件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stream</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  Stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Stream</code> 分单订阅流和广播流。</p><p>单订阅流在发送完成事件之前只允许设置一个监听器，并且只有在流上设置监听器后才开始产生事件，取消监听器后将停止发送事件。即使取消了第一个监听器，也不允许在单订阅流上设置其他的监听器。广播流则允许设置多个监听器，也可以在取消上一个监听器后再次添加新的监听器。</p><p><code>Stream</code> 有同步流和异步流之分。</p><p>它们的区别在于同步流会在执行 <code>add</code>，<code>addError</code> 或 <code>close</code> 方法时立即向流的监听器 <code>StreamSubscription</code> 发送事件，而异步流总是在事件队列中的代码执行完成后在发送事件。</p><h2 id="Stream-家族"><a href="#Stream-家族" class="headerlink" title="Stream 家族"></a><code>Stream</code> 家族</h2><p><code>StreamController</code></p><p>带有控制流方法的流。 可以向它的流发送数据，错误和完成事件，也可以检查数据流是否已暂停，是否有监听器。<code>sync</code> 参数决定这个流是同步流还是异步流。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamController</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">StreamSink</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  Stream&lt;T&gt; <span class="keyword">get</span> stream;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StreamController _streamController = StreamController(</span><br><span class="line">  onCancel: () &#123;&#125;,</span><br><span class="line">  onListen: () &#123;&#125;,</span><br><span class="line">  onPause: () &#123;&#125;,</span><br><span class="line">  onResume: () &#123;&#125;,</span><br><span class="line">  <span class="keyword">sync</span>: <span class="keyword">false</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>StreamSink</code></p><p>流事件的入口。提供 <code>add</code>，<code>addError</code>，<code>addStream</code> 方法向流发送事件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamSink</span>&lt;<span class="title">S</span>&gt; <span class="keyword">implements</span> <span class="title">EventSink</span>&lt;<span class="title">S</span>&gt;, <span class="title">StreamConsumer</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line">  Future close();</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">  Future <span class="keyword">get</span> done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StreamSubscription</code></p><p>流的监听器。提供 <code>cacenl</code>、<code>pause</code>, <code>resume</code> 等方法管理。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamSubscription</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StreamSubscription subscription = StreamController().stream.listen(<span class="built_in">print</span>);</span><br><span class="line">subscription.onDone(() =&gt; <span class="built_in">print</span>(<span class="string">'done'</span>));</span><br></pre></td></tr></table></figure><p><code>StreamBuilder</code></p><p>使用流数据渲染 UI 界面的部件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">StreamBuilder(</span><br><span class="line">  <span class="comment">// 数据流</span></span><br><span class="line">  stream: stream,</span><br><span class="line">  <span class="comment">// 初始数据</span></span><br><span class="line">  initialData: <span class="string">'loading...'</span>,</span><br><span class="line">  builder: (context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">    <span class="comment">// AsyncSnapshot 对象为数据快照，缓存了当前数据和状态</span></span><br><span class="line">    <span class="comment">// snapshot.connectionState</span></span><br><span class="line">    <span class="comment">// snapshot.data</span></span><br><span class="line">    <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">      <span class="built_in">Map</span> data = snapshot.data;</span><br><span class="line">      <span class="keyword">return</span> Text(data),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="创建-Stream"><a href="#创建-Stream" class="headerlink" title="创建 Stream"></a>创建 Stream</h2><p>在 Dart 有几种方式创建 <code>Stream</code></p><ol><li>从现有的生成一个新的流 <code>Stream</code>，使用 <code>map</code>，<code>where</code>，<code>takeWhile</code> 等方法。</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整数流</span></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; intStream = StreamController&lt;<span class="built_in">int</span>&gt;().stream;</span><br><span class="line"><span class="comment">// 偶数流</span></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; evenStream = intStream.where((<span class="built_in">int</span> n) =&gt; n.isEven);</span><br><span class="line"><span class="comment">// 两倍流</span></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; doubleStream = intStream.map((<span class="built_in">int</span> n) =&gt; n * <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 数字大于 10 的流</span></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; biggerStream = intStream.takeWhile((<span class="built_in">int</span> n) =&gt; n &gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 <code>async*</code> 函数。</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;<span class="built_in">int</span>&gt; countStream(<span class="built_in">int</span> to) <span class="keyword">async</span>* &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= to; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream stream = countStream(<span class="number">10</span>);</span><br><span class="line">stream.listen(<span class="built_in">print</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 <code>StreamController</code>。</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StreamController&lt;<span class="built_in">Map</span>&gt; _streamController = StreamController(</span><br><span class="line">  onCancel: () &#123;&#125;,</span><br><span class="line">  onListen: () &#123;&#125;,</span><br><span class="line">  onPause: () &#123;&#125;,</span><br><span class="line">  onResume: () &#123;&#125;,</span><br><span class="line">  <span class="keyword">sync</span>: <span class="keyword">false</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Stream _stream = _streamController.stream;</span><br></pre></td></tr></table></figure><ol start="4"><li>使用 <code>Future</code> 对象生成</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">int</span>&gt; _delay(<span class="built_in">int</span> seconds) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(seconds: seconds));</span><br><span class="line">  <span class="keyword">return</span> seconds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span>&lt;Future&gt; futures = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  futures.add(_delay(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream _futuresStream = Stream.fromFutures(futures);</span><br></pre></td></tr></table></figure><h2 id="应用-Stream"><a href="#应用-Stream" class="headerlink" title="应用 Stream"></a>应用 Stream</h2><p><em>Stream Counter</em></p><p>把 Flutter 的默认项目改用 <code>Stream</code> 实现</p><img src="./images/flutter-stream/stream-counter.gif" width="320" style="width: 320px;"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamCounter</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StreamCounterState createState() =&gt; _StreamCounterState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StreamCounterState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StreamCounter</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个 StreamController</span></span><br><span class="line">  StreamController&lt;<span class="built_in">int</span>&gt; _counterStreamController = StreamController&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">    onCancel: () &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'cancel'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    onListen: () &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'listen'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line">  Stream _counterStream;</span><br><span class="line">  StreamSink _counterSink;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 StreamSink 向 Stream 发送事件，当 _counter 大于 9 时调用 close 方法关闭流。</span></span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_counter &gt; <span class="number">9</span>) &#123;</span><br><span class="line">      _counterSink.close();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _counter++;</span><br><span class="line">    _counterSink.add(_counter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主动关闭流</span></span><br><span class="line">  <span class="keyword">void</span> _closeStream() &#123;</span><br><span class="line">    _counterStreamController.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _counterSink = _counterStreamController.sink;</span><br><span class="line">    _counterStream = _counterStreamController.stream;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _counterSink.close();</span><br><span class="line">    _counterStreamController.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'Stream Counter'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(<span class="string">'You have pushed the button this many times:'</span>),</span><br><span class="line">            <span class="comment">// 使用 StreamBuilder 显示和更新 UI</span></span><br><span class="line">            StreamBuilder&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">              stream: _counterStream,</span><br><span class="line">              initialData: _counter,</span><br><span class="line">              builder: (context, snapshot) &#123;</span><br><span class="line">                <span class="keyword">if</span> (snapshot.connectionState == ConnectionState.done) &#123;</span><br><span class="line">                  <span class="keyword">return</span> Text(</span><br><span class="line">                    <span class="string">'Done'</span>,</span><br><span class="line">                    style: Theme.of(context).textTheme.bodyText2,</span><br><span class="line">                  );</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> number = snapshot.data;</span><br><span class="line">                <span class="keyword">return</span> Text(</span><br><span class="line">                  <span class="string">'<span class="subst">$number</span>'</span>,</span><br><span class="line">                  style: Theme.of(context).textTheme.bodyText2,</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          FloatingActionButton(</span><br><span class="line">            onPressed: _incrementCounter,</span><br><span class="line">            tooltip: <span class="string">'Increment'</span>,</span><br><span class="line">            child: Icon(Icons.add),</span><br><span class="line">          ),</span><br><span class="line">          SizedBox(width: <span class="number">24.0</span>),</span><br><span class="line">          FloatingActionButton(</span><br><span class="line">            onPressed: _closeStream,</span><br><span class="line">            tooltip: <span class="string">'Close'</span>,</span><br><span class="line">            child: Icon(Icons.close),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>NetWork Status</em></p><p>监听手机的网络链接状态，首先添加 <code>connectivity</code> 插件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">connectivity:</span> <span class="string">^0.4.8+2</span></span><br></pre></td></tr></table></figure><img src="./images/flutter-stream/network-status.gif" width="320" style="width: 320px;"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:connectivity/connectivity.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWorkStatus</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _NetWorkStatusState createState() =&gt; _NetWorkStatusState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_NetWorkStatusState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">NetWorkStatus</span>&gt; </span>&#123;</span><br><span class="line">  StreamController&lt;ConnectivityResult&gt; _streamController = StreamController();</span><br><span class="line">  StreamSink _streamSink;</span><br><span class="line">  Stream _stream;</span><br><span class="line">  <span class="built_in">String</span> _result;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _checkStatus() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> ConnectivityResult result = <span class="keyword">await</span> Connectivity().checkConnectivity();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == ConnectivityResult.mobile) &#123;</span><br><span class="line">      _result = <span class="string">'mobile'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == ConnectivityResult.wifi) &#123;</span><br><span class="line">      _result = <span class="string">'wifi'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == ConnectivityResult.none) &#123;</span><br><span class="line">      _result = <span class="string">'none'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _stream = _streamController.stream;</span><br><span class="line">    _streamSink = _streamController.sink;</span><br><span class="line">    _checkStatus();</span><br><span class="line">    Connectivity().onConnectivityChanged.listen(</span><br><span class="line">      (ConnectivityResult result) &#123;</span><br><span class="line">        _streamSink.add(result);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _streamSink.close();</span><br><span class="line">    _streamController.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'Network Status'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: StreamBuilder&lt;ConnectivityResult&gt;(</span><br><span class="line">          stream: _stream,</span><br><span class="line">          builder: (context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">            <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">              <span class="keyword">if</span> (snapshot.data == ConnectivityResult.mobile) &#123;</span><br><span class="line">                _result = <span class="string">'mobile'</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (snapshot.data == ConnectivityResult.wifi) &#123;</span><br><span class="line">                _result = <span class="string">'wifi'</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (snapshot.data == ConnectivityResult.none) &#123;</span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">'还没有链接网络'</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_result == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ResultText(_result);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultText</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> result;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ResultText(<span class="keyword">this</span>.result);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> RichText(</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        style: TextStyle(color: Colors.black),</span><br><span class="line">        text: <span class="string">'正在使用'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          TextSpan(</span><br><span class="line">            text: <span class="string">' <span class="subst">$result</span> '</span>,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">              color: Colors.red,</span><br><span class="line">              fontSize: <span class="number">20.0</span>,</span><br><span class="line">              fontWeight: FontWeight.bold,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          TextSpan(text: <span class="string">'链接网络'</span>),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Random Article</code></p><p>请求网络数据创建流</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">dio:</span> <span class="string">^3.0.9</span></span><br><span class="line">  <span class="attr">flutter_html:</span> <span class="string">^0.11.1</span></span><br></pre></td></tr></table></figure><img src="./images/flutter-stream/random-article.gif" width="320" style="width: 320px;"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:dio/dio.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_html/flutter_html.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomArticle</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _RandomArticleState createState() =&gt; _RandomArticleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RandomArticleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomArticle</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> Dio _dio = Dio(</span><br><span class="line">    BaseOptions(baseUrl: <span class="string">'https://interface.meiriyiwen.com'</span>),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">Map</span>&gt; _getArticle() <span class="keyword">async</span> &#123;</span><br><span class="line">    Response response = <span class="keyword">await</span> _dio.<span class="keyword">get</span>(</span><br><span class="line">      <span class="string">'/article/random'</span>,</span><br><span class="line">      queryParameters: &#123;<span class="string">"dev"</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> data = response.data[<span class="string">'data'</span>];</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Stream&lt;<span class="built_in">Map</span>&gt; _futuresStream;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Future&lt;<span class="built_in">Map</span>&gt;&gt; futures = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 添加 Future</span></span><br><span class="line">      futures.add(_getArticle());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 Stream</span></span><br><span class="line">    _futuresStream = Stream&lt;<span class="built_in">Map</span>&gt;.fromFutures(futures);</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Random Article'</span>)),</span><br><span class="line">      body: SingleChildScrollView(</span><br><span class="line">        child: Center(</span><br><span class="line">          child: StreamBuilder&lt;<span class="built_in">Map</span>&gt;(</span><br><span class="line">            stream: _futuresStream,</span><br><span class="line">            builder: (context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">                <span class="built_in">Map</span> article = snapshot.data;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> Container(</span><br><span class="line">                  child: Column(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      SizedBox(height: <span class="number">24.0</span>),</span><br><span class="line">                      Text(</span><br><span class="line">                        article[<span class="string">'title'</span>],</span><br><span class="line">                        style: TextStyle(fontSize: <span class="number">24.0</span>),</span><br><span class="line">                      ),</span><br><span class="line">                      Padding(</span><br><span class="line">                        padding: <span class="keyword">const</span> EdgeInsets.only(</span><br><span class="line">                          top: <span class="number">12.0</span>,</span><br><span class="line">                          left: <span class="number">12.0</span>,</span><br><span class="line">                          right: <span class="number">12.0</span>,</span><br><span class="line">                          bottom: <span class="number">60.0</span>,</span><br><span class="line">                        ),</span><br><span class="line">                        child: Html(</span><br><span class="line">                          data: article[<span class="string">'content'</span>],</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                );</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Broadcast Stream</code></p><p>使用广播流</p><img src="./images/flutter-stream/broadcast-stream.gif" width="320" style="width: 320px;"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BroadcastStream</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _BroadcastStreamState createState() =&gt; _BroadcastStreamState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BroadcastStreamState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BroadcastStream</span>&gt; </span>&#123;</span><br><span class="line">  StreamController&lt;<span class="built_in">int</span>&gt; _streamController = StreamController&lt;<span class="built_in">int</span>&gt;.broadcast();</span><br><span class="line">  StreamSubscription _subscription1;</span><br><span class="line">  StreamSubscription _subscription2;</span><br><span class="line">  StreamSubscription _subscription3;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> _s1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> _s2 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> _s3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    _subscription1 = _streamController.stream.listen((n) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _s1 += <span class="number">1</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    _subscription2 = _streamController.stream.listen((n) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _s2 += <span class="number">2</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    _subscription3 = _streamController.stream.listen((n) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _s3 -= <span class="number">1</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _add() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_count &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="comment">// 大于 10 时停止第一个订阅</span></span><br><span class="line">      _subscription1.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    _count++;</span><br><span class="line">    _streamController.add(_count);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _streamController.close();</span><br><span class="line">    _subscription1.cancel();</span><br><span class="line">    _subscription2.cancel();</span><br><span class="line">    _subscription3.cancel();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'Broadcast Stream'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        width: <span class="built_in">double</span>.infinity,</span><br><span class="line">        height: MediaQuery.of(context).size.height,</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">          children: [</span><br><span class="line">            Text(<span class="string">'Count: <span class="subst">$_count</span>'</span>),</span><br><span class="line">            SizedBox(height: <span class="number">12.0</span>),</span><br><span class="line">            Text(<span class="string">'S1: <span class="subst">$_s1</span>'</span>),</span><br><span class="line">            SizedBox(height: <span class="number">12.0</span>),</span><br><span class="line">            Text(<span class="string">'S2: <span class="subst">$_s2</span>'</span>),</span><br><span class="line">            SizedBox(height: <span class="number">12.0</span>),</span><br><span class="line">            Text(<span class="string">'S3: <span class="subst">$_s3</span>'</span>),</span><br><span class="line">            SizedBox(height: <span class="number">12.0</span>),</span><br><span class="line">            FloatingActionButton(</span><br><span class="line">              onPressed: _add,</span><br><span class="line">              child: Icon(Icons.plus_one),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Stream</code> 是处理异步编程的方式之一，它提供一个了异步的事件序列，并在你准备好接受时发送。在 Dart 中流分为同步流和异步流，以及单订阅流和广播流，有多种方式创建 <code>Stream</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://dart.cn/tutorials/language/streams" target="_blank" rel="noopener">异步编程：使用 stream</a></p><p><a href="https://dart.cn/articles/libraries/creating-streams" target="_blank" rel="noopener">在 Dart 里使用 Stream</a></p><p><a href="https://guoshuyu.cn/home/wx/Flutter-11.html" target="_blank" rel="noopener">全面深入理解Stream</a></p><p><a href="https://codingwithjoe.com/flutter-building-a-widget-with-streambuilder/" target="_blank" rel="noopener">Building a Widget with StreamBuilder</a></p><p><a href="https://youtu.be/MkKEWHfy99Y" target="_blank" rel="noopener">StreamBuilder (Flutter 本周小部件)</a></p><p><a href="https://youtu.be/nQBpOIHE4eE" target="_blank" rel="noopener">Dart Streams - 聚焦 Flutter</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Flutter 中有两种处理异步操作的方式 &lt;code&gt;Future&lt;/code&gt; 和 &lt;code&gt;Stream&lt;/code&gt;，&lt;code&gt;Future&lt;/code&gt; 用于处理单个异步操作，&lt;code&gt;Stream&lt;/code&gt; 用来处理连续的异步操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 是如何渲染的？</title>
    <link href="https://coldstone.fun/post/2020/04/03/how-flutter-render/"/>
    <id>https://coldstone.fun/post/2020/04/03/how-flutter-render/</id>
    <published>2020-04-03T04:40:04.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下关于 Flutter 渲染方面的知识</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 Flutter 开发移动端有一段时间了，总结一下关于 UI 渲染方面的知识。了解关于 Flutter 渲染方面的知识还是有必要的，可以帮助你开发更稳定，性能更高的应用。</p><p>要解答这个问题，首先需要认识到 Flutter 中有三棵树：<code>Widget</code> 树，<code>Element</code> 树和 <code>RenderObject</code> 树。</p><p>当应用启动时 Flutter 会遍历并创建所有的 <code>Widget</code> 形成 <code>Widget Tree</code>，同时与 <code>Widget Tree</code> 相对应，通过调用 <code>Widget</code> 上的 <code>createElement()</code> 方法创建每个 <code>Element</code> 对象，形成 <code>Element Tree</code>。</p><p>最后调用 <code>Element</code> 的 <code>createRenderObject()</code> 方法创建每个渲染对象，形成一个 <code>Render Tree</code>。</p><p>然后需要知道 <code>Widget</code>，<code>Element</code> 和 <code>RenderObject</code> 到底是啥以及它们是干什么的。</p><h2 id="什么是-Widget"><a href="#什么是-Widget" class="headerlink" title="什么是 Widget"></a>什么是 Widget</h2><p><code>Widget</code> 是 Flutter 的核心部分，是用户界面的不可变描述信息。正如 Flutter 的口号 <code>Everything’s a widget</code>, 用 Flutter 开发应用就是在写 <code>Widget</code> 🐶。</p><p>Flutter 的 <code>Widget</code> 不只表示 UI 控件，还表示一些功能性的组件，如路由跳转 <code>Navigator</code>，手势检测 <code>GestureDetector</code> 组件等。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@immutable</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> <span class="keyword">extends</span> <span class="title">DiagnosticableTree</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Initializes [key] for subclasses.</span></span></span><br><span class="line">  <span class="keyword">const</span> Widget(&#123; <span class="keyword">this</span>.key &#125;);</span><br><span class="line">  <span class="keyword">final</span> Key key;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="built_in">Element</span> createElement();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> canUpdate(Widget oldWidget, Widget newWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.runtimeType == newWidget.runtimeType</span><br><span class="line">      &amp;&amp; oldWidget.key == newWidget.key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Widget</code> 的 <code>canUpdate</code> 方法通过比较新部件和旧部件的 <code>runtimeType</code> 和 <code>key</code> 属性是否相同来决定更新部件对应的 <code>Element</code>。</p><h2 id="什么是-Element"><a href="#什么是-Element" class="headerlink" title="什么是 Element"></a>什么是 Element</h2><p><code>Element</code> 是实例化的 <code>Widget</code> 对象，通过 <code>Widget</code> 的 <code>createElement()</code> 方法，在特定位置使用 <code>Widget</code> 配置数据生成。</p><p><code>Element</code> 用于管理应用 UI 的更新和更改，管理部件的生命周期，每个 <code>Element</code> 都包含对 <code>Widget</code> 和 <code>RenderObject</code> 的引用。</p><p><img src="./images/how-flutter-render/relationship.png" alt="relationship"></p><p>当 <code>Widget</code> 变化时，如果两个 <code>Widget</code> 的 <code>runtimeType</code> 和 <code>key</code> 属性相同的，那么新的 <code>Element</code> 会通过 <code>Element.update()</code> 更新旧的 <code>Element</code>，否则旧的 <code>Element</code> 会被删除，新生成的 <code>Element</code> 插入到树中。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> <span class="keyword">extends</span> <span class="title">DiagnosticableTree</span> <span class="keyword">implements</span> <span class="title">BuildContext</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Creates an element that uses the given widget as its configuration.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">Typically called by an override of [Widget.createElement].</span></span></span><br><span class="line">  <span class="built_in">Element</span>(Widget widget)</span><br><span class="line">    : <span class="keyword">assert</span>(widget != <span class="keyword">null</span>),</span><br><span class="line">      _widget = widget;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Change the widget used to configure this element.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">The framework calls this function when the parent wishes to use a</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">different widget to configure this element. The new widget is guaranteed</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">to have the same [runtimeType] as the old widget.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">This function is called only during the "active" lifecycle state.</span></span></span><br><span class="line">  <span class="meta">@mustCallSuper</span></span><br><span class="line">  <span class="keyword">void</span> update(<span class="keyword">covariant</span> Widget newWidget) &#123;</span><br><span class="line">    <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Creates an instance of the [RenderObject] class that this</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">[RenderObjectWidget] represents, using the configuration described by this</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">[RenderObjectWidget].</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">This method should not do anything with the children of the render object.</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">That should instead be handled by the method that overrides</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">[RenderObjectElement.mount] in the object rendered by this object's</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">[createElement] method. See, for example,</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">[SingleChildRenderObjectElement.mount].</span></span></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  RenderObject createRenderObject(BuildContext context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是-RenderObject"><a href="#什么是-RenderObject" class="headerlink" title="什么是 RenderObject"></a>什么是 RenderObject</h2><p><code>RenderObject</code> 用于应用界面的布局和绘制，保存了元素的大小，布局等信息，实例化一个 <code>RenderObject</code> 是非常耗能的。</p><p>当应用运行时 Flutter 使用 <code>RenderObject</code> 的数据绘制应用界面，最终形成一个 <code>Render Tree</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RenderObject</span> <span class="keyword">extends</span> <span class="title">AbstractNode</span> <span class="title">with</span> <span class="title">DiagnosticableTreeMixin</span> <span class="keyword">implements</span> <span class="title">HitTestTarget</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Initializes internal fields for subclasses.</span></span></span><br><span class="line">  RenderObject() &#123;</span><br><span class="line">    _needsCompositing = isRepaintBoundary || alwaysNeedsCompositing;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">The render object at (or below) this location in the tree.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">If this object is a [RenderObjectElement], the render object is the one at</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">this location in the tree. Otherwise, this getter will walk down the tree</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">until it finds a [RenderObjectElement].</span></span></span><br><span class="line">  RenderObject <span class="keyword">get</span> renderObject &#123;</span><br><span class="line">    RenderObject result;</span><br><span class="line">    <span class="keyword">void</span> visit(<span class="built_in">Element</span> element) &#123;</span><br><span class="line">      <span class="keyword">assert</span>(result == <span class="keyword">null</span>); <span class="comment">// this verifies that there's only one child</span></span><br><span class="line">      <span class="keyword">if</span> (element <span class="keyword">is</span> RenderObjectElement)</span><br><span class="line">        result = element.renderObject;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        element.visitChildren(visit);</span><br><span class="line">    &#125;</span><br><span class="line">    visit(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> layout(Constraints constraints, &#123; <span class="built_in">bool</span> parentUsesSize = <span class="keyword">false</span> &#125;) &#123;</span><br><span class="line">    <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> paint(PaintingContext context, Offset offset) &#123;</span><br><span class="line">    <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么需要三棵树"><a href="#为什么需要三棵树" class="headerlink" title="为什么需要三棵树"></a>为什么需要三棵树</h2><p>使用三棵树的目的是尽可能复用 <code>Element</code>。</p><p>复用 <code>Element</code> 对性能非常重要，因为 <code>Element</code> 拥有两份关键数据：<code>Stateful widget</code> 的状态对象及底层的<br><code>RenderObject</code>。</p><p>当应用的结构很简单时，或许体现不出这种优势，一旦应用复杂起来，构成页面的元素越来越多，重新创建 3 棵树的代价是很高的，所以需要最小化更新操作。</p><p>当 Flutter 能够复用 <code>Element</code> 时，用户界面的逻辑状态信息是不变的，并且可以重用之前计算的布局信息，避免遍历整棵树。</p><h2 id="举个例子说明"><a href="#举个例子说明" class="headerlink" title="举个例子说明"></a>举个例子说明</h2><p>创建一个简单的 Flutter 应用，代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(</span><br><span class="line">    MaterialApp(</span><br><span class="line">      color: Colors.white,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      builder: (context, child) =&gt; HomePage(),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> _isWorld = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  Widget _buildWorld() &#123;</span><br><span class="line">    <span class="keyword">return</span> RichText(</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: <span class="string">'Hello world'</span>,</span><br><span class="line">        style: TextStyle(color: Colors.black),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildFlutter() &#123;</span><br><span class="line">    <span class="keyword">return</span> RichText(</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: <span class="string">'Hello flutter'</span>,</span><br><span class="line">        style: TextStyle(color: Colors.black),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> changeText() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _isWorld = !_isWorld;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Center(</span><br><span class="line">            child: _isWorld ? _buildWorld() : _buildFlutter(),</span><br><span class="line">          ),</span><br><span class="line">          SizedBox(height: <span class="number">20.0</span>),</span><br><span class="line">          <span class="comment">// Padding(padding: EdgeInsets.only(top: 20.0)),</span></span><br><span class="line">          IconButton(icon: Icon(Icons.refresh), onPressed: changeText)</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示效果</p><img src="./images/how-flutter-render/simulator-world.png" style="width: 320px;"><p>打开 <a href="http://127.0.0.1:9100" target="_blank" rel="noopener">Dart DevTools</a>，可以看到应用的 <code>Widget Tree</code>，此时 <code>RichText</code> 控件的 <code>RenderObject</code> 的 ID 是 <code>#6276a</code></p><p><img src="./images/how-flutter-render/world-id.png" alt="world-id"></p><p>点击图标将文字变成 <code>Hello flutter</code> 时</p><img src="./images/how-flutter-render/simulator-flutter.png" style="width: 320px;"><p>刷新浏览器页面再次查看 <code>RichText</code> 的 <code>RenderObject</code> 的 ID 依然是 <code>#6276a</code></p><p><img src="./images/how-flutter-render/flutter-id.png" alt="flutter-id"></p><p>可以发现 Flutter 只是更新了文字数据，复用了 <code>RichText</code> 对应的 <code>Element</code> 和 <code>RenderObject</code>。</p><p>而使用 <code>SizedBox</code> 部件取代 <code>Padding</code> 部件时。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    body: Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Center(</span><br><span class="line">          child: RichText(</span><br><span class="line">            text: TextSpan(</span><br><span class="line">              text: <span class="string">'Hello <span class="subst">$text</span>'</span>,</span><br><span class="line">              style: TextStyle(color: Colors.black),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        SizedBox(height: <span class="number">20.0</span>),</span><br><span class="line">        <span class="comment">// Padding(padding: EdgeInsets.only(top: 20.0)),</span></span><br><span class="line">        IconButton(icon: Icon(Icons.refresh), onPressed: changeText)</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./images/how-flutter-render/padding.png" alt="padding"></p><p><code>Padding</code> 部件对应的  <code>Element</code> 和 <code>RenderObject</code> 都会被从树中移除，使用 <code>SizedBox</code> 新生成的替代。</p><p><img src="./images/how-flutter-render/sizeedbox.png" alt="sizeedbox"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Widget</code> 是应用界面的声明信息。<br><code>Element</code> 链接 <code>Widget</code> 和 <code>RenderObject</code>，管理界面的更新和修改。<br><code>RenderObject</code> 保存具体的布局信息，负责绘制 UI。</p><p><img src="./images/how-flutter-render/widget-element-render-object.png" alt="widget-element-render-object"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://youtu.be/996ZgFRENMs" target="_blank" rel="noopener">How Flutter renders Widgets</a> (Video)</p><p><a href="https://medium.com/manabie/how-flutter-renders-widgets-fd6eca945a04" target="_blank" rel="noopener">How Flutter renders Widgets</a></p><p><a href="https://book.flutterchina.club/chapter14/flutter_ui_system.html" target="_blank" rel="noopener">Flutter UI系统</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下关于 Flutter 渲染方面的知识&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>PlantUML 类图及 Flowchart 流程图绘制入门</title>
    <link href="https://coldstone.fun/post/2020/03/26/learn-classchart-flowchart/"/>
    <id>https://coldstone.fun/post/2020/03/26/learn-classchart-flowchart/</id>
    <published>2020-03-26T02:00:00.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>学习 <code>PlantUML</code></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间设计后端表结构的时候接触了 <code>PlantUML</code>，它能够直观表现出类的属性和方法，反应出类与类之间的关系。之前有同事就是用 <code>PlantUML</code> 来做后端数据表设计工作的，所以有必要学习一下。</p><p>流程图 <code>Flowchart</code> 是用来展示操作过程或逻辑流程的一种图表，语法比较简单，方便易用，一些比较复杂的判断都可以使用一个流程图来直观表现。</p><h2 id="PlantUML"><a href="#PlantUML" class="headerlink" title="PlantUML"></a>PlantUML</h2><p><a href="https://plantuml.com/zh/" target="_blank" rel="noopener">PlantUML</a> 是一个开源项目，支持快速绘制时序图、用例图、类图、活动图、组件图、状态图、对象图、部署图等。同时还支持非 UML 图的甘特图、架构图等。</p><p><code>PlantUML</code> 有一些通用语法</p><ul><li>单行注释：以单引号 <code>&#39;</code> 开头的语句。</li><li>多行注释：以 <code>/&#39;</code> 和 <code>&#39;/</code> 作为注释的开始和结束。</li><li>页眉：使用 <code>header</code> 命令在生成的图中增加页眉，用 <code>center</code>, <code>left</code> 或 <code>right</code> 实现居中、左对齐和右对齐。</li><li>页脚：使用 <code>footer</code> 命令在生成的图中增加页眉，用 <code>center</code>, <code>left</code> 或 <code>right</code> 实现居中、左对齐和右对齐。</li><li>缩放：使用 <code>scale</code> 命令缩放生成的图像。</li><li>标题：使用 <code>title</code> 关键字添加标题。</li><li>图片标题：使用 <code>caption</code> 关键字在图像下放置一个标题.</li><li>图例说明: <code>legend</code> 和 <code>endlegend</code> 作为关键词，使用 <code>left</code>, <code>right</code>, <code>center</code> 为这个图例指定对齐方式。</li></ul><p>一个🌰 <a href="http://www.plantuml.com/plantuml/uml/FO_D2i8m48JlynHxAmZI8eBYGIhU12_Y2uHsRHVo8ytMvtVHj8V0DxERcQJDwYQTWqVkd6Swx9hD_jW0rOMonC4iBv6fIo5mLA2kGFGS9PDae_liLRomuRMiL3M0peWd6jdrFA7iBv9ZNmWgQXNB_AViidkhfBZQHGEF53ZHzaotsJgLJkJJXwtEys2XQu-ZOjWfX5TAzg8ryo_Hsin-_mK0" target="_blank" rel="noopener">查看</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">scale 720*480</span><br><span class="line"></span><br><span class="line">&#39;A single line comment</span><br><span class="line"></span><br><span class="line">&#x2F;&#39;</span><br><span class="line">  This is</span><br><span class="line">  Multilie</span><br><span class="line">  Comment</span><br><span class="line">&#39;&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">center header</span><br><span class="line">This is header</span><br><span class="line">endheader</span><br><span class="line"></span><br><span class="line">title This is title</span><br><span class="line"></span><br><span class="line">caption This is caption</span><br><span class="line"></span><br><span class="line">Romeo -&gt; Juliet : love</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">legend</span><br><span class="line">This is a legend</span><br><span class="line">endlegend</span><br><span class="line"></span><br><span class="line">footer This is footer</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><img style="width: 320px;" alt="base" src="http://www.plantuml.com/plantuml/png/HP3D2i8m48JlynHxAmZI8eBYGIhU12_Y2uHsRHVo8ytMvtUnFrwIRoQp6TWwgnjq31wvSPxfiAis-sC551VA4Zkpl4Ic9eN0KO6o0D6pbqoIZUwZL_72XjSvKfG06YCUg6VNseLvODKSsma15RMI9V1JDkxUAYckzgo1HmgSQ7kcssYjIYVowSC0F7VswR_9qUBOCI7mIacjVibC4hMzsGQ-"><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p>画类图需要了解类与类之间的几种不同的关系</p><table><thead><tr><th align="left">关系</th><th align="left">意思</th><th align="left">标记</th></tr></thead><tbody><tr><td align="left">Association 关系</td><td align="left">两个类之间有相互关系</td><td align="left"><code>&lt;--</code></td></tr><tr><td align="left">Inheritance 继承</td><td align="left">子类继承父类</td><td align="left"><code>&lt;|--</code></td></tr><tr><td align="left">Composition 组合</td><td align="left">两个类之间相互依赖</td><td align="left"><code>*--</code></td></tr><tr><td align="left">Aggregation 聚合</td><td align="left">一个类属于另一个类</td><td align="left"><code>o--</code></td></tr><tr><td align="left">Implementation 实现</td><td align="left">一个类实现另一个类的方法</td><td align="left"><code>&lt;|..</code></td></tr><tr><td align="left">Dependency 依赖</td><td align="left">一个类依赖于另一个类</td><td align="left"><code>&lt;..</code></td></tr></tbody></table><p><img src="https://miro.medium.com/max/1180/1*EUvDMA1vr0DiucONPzK9kA.png" alt="关系图"></p><p>设计一个博客系统😜 <a href="http://www.plantuml.com/plantuml/umla/XPBHwjCm58VlynJdSdDs3lL2YiZ4Hn2zh-t11TeKaenTw63Wc5CSSwB3JS4v54MXkn2nEFLfbgQ-XUiQszaXV-X5slFzlfoSj2samsKty8bm7H_XyfNMkKiNMyH59f531nqFETd5WrtyIKS3DNcXbqCrMQfehRzizVODGUOPYX3NTuI0srHG6NAuH-0E3ti2QtNIBwhNkQIkZrcr0TIpWJAPBPskx8IyU7L39f596uJabDqz4jmIU713mwIp9NC2jE5cpWBi7mjwd4eqszKgllg1SCCWG2R_o_IBfhs0icnJ2ppqiTIQ5kfbvKRk_AU27fMLnFdoXCTK9LsXeEp8W2U3g9mX-tGqsIn_cD_L-vPbJcK3wEYjVZfIivV9wqTglFgzU7T1_vYdlsR9_A7-l5BFdgIROHfztzzz-k2dUlpAI9hDuZfjqCy_9kDlQhhPRT-hqIAFbg1f-1JCrUIloBAk5N-G3KaSgsYTiydNQVfXRBn6ToPkx6raNZVm_m00" target="_blank" rel="noopener">点击查看</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">center header</span><br><span class="line">一个简单的博客系统</span><br><span class="line">endheader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Visitor &#123;</span><br><span class="line"> browse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Article &#123;</span><br><span class="line"> + id: int</span><br><span class="line"> + author: int</span><br><span class="line"> + content: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class User &#123;</span><br><span class="line">  +id: int</span><br><span class="line">  +name: String</span><br><span class="line"></span><br><span class="line">  - writeArticle(content: string)</span><br><span class="line">  - commentArticle(content: string)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Admin &#123;</span><br><span class="line"> - deleteArticle(id: int)</span><br><span class="line"> - deleteComment(id: int)</span><br><span class="line"> - editArticle(id: int, content: int)</span><br><span class="line"> - editComment(id: int, content: int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Comment &#123;</span><br><span class="line">  +id: int</span><br><span class="line">  +content: string</span><br><span class="line">  +author: int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User &lt;|-- Admin : 管理员有删除&#x2F;编辑文章和评论的能力</span><br><span class="line">User &lt;.. Article : 用户可以写文章</span><br><span class="line">User &lt;.. Comment : 用户可以写评论</span><br><span class="line">Article --&gt; Visitor : 游客可以浏览文章</span><br><span class="line">Comment --&gt; Visitor : 游客可以浏览评论</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="./images/learn-chart/class.png" alt="blog"></p><h2 id="Flowchart"><a href="#Flowchart" class="headerlink" title="Flowchart"></a>Flowchart</h2><p>流程图使用 <a href="http://flowchart.js.org/" target="_blank" rel="noopener">Flowchart</a> 绘制，语法比较简单。</p><p>定义一个流程图元素 <code>name=&gt;type: content:&gt;url</code></p><ul><li>name: 元素的名称</li><li>type：类型，包括如下类别：<ul><li>start</li><li>end</li><li>operation</li><li>subroutine</li><li>condition</li><li>inputoutput</li><li>parallel</li></ul></li><li>content：文本内容</li><li>url：连接</li></ul><p>示例如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 艰难的开始</span><br><span class="line">ge=&gt;end: 你成功了:&gt;https:<span class="comment">//www.zhihu.com/hot</span></span><br><span class="line">be=&gt;end: 你失败了:&gt;https:<span class="comment">//bbs.hupu.com/bxj</span></span><br><span class="line"></span><br><span class="line">skill=&gt;condition: 有技能吗</span><br><span class="line">money=&gt;condition: 有钱吗</span><br><span class="line">handsome=&gt;condition: 长得帅吗</span><br><span class="line"></span><br><span class="line">dream=&gt;operation: 做梦</span><br><span class="line">imp=&gt;operation: 努力提高自己</span><br><span class="line">work=&gt;operation: 工作/读书</span><br><span class="line">make=&gt;operation: 投资理财</span><br><span class="line">rich=&gt;operation: 找富婆</span><br><span class="line"></span><br><span class="line">st-&gt;skill</span><br><span class="line">skill(yes)-&gt;work-&gt;ge</span><br><span class="line">skill(no)-&gt;money</span><br><span class="line">money(yes)-&gt;make-&gt;ge</span><br><span class="line">money(no)-&gt;handsome</span><br><span class="line">handsome(yes)-&gt;rich-&gt;ge</span><br><span class="line">handsome(no)-&gt;be</span><br></pre></td></tr></table></figure><p><img src="./images/learn-chart/flow.png" alt="start"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://plantuml.com/zh/" target="_blank" rel="noopener">PlantUML</a></p><p><a href="https://github.com/adrai/flowchart.js" target="_blank" rel="noopener">Flowchart</a></p><p><a href="https://medium.com/@smagid_allThings/uml-class-diagrams-tutorial-step-by-step-520fd83b300b" target="_blank" rel="noopener">UML Class Diagrams Tutorial, Step by Step</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习 &lt;code&gt;PlantUML&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="https://coldstone.fun/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="PlantUML" scheme="https://coldstone.fun/tags/PlantUML/"/>
    
      <category term="Flowchart" scheme="https://coldstone.fun/tags/Flowchart/"/>
    
  </entry>
  
  <entry>
    <title>记录两个使用 Flutter 的 DropdownButton 问题</title>
    <link href="https://coldstone.fun/post/2020/03/24/flutter-dropdown-problem/"/>
    <id>https://coldstone.fun/post/2020/03/24/flutter-dropdown-problem/</id>
    <published>2020-03-24T08:08:27.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>记录两个关于 <code>DropdownButton</code> 的问题</p><a id="more"></a><p>这几天在使用 <code>Flutter</code> 开发应用过程中遇到关于 <code>DropdownButton</code> 两个问题，记录一下。</p><p>问题一：在 <code>showModalBottomSheet</code> 里面使用 <code>DropdownButton</code> 改变选择后界面不变化。</p><p><img src="./images/flutter-dropdown-problem/dropdown-no-change.gif" alt="no-change"></p><p>但是 <code>onChanged</code> 事件已经触发</p><p><img src="./images/flutter-dropdown-problem/console.png" alt="console"></p><p>代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> _type = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line">IconButton(</span><br><span class="line">  icon: Icon(Icons.filter_list),</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    showModalBottomSheet(</span><br><span class="line">      context: context,</span><br><span class="line">      builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Padding(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">12.0</span>),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    width: <span class="number">80.0</span>,</span><br><span class="line">                    child: Text(<span class="string">'类型: '</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  DropdownButton&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                    value: _type,</span><br><span class="line">                    onChanged: (<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        _type = newValue;</span><br><span class="line">                      &#125;);</span><br><span class="line">                      <span class="built_in">print</span>(newValue.toString());</span><br><span class="line">                    &#125;,</span><br><span class="line">                    items: [</span><br><span class="line">                      DropdownMenuItem&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                        value: <span class="number">0</span>,</span><br><span class="line">                        child: Text(<span class="string">'类型 1'</span>),</span><br><span class="line">                      ),</span><br><span class="line">                      DropdownMenuItem&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                        value: <span class="number">1</span>,</span><br><span class="line">                        child: Text(<span class="string">'类型 2'</span>),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>解决方法：添加一个 <code>StatefulBuilder</code> 部件在最外层即可</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">showModalBottomSheet(</span><br><span class="line">  context: context,</span><br><span class="line">  builder: (BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> StatefulBuilder(</span><br><span class="line">      builder: (context, StateSetter setState) &#123;</span><br><span class="line">        <span class="keyword">return</span> Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Padding(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">12.0</span>),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    width: <span class="number">80.0</span>,</span><br><span class="line">                    child: Text(<span class="string">'类型: '</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  DropdownButton&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                    value: _type,</span><br><span class="line">                    onChanged: (<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        _type = newValue;</span><br><span class="line">                      &#125;);</span><br><span class="line">                      <span class="built_in">print</span>(newValue.toString());</span><br><span class="line">                    &#125;,</span><br><span class="line">                    items: [</span><br><span class="line">                      DropdownMenuItem&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                        value: <span class="number">0</span>,</span><br><span class="line">                        child: Text(<span class="string">'类型 1'</span>),</span><br><span class="line">                      ),</span><br><span class="line">                      DropdownMenuItem&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                        value: <span class="number">1</span>,</span><br><span class="line">                        child: Text(<span class="string">'类型 2'</span>),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>问题二：当多个 <code>DropdownMenuItem</code> 值相同时会报错</p><p><img src="./images/flutter-dropdown-problem/crash.png" alt="crash"></p><p>这个报错产生的原因是这里的 <code>DropdownMenuItem</code> 是请求后端接口后会生成很多选项，如果设置了 <code>DropdownButton</code> 的 <code>value</code> 值，那么 <code>DropdownMenuItem</code> 就会有相同的值，出现这个错误。</p><p>解决方法：不设置 <code>DropdownButton</code> 的初始 <code>value</code> 值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DropdownButton&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">  <span class="comment">// value: 0,</span></span><br><span class="line">  onChanged: (<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  items: types.map(</span><br><span class="line">    (item) &#123;</span><br><span class="line">      <span class="keyword">return</span> DropdownMenuItem&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">        value: item[<span class="string">"value"</span>],</span><br><span class="line">        child: Text(item[<span class="string">"label"</span>]),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  ).toList(),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>ps：这两个问题卡了我两天😔</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录两个关于 &lt;code&gt;DropdownButton&lt;/code&gt; 的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法之二叉树</title>
    <link href="https://coldstone.fun/post/2020/03/15/das-tree/"/>
    <id>https://coldstone.fun/post/2020/03/15/das-tree/</id>
    <published>2020-03-15T03:05:00.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树是一种非线性的数据结构，以分层的方式存储数据。在二叉树上进行添加，查找和删除数据非常快。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二叉树是一种非线性的数据结构，以分层的方式存储数据。用于存储有层级关系的数据，如计算机文件，公司组织结构等数据。在二叉树上进行添加，查找和删除数据非常快。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>要实现树结构首先需要 <code>Node</code> 节点类，节点保存数据和它左右节点的链接，<code>show</code> 方法返回节点数据。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Node &#123;</span><br><span class="line">  data: <span class="built_in">number</span></span><br><span class="line">  left: Node = <span class="literal">null</span></span><br><span class="line">  right: Node = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">data: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现二叉树，首先需要向树中插入节点的方法，这个方法先创建一个节点，判断树是否有根节点，没有的话将新节点作为树的根节点，否则进行下一步；</p><ol><li>设当前节点为树的根节点，开始循环</li><li>如果插入节点的数据小于当前节点的数据，将新当前节点设为原当前节点的左节点，否则执行第 4 步</li><li>如果当前节点的左节点为 <code>null</code> ，就将新的节点插入这个位置，退出循环；否则执行下一次循环</li><li>将新当前节点设为原当前节点的右节点</li><li>如果当前节点的右节点为 <code>null</code> ，就将新的节点插入这个位置，退出循环；否则执行下一次循环</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BST &#123;</span><br><span class="line">  root: Node = <span class="literal">null</span></span><br><span class="line">  length: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入节点</span></span><br><span class="line">  insert(data: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="comment">// 先创建新的节点</span></span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> Node(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.root === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.root = node</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> originNode</span><br><span class="line">      <span class="comment">// 将当前节点设为树根节点</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.root</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 开始循环</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 保存原节点引用</span></span><br><span class="line">        originNode = currentNode</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  如果插入节点的数据小于当前节点的数据</span></span><br><span class="line">        <span class="keyword">if</span> (data &lt; currentNode.data) &#123;</span><br><span class="line">          <span class="comment">// 将新当前节点设为原当前节点的左节点</span></span><br><span class="line">          currentNode = currentNode.left</span><br><span class="line">          <span class="comment">// 如果当前节点的左节点为 `null` ，就将新的节点插入这个位置，退出循环；否则执行下一次循环</span></span><br><span class="line">          <span class="keyword">if</span> (currentNode === <span class="literal">null</span>) &#123;</span><br><span class="line">            originNode.left = node</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 将新当前节点设为原当前节点的右节点</span></span><br><span class="line">          currentNode = currentNode.right</span><br><span class="line">          <span class="comment">// 如果当前节点的右节点为 `null` ，就将新的节点插入这个位置，退出循环；否则执行下一次循环</span></span><br><span class="line">          <span class="keyword">if</span> (currentNode === <span class="literal">null</span>) &#123;</span><br><span class="line">            originNode.right = node</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历二叉树，中序，先序，后序</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 中序遍历</span></span><br><span class="line">inOrder(node: Node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.inOrder(node.left)</span><br><span class="line">    node.show()</span><br><span class="line">    <span class="keyword">this</span>.inOrder(node.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line">preOrder(node: Node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    node.show()</span><br><span class="line">    <span class="keyword">this</span>.preOrder(node.left)</span><br><span class="line">    <span class="keyword">this</span>.preOrder(node.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line">postOrder(node: Node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.postOrder(node.left)</span><br><span class="line">    <span class="keyword">this</span>.postOrder(node.right)</span><br><span class="line">    node.show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">find(data: number): Node &#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.root</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (currentNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode.data === data) &#123;</span><br><span class="line">      <span class="keyword">return</span> currentNode</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.data &gt; data) &#123;</span><br><span class="line">      currentNode = currentNode.left</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      currentNode = currentNode.right</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除节点</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">remove(data: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.root = <span class="keyword">this</span>.removeNode(<span class="keyword">this</span>.root, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">removeNode(node: Node, data: <span class="built_in">number</span>): Node &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (data === node.data) &#123;</span><br><span class="line">    <span class="comment">// 没有子节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有左子节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> node.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有右子节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> node.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有左右两个节点</span></span><br><span class="line">    <span class="keyword">const</span> tempNode = <span class="keyword">this</span>.min(node.right)</span><br><span class="line">    node.data = tempNode.data</span><br><span class="line">    node.right = <span class="keyword">this</span>.removeNode(node.right, tempNode.data)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.data &gt; data) &#123;</span><br><span class="line">    node.left = <span class="keyword">this</span>.removeNode(node.left, data)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    node.right = <span class="keyword">this</span>.removeNode(node.right, data)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最大值，最小值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最小值节点</span></span><br><span class="line">min(node: Node = <span class="keyword">this</span>.root): Node &#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = node</span><br><span class="line">  <span class="keyword">while</span> (currentNode.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">    currentNode = currentNode.left</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> currentNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大值节点</span></span><br><span class="line">max(node: Node = <span class="keyword">this</span>.root): Node &#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = node</span><br><span class="line">  <span class="keyword">while</span> (currentNode.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">    currentNode = currentNode.right</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> currentNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><code>BST</code> 可以用来记录一组数据中数据出现的次数，首先在 <code>Node</code> 类上添加 <code>count</code> 属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Node &#123;</span><br><span class="line">  data: <span class="built_in">number</span></span><br><span class="line">  left: Node = <span class="literal">null</span></span><br><span class="line">  right: Node = <span class="literal">null</span></span><br><span class="line">  count: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">data: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>BST</code> 类上添加 <code>update</code> 方法，当插入数据为新值时使用 <code>insert</code> 方法，当插入已经存在的值时使用 <code>update</code> 方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">update(data: <span class="built_in">number</span>): Node &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">this</span>.find(data)</span><br><span class="line">  <span class="keyword">if</span>(node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    node.count++</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;node.data&#125;</span>: `</span>, node.count)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bst = <span class="keyword">new</span> BST();</span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; array.length; index++) &#123;</span><br><span class="line">    <span class="keyword">const</span> num = array[index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bst.find(num) !== <span class="literal">null</span>) &#123;</span><br><span class="line">        bst.update(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bst.insert(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3:  1</span></span><br><span class="line"><span class="comment">// 2:  1</span></span><br><span class="line"><span class="comment">// 5:  1</span></span><br><span class="line"><span class="comment">// 4:  1</span></span><br><span class="line"><span class="comment">// 2:  2</span></span><br><span class="line"><span class="comment">// 5:  2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树是一种非线性的数据结构，以分层的方式存储数据。在二叉树上进行添加，查找和删除数据非常快。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DSA" scheme="https://coldstone.fun/tags/DSA/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Gitlib 持续发布 Flutter 应用</title>
    <link href="https://coldstone.fun/post/2020/02/27/flutter-gitlab-pineline/"/>
    <id>https://coldstone.fun/post/2020/02/27/flutter-gitlab-pineline/</id>
    <published>2020-02-27T03:01:00.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用 Gitlib CI/CD 构建发布 Flutter 应用</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://coldstone.fun/post/2020/02/26/flutter-github-actions/">前一篇文章</a>介绍了使用 Github Actions 持续发布 Flutter 应用，本文分享下如何使用 Gitlib 的 CI/CD 功能同样实现发布 Flutter 应用，因为有很多公司是用自己搭建的 Gitlab 来管理代码的。</p><p>要使用 Gitlib 的 CI/CD 功能首先需要在项目根目录创建一个 yml 格式的配置文件 <code>.gitlab-ci.yml</code>，这个配置文件会定义一个流水线 Pipeline。一个 Pipeline 由多个任务 Job 组成，任务就是具体要做的事情，如代码编译或测试； Pipeline 里的 stages 决定了任务何时以及如何运行。以下就是一个 Pipeline 有 3 个 stage，依次执行 build，test 和 deploy 任务。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job01:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">echo</span> <span class="string">'build job'</span></span><br><span class="line"><span class="attr">job02:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">echo</span> <span class="string">'test job'</span></span><br><span class="line"><span class="attr">job03:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">echo</span> <span class="string">'deploy job'</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>要在 Pipeline 里构建打包 Flutter 应用的 apk，首先需要在流水线里配置 Android 以及 Flutter 环境，搜索一番后发现了一个 Github 上的 Flutter 镜像 <a href="https://github.com/cirruslabs/docker-images-flutter" target="_blank" rel="noopener">docker-images-flutter</a> 很适合，看这个镜像的 <a href="https://github.com/cirruslabs/docker-images-flutter/blob/master/sdk/Dockerfile" target="_blank" rel="noopener">Dockerfile</a> 可以发现它是从 <code>cirrusci/android-sdk:29</code> 这个 Android sdk 镜像开始，然后下载 Flutter SDK，这样就有了了 Android 和 Flutter 环境，接下来只需要运行测试和打包命令即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">build</span> <span class="string">阶段使用拥有</span> <span class="string">Android</span> <span class="string">以及</span> <span class="string">Flutter</span> <span class="string">环境的镜像，进行测试打包</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">cirrusci/flutter:stable</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="string">//</span> <span class="string">下载依赖包</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">packages</span> <span class="string">get</span></span><br><span class="line">    <span class="string">//</span> <span class="string">执行测试</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">test</span></span><br><span class="line">    <span class="string">//</span> <span class="string">打包</span> <span class="string">apk</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">build</span> <span class="string">apk</span> <span class="string">--release</span></span><br><span class="line">  <span class="string">//</span> <span class="string">这里定义任务生成的文件</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">1</span> <span class="string">hour</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">build/app/outputs/apk/release/*.apk</span></span><br><span class="line">  <span class="attr">interruptible:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>要发布 apk 文件到仓库的 release 还需要使用 <a href="https://github.com/inetprocess/gitlab-release" target="_blank" rel="noopener">gitlab-release</a> 这个镜像进行发布操作</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">build</span> <span class="string">阶段使用拥有</span> <span class="string">Android</span> <span class="string">以及</span> <span class="string">Flutter</span> <span class="string">环境的镜像，进行测试打包</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">cirrusci/flutter:stable</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">packages</span> <span class="string">get</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">test</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">build</span> <span class="string">apk</span> <span class="string">--release</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">1</span> <span class="string">hour</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">build/app/outputs/apk/release/*.apk</span></span><br><span class="line">  <span class="attr">interruptible:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">发布到仓库的</span> <span class="string">release</span></span><br><span class="line"><span class="attr">release:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">inetprocess/gitlab-release</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">release</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="string">//</span> <span class="string">使用打包好的</span> <span class="string">apk</span> <span class="string">文件路径</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gitlab-release</span> <span class="string">--message</span> <span class="string">'自动发布'</span> <span class="string">build/app/outputs/apk/release/*.apk</span></span><br></pre></td></tr></table></figure><p>发布还需要一个 <code>Personal Access Token</code> 给 release 任务提供 api 权限，有了 api 权限就可以请求 Gitlab 的 release 接口上传 apk 了</p><p><img src="./images/gitlib-token.jpg" alt="token"></p><p>使用刚才创建的 token 在项目仓库里配置流水线的环境变量 <code>GITLAB_ACCESS_TOKEN</code></p><p><img src="./images/gitlab-variable.jpg" alt="var"></p><p>最后创建一个版本标签推送到 Gitlab 仓库，就可以看到运行中的流水线了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0.0</span><br><span class="line"></span><br><span class="line">git push --tag</span><br></pre></td></tr></table></figure><p><img src="./images/gitlib-pineline.jpg" alt="var"></p><p>流水线运行完毕，一个版本发布成功。</p><p><img src="./images/gitlib-release.jpg" alt="var"></p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p><a href="https://www.pgyer.com/" target="_blank" rel="noopener">蒲公英</a> 平台可以对应用进行内测分发，使用蒲公英提供的上传应用包的接口，将 <code>CI/CD</code> 构建出来的应用 <code>apk</code> 直接上传，免去手动去网页上上传的麻烦</p><p>添加一个 <code>upload</code> 任务，依赖于 <code>build</code> 任务，向蒲公英的上传接口发送一个请求，<code>$APK_PATH</code> 是应用打包出来的路径，定义为一个变量方便使用;</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">upload</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="attr">upload:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">upload</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">curl</span> <span class="string">-S</span> <span class="string">"http://www.pgyer.com/apiv2/app/upload"</span> <span class="string">-F</span> <span class="string">"file=@$APK_PATH"</span> <span class="string">-F</span> <span class="string">"_api_key=$PGY_API_KEY"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">uploaded</span></span><br></pre></td></tr></table></figure><p><code>$PGY_API_KEY</code> 是蒲公英平台的 <code>API Key</code>，需要添加到 <code>CI/CD</code> 的环境变量中</p><p><img src="./images/pgy-api-key.png" alt="api-key"></p><p>在仓库的设置那里添加新的环境变量</p><p><img src="./images/gitlab-pgy-variable.png" alt="variable"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>添加流水线配置 <code>.gitlab-ci.yml</code></li><li>创建 <code>Personal Access Token</code></li><li>设置环境变量 <code>GITLAB_ACCESS_TOKEN</code></li><li>推送版本标签</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/inetprocess/gitlab-release" target="_blank" rel="noopener">Gitlab Release</a></p><p><a href="https://docs.gitlab.com/ee/ci/quick_start/README.html" target="_blank" rel="noopener">Getting started with GitLab CI/CD</a></p><p><a href="https://www.pgyer.com/doc/view/travis_android" target="_blank" rel="noopener">使用 Travis CI 实现持续集成 (Android)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何使用 Gitlib CI/CD 构建发布 Flutter 应用&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Gitlib" scheme="https://coldstone.fun/tags/Gitlib/"/>
    
  </entry>
  
  <entry>
    <title>使用 Github Actions 持续发布 Flutter 应用</title>
    <link href="https://coldstone.fun/post/2020/02/26/flutter-github-actions/"/>
    <id>https://coldstone.fun/post/2020/02/26/flutter-github-actions/</id>
    <published>2020-02-26T17:59:06.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解如何使用 Github Actions 构建并发布 Flutter 应用</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://help.github.com/en/actions" target="_blank" rel="noopener">Github Actions</a> 是 Github 提供的一种 CI/CD 服务，如果你的 Flutter 应用代码放在 Github 上，那就可以使用这个服务自动化进行应用测试，构建，发布工作了。</p><p>先说下 Github Actions 几个核心概念，感觉还是挺易懂的，不得不说 Github Actions 的设计很厉害 😄</p><p><strong><code>Workflow file</code></strong></p><p>配置工作流程的文件，YAML 格式，放在项目根目录的 <code>.github/workflows</code> 目录内</p><p><strong><code>Workflow</code></strong></p><p>由配置文件定义的一个工作流程，由一系列的的任务组成</p><p><strong><code>Job</code></strong></p><p>工作流程中的一个任务，由一系列的步骤 Step 组成</p><p><strong><code>Step</code></strong></p><p>一个任务其中的一个执行步骤，执行一些命令或者 Action</p><p><strong><code>Action</code></strong></p><p>一个步骤中的具体要进行操作，如拉取代码，发送请求等，可以使用自己或社区共享的 Action</p><p><strong><code>Event</code></strong></p><p>触发工作流程运行的事件，比如推送代码到仓库 push，创建一个版本标签 tag 等</p><p><strong><code>Artifact</code></strong></p><p>工程流程执行时产生的东西</p><p><strong><code>Runner</code></strong></p><p>就是工作流程运行的地方，Github 提供的服务器</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面用一个示例项目来说明如何使用 Github Actions 发布 Flutter 应用，先放成果 <a href="https://github.com/xrr2016/flutter-github-gitlab/releases" target="_blank" rel="noopener">地址</a></p><p><img src="./images/flutter-release.jpg" alt="main.yml"></p><ol><li>首先创建一个 Flutter 项目</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create flutter_github_actions</span><br></pre></td></tr></table></figure><ol start="2"><li>添加一个配置文件 <code>.github/workflows/main.yml</code></li></ol><p><img src="./images/main-yml.jpg" alt="main.yml"></p><ol start="3"><li>配置工作流程，将代码推送到 Github</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作流程的名字</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Test,</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Release</span> <span class="string">apk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作流程触发的时机，这里是当一个版本标签推送到仓库时触发</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个工作流程需要执行的任务</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">process:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">all</span> <span class="string">process</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="comment"># 这个任务的步骤</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 拉取项目代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="comment"># 建立 java 环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Java</span> <span class="string">JDK</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v1.3.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="string">"12.x"</span></span><br><span class="line">      <span class="comment"># 建立 Flutter 环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Flutter</span> <span class="string">action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">subosito/flutter-action@v1.1.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">channel:</span> <span class="string">"stable"</span></span><br><span class="line">          <span class="attr">flutter-version:</span> <span class="string">"1.12.x"</span></span><br><span class="line">      <span class="comment"># 下载项目依赖</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">pub</span> <span class="string">get</span></span><br><span class="line">      <span class="comment"># 执行测试</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">test</span></span><br><span class="line">      <span class="comment"># 打包 APK</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">build</span> <span class="string">apk</span> <span class="string">--release</span></span><br><span class="line">      <span class="comment"># 发布到 Release</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span> <span class="string">apk</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ncipollo/release-action@v1.5.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">artifacts:</span> <span class="string">"build/app/outputs/apk/release/*.apk"</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_RElEASE_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建 Token</li></ol><p>要把构建出来的 apk 发布到仓库的 Release，还需要创建一个  <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal access token</a> 提供发布 action 访问和操作代码仓库的权限，注意不要关闭浏览器标签，因为这个 token 只有在第一次创建的时候可见。</p><p><img src="./images/flutter-gtihub-token.jpg" alt="token"></p><ol start="5"><li>添加环境变量</li></ol><p>最后为了能在工作流程中创建的 token，需要在仓库的 secrets 里添加一个环境变量 <code>GITHUB_RElEASE_TOKEN</code> 来储存 token 值</p><p><img src="./images/github-secrets.jpg" alt="secrets"></p><ol start="6"><li>触发构建</li></ol><p>最后创建一个版本标签，推送到仓库触发工作流程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0.0</span><br><span class="line"></span><br><span class="line">git push --tag</span><br></pre></td></tr></table></figure><p>然后就可以在仓库的 Actions 里面看到正在运行的工作流程了</p><p><img src="./images/github-workflow.jpg" alt="workflow"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下就是以下 4 个步骤</p><ol><li>创建一个工作流程的配置文件 <code>.github/workflows/main.yml</code></li><li>创建一个 Personnal access token</li><li>在项目的 serect 里面添加一个环境变量 <code>GITHUB_RElEASE_TOKEN</code></li><li>推送一个版本标签🏷️，触发工作流程</li></ol><p>之后就可以在每次发布标签后自动发布了</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>构建 Web 应用，发布到 Gihub Pages</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用 Flutter web</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Enable</span> <span class="string">flutter</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">config</span> <span class="string">--enable-web</span></span><br><span class="line"><span class="comment"># 构建 web 应用</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">build</span> <span class="string">web</span></span><br><span class="line"><span class="comment"># 部署到 Github Pages</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">publish_dir:</span> <span class="string">./build/web</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲解如何使用 Github Actions 构建并发布 Flutter 应用&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Github Actions" scheme="https://coldstone.fun/tags/Github-Actions/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 入门笔记 📒</title>
    <link href="https://coldstone.fun/post/2020/02/12/mysql-getting-start/"/>
    <id>https://coldstone.fun/post/2020/02/12/mysql-getting-start/</id>
    <published>2020-02-12T07:37:26.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>工作需求学习一下 MySQL 数据库</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>什么是 MySQL？引用官方说明</p><blockquote><p>MySQL is the world’s most popular open source database. Whether you are a fast growing web property, technology ISV or large enterprise, MySQL can cost-effectively help you deliver high performance, scalable database applications.</p><p>MySQL 是世界上最受欢迎的开源数据库。无论您是快速增长的 Web 资产，技术 ISV 还是大型企业，MySQL 都能经济高效地帮助您交付高性能，可扩展的数据库应用程序。</p></blockquote><p>MySQL 是目前最流行的关系型数据库，国内外很多公司都在使用，作为一个应用开发人员还是有必要学习一下 MySQL 的基本知识的。</p><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><p>使用 Docker 运行一个 MySQL 容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my-mysql -e MYSQL_ROOT_PASSWORD&#x3D;1234 -d -v volume_folder -p 3306:3306 mysql:5</span><br></pre></td></tr></table></figure><p>命令行登录 MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it my-mysql bash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> db-<span class="keyword">name</span>;</span><br></pre></td></tr></table></figure><p>显示数据库列表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><p>选择数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> dbname;</span><br></pre></td></tr></table></figure><p>显示数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">`id`</span>                 <span class="built_in">bigint</span>(<span class="number">11</span>)   <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="string">`user_id`</span>            <span class="built_in">bigint</span>(<span class="number">11</span>)   <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">    <span class="string">`username`</span>           <span class="built_in">varchar</span>(<span class="number">45</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'真实姓名'</span>,</span><br><span class="line">    <span class="string">`email`</span>              <span class="built_in">varchar</span>(<span class="number">30</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户邮箱'</span>,</span><br><span class="line">    <span class="string">`nickname`</span>           <span class="built_in">varchar</span>(<span class="number">45</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>,</span><br><span class="line">    <span class="string">`avatar`</span>             <span class="built_in">int</span>(<span class="number">11</span>)      <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'头像'</span>,</span><br><span class="line">    <span class="string">`birthday`</span>           <span class="built_in">date</span>         <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'生日'</span>,</span><br><span class="line">    <span class="string">`gender`</span>                <span class="built_in">tinyint</span>(<span class="number">4</span>)   <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">    <span class="string">`bio`</span>    <span class="built_in">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'一句话介绍自己，最多150个汉字'</span>,</span><br><span class="line">    <span class="string">`user_resume`</span>        <span class="built_in">varchar</span>(<span class="number">300</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户提交的简历存放地址'</span>,</span><br><span class="line">    <span class="string">`user_register_ip`</span>   <span class="built_in">int</span>          <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户注册时的源ip'</span>,</span><br><span class="line">    <span class="string">`create_time`</span>        <span class="built_in">timestamp</span>    <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户记录创建的时间'</span>,</span><br><span class="line">    <span class="string">`update_time`</span>        <span class="built_in">timestamp</span>    <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户资料修改的时间'</span>,</span><br><span class="line">    <span class="string">`user_review_status`</span> <span class="built_in">tinyint</span>      <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户资料审核状态，1为通过，2为审核中，3为未通过，4为还未提交审核'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`idx_user_id`</span> (<span class="string">`user_id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_username`</span> (<span class="string">`username`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_create_time`</span> (<span class="string">`create_time`</span>, <span class="string">`user_review_status`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_unicode_ci <span class="keyword">COMMENT</span> =<span class="string">'网站用户基本信息'</span>;</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2 ) <span class="keyword">VALUES</span> ( value1, value2 );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name <span class="keyword">SET</span> field1=<span class="number">1</span>,field2=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>查询数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username <span class="keyword">FROM</span> table_name <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>更新数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> table_name <span class="keyword">set</span> username=<span class="string">'update'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>WHERE 有条件地从表中选取数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN <span class="keyword">FROM</span> table_name1, table_name2...</span><br><span class="line">[<span class="keyword">WHERE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] condition2.....</span><br></pre></td></tr></table></figure><p>LIKE 有条件地从表中选取数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> field1 <span class="keyword">LIKE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] filed2 = <span class="string">'somevalue'</span></span><br></pre></td></tr></table></figure><p>UNION 连接 SELECT 语句的结果组合到一个结果集合中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span></span><br><span class="line">[<span class="keyword">WHERE</span> conditions]</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>]</span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span></span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure><p>JOIN 根据两个或多个表中的列之间的关系从中查询数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Persons.LastName, Persons.FirstName, Orders.OrderNo</span><br><span class="line"><span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Persons.Id_P = Orders.Id_P</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Persons.LastName;</span><br></pre></td></tr></table></figure><p>查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> people</span><br><span class="line"><span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>删除表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> people</span><br><span class="line"><span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>显示数据表的结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">describe</span> table_name;</span><br></pre></td></tr></table></figure><p>添加列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 列数据类型 [<span class="keyword">after</span> 插入位置];</span><br></pre></td></tr></table></figure><p>修改列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 列名称 列新名称 新数据类型;</span><br></pre></td></tr></table></figure><p>删除列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名称;</span><br></pre></td></tr></table></figure><p>重命名表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> 新表名;</span><br></pre></td></tr></table></figure><p>清空数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure><p>删除数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> table_name;</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> dbname;</span><br></pre></td></tr></table></figure><p>退出 MySQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="SQL-执行流程"><a href="#SQL-执行流程" class="headerlink" title="SQL 执行流程"></a>SQL 执行流程</h2><ol><li>当客户端连接到MySQL服务器时，服务器对其进行认证。可以通过用户名与密码认证，也可以通过SSL证书进行认证。登录认证后，服务器还会验证客户端是否有执行某个查询的操作权限。</li><li>在正式查询之前，服务器会检查查询缓存，如果能找到对应的查询，则不必进行查询解析，优化，执行等过程，直接返回缓存中的结果集。</li><li>MySQL的解析器会根据查询语句，构造出一个解析树，主要用于根据语法规则来验证语句是否正确，比如SQL的关键字是否正确，关键字的顺序是否正确。而预处理器主要是进一步校验，比如表名，字段名是否正确等</li><li>查询优化器将解析树转化为查询计划，一般情况下，一条查询可以有很多种执行方式，最终返回相同的结果，优化器就是根据成本找到这其中最优的执行计划</li><li>执行计划调用查询执行引擎，而查询引擎通过一系列API接口查询到数据</li><li>得到数据之后，在返回给客户端的同时，会将数据存在查询缓存中</li></ol><h2 id="使用-MySQL"><a href="#使用-MySQL" class="headerlink" title="使用 MySQL"></a>使用 MySQL</h2><p>使用 DataGrip 链接 MySQL</p><p><img src="/images/mysql-datagrip.jpg" alt="folder"></p><p>在 Egg.js 中使用 MySQL 数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    sequelize: &#123;</span><br><span class="line">      dialect: <span class="string">'mysql'</span>,</span><br><span class="line">      database: <span class="string">'database-name'</span>,</span><br><span class="line">      host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">      port: <span class="string">'3306'</span>,</span><br><span class="line">      username: <span class="string">'root'</span>,</span><br><span class="line">      password: <span class="string">'my-secret-pw'</span>,</span><br><span class="line">      pool: &#123;</span><br><span class="line">        max: <span class="number">8</span>, <span class="comment">// 最大连接数</span></span><br><span class="line">        min: <span class="number">0</span>, <span class="comment">// 最小连接数</span></span><br><span class="line">        idle: <span class="number">10000</span>, <span class="comment">// connection释放前的最大空闲时间</span></span><br><span class="line">      &#125;,</span><br><span class="line">      timezone: <span class="string">'+08:00'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h2><p>MySQL 官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。是针对表而建立的，它是由数据页面以外的索引页面组成，每个索引页中的行都含有逻辑指针，以便加速检索物理数据，创建索引的目的在于提高查询效率。</p><p>MyISAM</p><p>MyISAM 引擎使用 B+Tree 作为索引结构，叶节点的data域存放的是数据记录的地址。MyISAM 中索引检索的算法为首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址，读取相应数据记录。MyISAM的索引方式也叫做“非聚集”的，之所以这么称呼是为了与InnoDB的聚集索引区分。</p><p>InnoDB</p><p>在 InnoDB 中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。InnoDB 的辅助索引 data 域存储相应记录主键的值而不是地址。</p><p>创建使用索引的原则</p><p>1、索引尽量少，索引过多，影响写速度<br>2、建立索引尽量满足左匹配，索引只能命中最左边的范围查询，比如存在索引idx_a_b_c_d,  查询如select * from table where a=1 and b=2 and c&gt;3 and d&lt;4，则只能用到a,b,c<br>3、使用explain查看执行计划，需求所有的查询至少到达range级别<br>4、区分度不高的字段不建索引，比如性别，只有男和女，这种字段不需要建索引<br>5、表必须有主键索引，PRIMARY KEY (<code>id</code>)<br>6、建立索引时，把区分度高的字段放在前面</p><h2 id="建表三范式"><a href="#建表三范式" class="headerlink" title="建表三范式"></a>建表三范式</h2><ol><li>要求有主键，并且要求每一个字段原子性不可再分</li><li>第一范式基础上，要求所有非主键字段完全依赖主键，不能产生部分依赖</li><li>在第二范式基础上，所有非主键字段和主键字段之间不能产生传递依赖</li></ol><h2 id="建表规范"><a href="#建表规范" class="headerlink" title="建表规范"></a>建表规范</h2><p>命名规范</p><ul><li>表名不使用复数名词</li><li>库名、表名、字段名使用小写字母，下划线 “_” 分割</li><li>库名、表名、字段名不超过 12 个字符</li><li>表名不使用复数名词</li><li>库名、表名、字段名见名知意, 尽量使用名词不是动词</li><li>不使用数据库保留字比如：key，desc，delete，order……</li><li>表的命名使用 “统一前缀_业务名称_表的作用” 模式，如：tb_plan, tb_task, tb_target</li></ul><p>设计规范</p><ul><li>使用布尔值类型存储是/否类字段</li><li>禁止在表中建立预留字段</li><li>所有表和字段都需添加注释</li><li>禁止在数据库存储图片、文件等二进制数据</li><li>存储引擎选择 InnoDB，表字符集选择 utf8mb4</li><li>将大字段拆分值其他表中</li><li>字段小写命名，禁止出现大写</li><li>尽可能把所有列定义为 NOT NULL，因为 NULL 在 MySQL 中得特殊处理、很难优化</li><li>优先选择符合存储需要的最小数据类型</li><li>对于非负整数，优先使用无符号整型存储（id）</li><li>避免使用 TEXT、BLOB 数据类型，非用不可的情况，可以把 BLOB 和 TEXT 拆分到单独的拓展表中</li><li>使用 TIMESTAMP 或 DATETIME 类型存储时间<ul><li>TIMESTAMP（4BYTE）1970-01-01 00:00:01 - 2038-01-19 03:14:07</li><li>DATETIME（8BYTE）1000-01-01 00:00:00’ -  9999-12-31 23:59:59</li></ul></li><li>用 decimal 来存储金额字段，不要用 float 和 double，会出现数据精度丢失</li><li>使用 INT UNSIGNED 存储 IP，IP 转数字函数 inet_aton()、数字转 IP 函数 inet_ntoa()</li><li>VARCHAR(N) 中的 N 表示字符数(不是字节数、比如 VARCHAR(N) 能存储 N 个汉字)、满足需求的情况下 N 越小越好、最大长度65535个字节</li><li>对于定长的字符类型、比如密码 MD5 值等、建议用 char 类型，效率可以得到提升</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li>Optimize Your Queries For the Query Cache</li><li>EXPLAIN Your SELECT Queries</li><li>LIMIT 1 When Getting a Unique Row</li><li>Index the Search Fields</li><li>Index and Use Same Column Types for Joins</li><li>Avoid SELECT *</li><li>Almost Always Have an id Field</li><li>Use ENUM over VARCHAR</li><li>Get Suggestions with PROCEDURE ANALYSE()</li><li>Use NOT NULL If You Can</li><li>Prepared Statements</li><li>Unbuffered Queries</li><li>Fixed-length(Static) Tables are Faster</li><li>Vertical Partitioning</li><li>Split the Big DELETE or INSERT Queries</li><li>Smaller Columns Are Faster</li><li>Choose the Right Storage Engine</li><li>Use an Object Relational Mapper</li><li>在使用 InnoDB 存储引擎时，如果没有特别的需要，请永远使用一个与业务无关的自增字段作为主键。</li><li>禁止从开发环境、测试环境直连生产环境数据库</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">MySQL 教程</a></p><p><a href="https://www.kancloud.cn/xuying/sql/269824" target="_blank" rel="noopener">数据库经验小结</a></p><p><a href="https://github.com/jaywcjlove/mysql-tutorial/blob/master/21-minutes-MySQL-basic-entry.md" target="_blank" rel="noopener">21分钟MySQL基础入门</a></p><p><a href="https://www.jianshu.com/p/3e97c2a1687b" target="_blank" rel="noopener">MySql–数据库设计三范式</a></p><p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></p><p><a href="https://www.cnblogs.com/enein/archive/2012/11/29/2794896.html" target="_blank" rel="noopener">Top 20+ MySQL Best Practices(20条MySQL最佳实践)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作需求学习一下 MySQL 数据库&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySQL" scheme="https://coldstone.fun/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>使用 Codemagic 持续部署 Flutter 应用</title>
    <link href="https://coldstone.fun/post/2020/02/03/flutter-cicd/"/>
    <id>https://coldstone.fun/post/2020/02/03/flutter-cicd/</id>
    <published>2020-02-03T14:36:16.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>Codemagic 持续部署 Flutter 应用</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>持续集成和持续部署能够自动化应用开发的测试，构建和部署过程，如果在应用开发初期解决了这个问题无疑提升应用的开发，交付效率。</p><h2 id="什么是-Codemagic"><a href="#什么是-Codemagic" class="headerlink" title="什么是 Codemagic"></a>什么是 <code>Codemagic</code></h2><p><a href="https://codemagic.io" target="_blank" rel="noopener">Codemagic</a> 是一个为 <code>Flutter</code> 项目以及其它移动端项目提供 CI/CD 服务的平台。</p><p>可以使用 Github 账号注册登录，登录后它会要求获得你仓库的读/写权限，然后在 <a href="https://codemagic.io/apps" target="_blank" rel="noopener">apps</a> 页面显示你需要进行构建的项目。</p><p><img src="./images/code-apps.jpg" alt="code-apps"></p><h2 id="为什么使用-Codemagic"><a href="#为什么使用-Codemagic" class="headerlink" title="为什么使用 Codemagic"></a>为什么使用 <code>Codemagic</code></h2><p>好的 <code>CI/CD</code> 有助于更快地构建，测试以及部署发布应用。在 <code>Flutter</code> 的官方文档 <a href="https://flutter.cn/docs/deployment/cd" target="_blank" rel="noopener">Flutter 里的持续部署</a> 里介绍了使用 <code>fastlane</code> 工具进行本地部署以及如何将 <code>fastlane</code> 整合到 <code>Travis</code>，<code>Cirrus</code>，<code>Bitrise</code> 等持续交付的服务中，但是对于 <code>Flutter</code> 项目来说最方便的 <code>CI/CD</code> 服务应该还是 <code>Codemagic</code>，它可以直接在网页上就配置出完整的应用交付流程。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>选择需要构建的 <code>Fluter</code> 项目，点击 <code>Start your first build</code> 按钮，创建一个工作流程 <code>Workflow</code>。<br>一个 <code>Workflow</code> 指的是每次构建要做的任务，如执行构建，测试以及发布任务。</p><p>对于 <code>Flutter</code> 项目可以在网页上配置或使用 <code>codemagic.yaml</code> 配置文件，其它项目只能使用 <code>codemagic.yaml</code> 配置。</p><p><img src="./images/workflow.jpg" alt="workflow"></p><p>一个 <code>Workflow</code> 由以下几个部分组成</p><ol><li><code>Build triggers</code> –&gt; 指定的构建分支和触发构建的时机</li></ol><p><img src="./images/build-triggers.jpg" alt="build-triggers"></p><ol start="2"><li><code>Environment variables</code> –&gt; 设置构建时的环境变量</li></ol><p><img src="https://docs.codemagic.io/uploads/env_vars.PNG" alt="env_vars"></p><ol start="3"><li><code>Dependency caching</code> –&gt; 设置构建时的依赖缓存文件目录，加快构建速度</li></ol><p><img src="https://docs.codemagic.io/uploads/2019/04/caching_enabled.PNG" alt="caching"></p><ol start="4"><li><code>Test</code> –&gt; 执行应用的单元，集成和部件测试，以及静态代码分析</li></ol><p><img src="./images/code-test.jpg" alt="code-test"></p><ol start="5"><li><code>Build</code> –&gt; 配置应用构建时的 Flutter 版本，构建目标，构建参数</li></ol><p><img src="./images/code-build.jpg" alt="code-build"></p><ol start="6"><li><code>Publish</code> –&gt; 选择需要发布应用的目标，这里我选择了 <code>Google play</code></li></ol><p><img src="./images/code-publish.jpg" alt="code-publish"></p><h2 id="代码签名"><a href="#代码签名" class="headerlink" title="代码签名"></a>代码签名</h2><p>要将应用发布到 <code>Apple store</code> 或者 <code>Goople play</code> 上就必须对你的应用进行代码签名，代码签名目的是为了识别谁开发了该应用程序，并确保该应用程序的所有更新均来自这个人。</p><p>对于 Android 来说有两种签名：发布签名和上传签名。最终用户下载的 <code>.aab/.apk</code> 文件使用发布签名。上传签名提供给开发者上传到 <code>Google Play</code> 商店的认证。上传后，<code>Google Play</code> 会重新使用发布签名对 <code>.aab/.apk</code> 文件签名。</p><p>在配置 <code>Workflow</code> 时，我选择发布到 <code>Goople play</code> 所以需要对 Android 应用进行代码签名，有以下两种方式进行签名，选择其一即可。</p><ol><li>使用 <code>Android Studio</code> <a href="https://developer.android.google.cn/studio/publish/app-signing#sign-apk" target="_blank" rel="noopener">为您的应用签名</a></li><li>使用命令行工具进行签名 <a href="https://flutter.cn/docs/deployment/android#signing-the-app" target="_blank" rel="noopener">为 app 签名</a></li></ol><p>签名后需要做的是把签名信息存到工作流程 <code>Workflow</code> 内，<a href="https://docs.codemagic.io/code-signing/android-code-signing/" target="_blank" rel="noopener">Android code signing</a>。</p><h2 id="创建-Service-Account"><a href="#创建-Service-Account" class="headerlink" title="创建 Service Account"></a>创建 <code>Service Account</code></h2><p><code>Service Account</code> 是给 <code>CI/CD</code> 平台发布构建后应用用的，根据指引创建 <a href="https://docs.codemagic.io/publishing/publishing-to-google-play/#setting-up-a-service-account-in-google-play-console" target="_blank" rel="noopener">Setting up a service account in Google Play Console</a>，创建后需做的上传你的凭证 JSON 文件</p><p><img src="./images/code-google-play.jpg" alt="code-google-play"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>在使用 <code>CI/CD</code> 服务前首先要人工的上传应用到 <code>Google Play</code> 一次。</li><li>每次上传到 <code>Google Play</code> 的应用构建版本不能重复，否则会遇到这样一个问题</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Google Play responded with: APK specifies a version code that has already been used.</span><br></pre></td></tr></table></figure><p>搜索一番后发现问题是应用构建的版本号重复，需要更新 <code>pubspec.yaml</code> 文件的 <code>version</code> 字段的值，详细说明可以查阅这篇文章 <a href="https://flutter.cn/docs/deployment/android#updating-the-apps-version-number" target="_blank" rel="noopener">更新应用版本号</a></p><ol start="3"><li>上传 <code>Google Play</code> 需要添加一个环境变量 <code>FCI_KEYSTORE_FILE</code>，这个变量需要用 base64 encode 一下，需要用到的命令是</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64 input-file-path -o output.txt</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用 <code>Codemagic</code> 发布 Flutter 应用的流程大致如下</p><ol><li>选择构建项目</li><li>配置构建流程</li><li>进行代码签名</li><li>创建 Service Account</li><li>触发构建</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.codemagic.io/getting-started-with-codemagic/" target="_blank" rel="noopener">封面图片地址</a></p><p><a href="https://flutter.cn/docs/deployment/cd" target="_blank" rel="noopener">Flutter 里的持续部署</a></p><p><a href="https://docs.codemagic.io/" target="_blank" rel="noopener">Codemagic Documentation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Codemagic 持续部署 Flutter 应用&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Codemagic" scheme="https://coldstone.fun/tags/Codemagic/"/>
    
      <category term="Google Play" scheme="https://coldstone.fun/tags/Google-Play/"/>
    
  </entry>
  
  <entry>
    <title>为 Flutter 应用添加搜索功能</title>
    <link href="https://coldstone.fun/post/2020/01/26/flutter-show-search/"/>
    <id>https://coldstone.fun/post/2020/01/26/flutter-show-search/</id>
    <published>2020-01-26T09:34:54.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>SearchDelegate</code> 给 Flutter 应用添加搜索功能</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>SearchDelegate</code> 是 Flutter 框架提供的一个实现搜索功能的类，使用它可以快速实现搜索功能，本文说明如何使用它来实现搜索功能。</p><p>最终效果如下</p><div>  <video src="videos/show_search.mov" controls width="240" autoplay muted loop /></div><p>创建新项目，初始化代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Search App'</span>,</span><br><span class="line">      home: HomePage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'Search App'</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示搜索页面"><a href="#显示搜索页面" class="headerlink" title="显示搜索页面"></a>显示搜索页面</h2><p><code>showSearch</code> 方法是 Flutter 里用来显示一个搜索页面的方法，这个页面由一个带有搜索框的 <code>AppBar</code> 和显示搜索建议或搜索结果的 <code>body</code> 组成。它有两个必要参数 <code>context</code> 和 <code>delegate</code>，<code>context</code> 即为当前的应用上下文，<code>delegate</code> 是一个实现了 <code>SearchDelegate</code> 抽象类自定义的部件，这个自定义部件定义了如何显示搜索页面，关闭搜索页面时返回用户选择的搜索结果。</p><p>在 <code>AppBar</code> 的 <code>actions</code> 数组里面添加一个 <code>IconButton</code>，按下时调用 <code>showSearch</code> 方法，进入搜索页面。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'Search App'</span>),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          IconButton(</span><br><span class="line">            icon: Icon(Icons.search),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              showSearch(context: context, delegate: CustomSearchDelegate());</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化一个继承了 <code>SearchDelegate</code> 的 <code>CustomSearchDelegate</code>，类的名字是自定义的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomSearchDelegate</span> <span class="keyword">extends</span> <span class="title">SearchDelegate</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; buildActions(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement buildActions</span></span><br><span class="line">    <span class="keyword">throw</span> UnimplementedError();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildLeading(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement buildLeading</span></span><br><span class="line">    <span class="keyword">throw</span> UnimplementedError();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildResults(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement buildResults</span></span><br><span class="line">    <span class="keyword">throw</span> UnimplementedError();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildSuggestions(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement buildSuggestions</span></span><br><span class="line">    <span class="keyword">throw</span> UnimplementedError();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现-CustomSearchDelegate"><a href="#实现-CustomSearchDelegate" class="headerlink" title="实现 CustomSearchDelegate"></a>实现 <code>CustomSearchDelegate</code></h2><p>自定义的 <code>CustomSearchDelegate</code> 需要实现四个方法</p><ul><li><code>buildLeading</code>     显示在输入框之前的部件，一般显示返回前一个页面箭头按钮</li><li><code>buildActions</code>     显示在输入框之后的部件</li><li><code>buildResults</code>     显示搜索结果</li><li><code>buildSuggestions</code> 显示搜索建议</li></ul><p>先实现 <code>buildActions</code> 和 <code>buildLeading</code>，<code>buildActions</code> 显示一个清除按钮，可以把当前的 <code>query</code> 查询参数清空，并显示搜索建议。<code>buildLeading</code> 显示一个箭头的按钮，使用 <code>close</code> 方法关闭搜索页面，<code>close</code> 方法第二个参数是选定的搜索结果，如果使用系统后退按钮关闭搜索页面，则返回 <code>null</code> 值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;Widget&gt; buildActions(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    IconButton(</span><br><span class="line">      tooltip: <span class="string">'Clear'</span>,</span><br><span class="line">      icon: <span class="keyword">const</span> Icon(Icons.clear),</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        query = <span class="string">''</span>;</span><br><span class="line">        showSuggestions(context);</span><br><span class="line">      &#125;,</span><br><span class="line">    )</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget buildLeading(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> IconButton(</span><br><span class="line">    tooltip: <span class="string">'Back'</span>,</span><br><span class="line">    icon: AnimatedIcon(</span><br><span class="line">      icon: AnimatedIcons.menu_arrow,</span><br><span class="line">      progress: transitionAnimation,</span><br><span class="line">    ),</span><br><span class="line">    onPressed: () &#123;</span><br><span class="line">      close(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget buildResults(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> ListView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget buildSuggestions(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> ListView();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="images/search_01.png" width="240" style="width: 240px;"><p>然后实现 <code>buildResults</code> 和 <code>buildSuggestions</code>，这两个方法用来展示搜索页面内容，可以使用不同的部显示，这里使用 <code>ListView</code> 部件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget buildResults(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> ListView.builder(</span><br><span class="line">    itemCount: Random().nextInt(<span class="number">10</span>),</span><br><span class="line">    itemBuilder: (context, index) &#123;</span><br><span class="line">      <span class="keyword">return</span> ListTile(</span><br><span class="line">        title: Text(<span class="string">'result <span class="subst">$index</span>'</span>),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget buildSuggestions(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> ListView(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      ListTile(title: Text(<span class="string">'Suggest 01'</span>)),</span><br><span class="line">      ListTile(title: Text(<span class="string">'Suggest 02'</span>)),</span><br><span class="line">      ListTile(title: Text(<span class="string">'Suggest 03'</span>)),</span><br><span class="line">      ListTile(title: Text(<span class="string">'Suggest 04'</span>)),</span><br><span class="line">      ListTile(title: Text(<span class="string">'Suggest 05'</span>)),</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索结果</p><img src="images/search_result.png" width="240" style="width: 240px;"><p>搜索建议</p><img src="images/search_suggestion.png" width="240" style="width: 240px;"><h2 id="获取远程数据"><a href="#获取远程数据" class="headerlink" title="获取远程数据"></a>获取远程数据</h2><p>搜索功能一般需要请求后端的搜索接口来获取数据，此时可以使用 <code>FutureBuilder</code> 部件来请求数据然后渲染结果。首先需要定义一个请求接口的方法，返回一个 <code>Future</code>，然后在 <code>buildResults</code> 方法中使用 <code>FutureBuilder</code> 来展示结果。</p><p>先添加 <code>http</code> 包，用来发送 http 请求，然后引入需要的依赖包</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">http:</span> <span class="string">&lt;latest_version&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:http/http.dart'</span> <span class="keyword">as</span> http;</span><br></pre></td></tr></table></figure><p>将键盘输入类型设置为数字，定义一个 <code>_fetchPosts</code> 方法用来获取远端数据，在 <code>buildResults</code> 方法里使用 <code>FutureBuilder</code> 渲染搜索结果。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">TextInputType <span class="keyword">get</span> keyboardType =&gt; TextInputType.number;</span><br><span class="line"></span><br><span class="line">Future _fetchPosts() <span class="keyword">async</span> &#123;</span><br><span class="line">  http.Response response =</span><br><span class="line">      <span class="keyword">await</span> http.<span class="keyword">get</span>(<span class="string">'https://jsonplaceholder.typicode.com/posts/<span class="subst">$query</span>'</span>);</span><br><span class="line">  <span class="keyword">final</span> data = <span class="keyword">await</span> json.decode(response.body);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget buildResults(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">int</span>.tryParse(query) &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(child: Text(<span class="string">'请输入小于 100 的数字'</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> FutureBuilder(</span><br><span class="line">    future: _fetchPosts(),</span><br><span class="line">    builder: (context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">      <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">        <span class="keyword">final</span> post = snapshot.data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ListTile(</span><br><span class="line">          title: Text(post[<span class="string">'title'</span>], maxLines: <span class="number">1</span>),</span><br><span class="line">          subtitle: Text(post[<span class="string">'body'</span>], maxLines: <span class="number">3</span>),</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> Center(child: CircularProgressIndicator());</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="images/search_server.png" width="240" style="width: 240px;"><p>使用 <code>FutureBuilder</code> 部件获取了远程的数据，但是遇到一个问题，搜索结果可能是分页显示的，一开始只获取了第一页的数据，想追加下一页数据时需要像 <code>stateFullWidget</code> 那样使用 <code>setState</code> 方法更新页面，但是在 <code>SearchDelegate</code> 里无法使用…暂时没想到解决方法。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:http/http.dart'</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Search App'</span>,</span><br><span class="line">      home: HomePage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'Search App'</span>),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          IconButton(</span><br><span class="line">            icon: Icon(Icons.search),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              showSearch(context: context, delegate: CustomSearchDelegate());</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomSearchDelegate</span> <span class="keyword">extends</span> <span class="title">SearchDelegate</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; buildActions(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      IconButton(</span><br><span class="line">        tooltip: <span class="string">'Clear'</span>,</span><br><span class="line">        icon: <span class="keyword">const</span> Icon(Icons.clear),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          query = <span class="string">''</span>;</span><br><span class="line">          showSuggestions(context);</span><br><span class="line">        &#125;,</span><br><span class="line">      )</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildLeading(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> IconButton(</span><br><span class="line">      tooltip: <span class="string">'Back'</span>,</span><br><span class="line">      icon: AnimatedIcon(</span><br><span class="line">        icon: AnimatedIcons.menu_arrow,</span><br><span class="line">        progress: transitionAnimation,</span><br><span class="line">      ),</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        <span class="keyword">this</span>.close(context, <span class="keyword">null</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  TextInputType <span class="keyword">get</span> keyboardType =&gt; TextInputType.number;</span><br><span class="line"></span><br><span class="line">  Future _fetchPosts() <span class="keyword">async</span> &#123;</span><br><span class="line">    http.Response response =</span><br><span class="line">        <span class="keyword">await</span> http.<span class="keyword">get</span>(<span class="string">'https://jsonplaceholder.typicode.com/posts/<span class="subst">$query</span>'</span>);</span><br><span class="line">    <span class="keyword">final</span> data = <span class="keyword">await</span> json.decode(response.body);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildResults(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>.parse(query) &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> Center(child: Text(<span class="string">'请输入小于 100 的数字'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FutureBuilder(</span><br><span class="line">      future: _fetchPosts(),</span><br><span class="line">      builder: (context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">        <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">          <span class="keyword">final</span> post = snapshot.data;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> ListTile(</span><br><span class="line">            title: Text(post[<span class="string">'title'</span>], maxLines: <span class="number">1</span>),</span><br><span class="line">            subtitle: Text(post[<span class="string">'body'</span>], maxLines: <span class="number">3</span>),</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Center(child: CircularProgressIndicator());</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildSuggestions(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        ListTile(title: Text(<span class="string">'Suggest 01'</span>)),</span><br><span class="line">        ListTile(title: Text(<span class="string">'Suggest 02'</span>)),</span><br><span class="line">        ListTile(title: Text(<span class="string">'Suggest 03'</span>)),</span><br><span class="line">        ListTile(title: Text(<span class="string">'Suggest 04'</span>)),</span><br><span class="line">        ListTile(title: Text(<span class="string">'Suggest 05'</span>)),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;SearchDelegate&lt;/code&gt; 给 Flutter 应用添加搜索功能&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 创建自定义路由过渡动画</title>
    <link href="https://coldstone.fun/post/2019/12/10/flutter-route-transition/"/>
    <id>https://coldstone.fun/post/2019/12/10/flutter-route-transition/</id>
    <published>2019-12-10T08:37:52.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter 应用进行路由跳转的时候有默认的过渡动画，但是自定义的跳转动画会让应用更具特色</p><a id="more"></a><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ol><li>使用 <code>PageRouteBuilder</code> 创建自定义路由</li><li>在 <code>transitionsBuilder</code> 方法里创建过渡动画</li><li>过渡动画示例</li><li>定义全局路由过渡动画</li><li>封装自定义路由</li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 <code>Flutter</code> 中使用 <code>Navigator.of(context).push(Route route);</code> 方法进行路由跳转时就需要传一个 <code>Route</code> 对象，通常使用 <code>MaterialPageRoute(builder: () {});</code> 创建，使用时会在路由跳转过程中添加默认的过渡动画。当需要自定义路由过渡动画时，就要使用 <code>PageRouteBuilder</code>，它是 <code>Flutter</code> 提供的用来创建自定义的路由的一个类，实例化这个类会得到一个路由对象 <code>Route</code>，要做的就是创建一个自定义的 <code>Route</code>。</p><h2 id="PageRouteBuilder"><a href="#PageRouteBuilder" class="headerlink" title="PageRouteBuilder"></a>PageRouteBuilder</h2><p>使用 <code>PageRouteBuilder</code> 创建自定义路由过渡动画时需要传入两个回调函数作为参数，一个必要参数 <code>pageBuilder</code>，这个函数用来创建跳转的页面，另一个函数 <code>transitionsBuilder</code>，这个函数就是实现过渡动画的地方。</p><blockquote><p><code>transitionsBuilder</code> 的 <code>child</code> 参数是 <code>pageBuilder</code> 函数返回的一个 <code>transitionsBuilder widget</code> 部件， <code>pageBuilder</code> 方法仅会在第一次构建路由的时候被调用，<code>Flutter</code> 能够自动避免做额外的工作，整个过渡期间 <code>child</code> 保存了同一个实例。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PageRouteBuilder(</span><br><span class="line">  pageBuilder: (</span><br><span class="line">      BuildContext context,</span><br><span class="line">      Animation&lt;<span class="built_in">double</span>&gt; animation,</span><br><span class="line">      Animation&lt;<span class="built_in">double</span>&gt; secondaryAnimation,</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> widget;</span><br><span class="line">    &#125;,</span><br><span class="line">    transitionsBuilder: (</span><br><span class="line">      BuildContext context,</span><br><span class="line">      Animation&lt;<span class="built_in">double</span>&gt; animation,</span><br><span class="line">      Animation&lt;<span class="built_in">double</span>&gt; secondaryAnimation,</span><br><span class="line">      Widget child,</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> child;</span><br><span class="line">    &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建自定义路由需要继承 <code>PageRouteBuilder</code>，然后实现自定义路由的构造函数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourRoute</span> <span class="keyword">extends</span> <span class="title">PageRouteBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget page;</span><br><span class="line"></span><br><span class="line">  YourRoute(<span class="keyword">this</span>.page)</span><br><span class="line">      : <span class="keyword">super</span>(</span><br><span class="line">          pageBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionsBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">            child,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> child;</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Navigator.of(context).push(YourRoute(NewPage()));</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>使用 <code>FirstPage</code> 和 <code>SecondPage</code> 两个页面展示效果</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: FirstPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'First Page'</span>),</span><br><span class="line">        elevation: <span class="number">0.0</span>,</span><br><span class="line">        backgroundColor: Colors.purple,</span><br><span class="line">      ),</span><br><span class="line">      body: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Center(</span><br><span class="line">            child: RaisedButton(</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.of(context).push(</span><br><span class="line">                  MaterialPageRoute(builder: (context) =&gt; SecondPage()),</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">              child: Text(<span class="string">'Next Page'</span>),</span><br><span class="line">            ),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      backgroundColor: Colors.purple,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'Second Page'</span>),</span><br><span class="line">        elevation: <span class="number">0.0</span>,</span><br><span class="line">        backgroundColor: Colors.deepPurpleAccent,</span><br><span class="line">      ),</span><br><span class="line">      body: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Center(</span><br><span class="line">            child: RaisedButton(</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.pop(context);</span><br><span class="line">              &#125;,</span><br><span class="line">              child: Text(<span class="string">'Go Back'</span>),</span><br><span class="line">            ),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      backgroundColor: Colors.deepPurpleAccent,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FadeTransition"><a href="#FadeTransition" class="headerlink" title="FadeTransition"></a><code>FadeTransition</code></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FadeRoute</span> <span class="keyword">extends</span> <span class="title">PageRouteBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget page;</span><br><span class="line"></span><br><span class="line">  FadeRoute(<span class="keyword">this</span>.page)</span><br><span class="line">      : <span class="keyword">super</span>(</span><br><span class="line">          pageBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionsBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">            child,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> FadeTransition(</span><br><span class="line">              opacity: animation,</span><br><span class="line">              child: child,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div>  <video src="videos/fade_transition.mov" controls width="320" autoplay muted loop /></div><h3 id="ScaleTransition"><a href="#ScaleTransition" class="headerlink" title="ScaleTransition"></a><code>ScaleTransition</code></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScaleRoute</span> <span class="keyword">extends</span> <span class="title">PageRouteBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget page;</span><br><span class="line"></span><br><span class="line">  ScaleRoute(<span class="keyword">this</span>.page)</span><br><span class="line">      : <span class="keyword">super</span>(</span><br><span class="line">          pageBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionsBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">            child,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> ScaleTransition(</span><br><span class="line">              alignment: Alignment.bottomLeft,</span><br><span class="line">              scale: Tween(</span><br><span class="line">                begin: <span class="number">0.0</span>,</span><br><span class="line">                end: <span class="number">1.0</span>,</span><br><span class="line">              ).animate(</span><br><span class="line">                CurvedAnimation(</span><br><span class="line">                  parent: animation,</span><br><span class="line">                  curve: Curves.easeInOut,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              child: child,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionDuration: <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Navigator.of(context).push(ScaleRoute(SecondPage()));</span><br></pre></td></tr></table></figure><div>  <video src="videos/scale_transition.mov" controls width="320" autoplay muted loop /></div><h3 id="RotationTransition"><a href="#RotationTransition" class="headerlink" title="RotationTransition"></a><code>RotationTransition</code></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RotationRoute</span> <span class="keyword">extends</span> <span class="title">PageRouteBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget page;</span><br><span class="line"></span><br><span class="line">  RotationRoute(<span class="keyword">this</span>.page)</span><br><span class="line">      : <span class="keyword">super</span>(</span><br><span class="line">          pageBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionsBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">            child,</span><br><span class="line">          ) &#123;</span><br><span class="line">            Animation myAnimation = CurvedAnimation(</span><br><span class="line">              parent: animation,</span><br><span class="line">              curve: Curves.easeInBack,</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> RotationTransition(</span><br><span class="line">              turns: myAnimation,</span><br><span class="line">              child: child,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionDuration: <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Navigator.of(context).push(RotationRoute(SecondPage()));</span><br></pre></td></tr></table></figure><div>  <video src="videos/rotation_transition.mov" controls width="320" autoplay muted loop /></div><h3 id="ScaleRotationRoute"><a href="#ScaleRotationRoute" class="headerlink" title="ScaleRotationRoute"></a><code>ScaleRotationRoute</code></h3><p>结合两个过渡动画</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScaleRotationRoute</span> <span class="keyword">extends</span> <span class="title">PageRouteBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget page;</span><br><span class="line"></span><br><span class="line">  ScaleRotationRoute(<span class="keyword">this</span>.page)</span><br><span class="line">      : <span class="keyword">super</span>(</span><br><span class="line">          pageBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionsBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">            child,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> ScaleTransition(</span><br><span class="line">              scale: animation,</span><br><span class="line">              child: RotationTransition(</span><br><span class="line">                turns: Tween(</span><br><span class="line">                  begin: <span class="number">0.0</span>,</span><br><span class="line">                  end: <span class="number">1.0</span>,</span><br><span class="line">                ).animate(</span><br><span class="line">                  CurvedAnimation(parent: animation, curve: Curves.linear),</span><br><span class="line">                ),</span><br><span class="line">                child: child,</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionDuration: <span class="built_in">Duration</span>(milliseconds: <span class="number">800</span>),</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Navigator.of(context).push(ScaleRotationRoute(SecondPage()));</span><br></pre></td></tr></table></figure><div>  <video src="videos/scale_rotation_transition.mov" controls width="320" autoplay muted loop /></div><h3 id="TransformRoute"><a href="#TransformRoute" class="headerlink" title="TransformRoute"></a><code>TransformRoute</code></h3><p>使用 <code>Transform</code> 部件创造 <code>3D</code> 效果</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span> <span class="keyword">show</span> pi;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransformRoute</span> <span class="keyword">extends</span> <span class="title">PageRouteBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget page;</span><br><span class="line"></span><br><span class="line">  TransformRoute(<span class="keyword">this</span>.page)</span><br><span class="line">      : <span class="keyword">super</span>(</span><br><span class="line">          pageBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionsBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">            child,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> Transform(</span><br><span class="line">              transform: Matrix4.identity()</span><br><span class="line">                <span class="comment">// 类似于 CSS 里面 `perspective` 属性，确定 z=0 平面与用户之间的距离</span></span><br><span class="line">                ..setEntry(<span class="number">3</span>, <span class="number">2</span>, <span class="number">0.0001</span>)</span><br><span class="line">                ..rotateX(animation.value * pi * <span class="number">2</span>)</span><br><span class="line">                ..rotateY(animation.value * pi * <span class="number">2</span>),</span><br><span class="line">              alignment: FractionalOffset.center,</span><br><span class="line">              child: child,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionDuration: <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Navigator.of(context).push(TransformRoute(SecondPage()));</span><br></pre></td></tr></table></figure><div>  <video src="videos/transform_transition.mov" controls width="320" autoplay muted loop /></div><h3 id="EnterExitRoute"><a href="#EnterExitRoute" class="headerlink" title="EnterExitRoute"></a><code>EnterExitRoute</code></h3><p>同时为进入页面和退出页面添加动画</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnterExitRoute</span> <span class="keyword">extends</span> <span class="title">PageRouteBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget enterPage;</span><br><span class="line">  <span class="keyword">final</span> Widget exitPage;</span><br><span class="line"></span><br><span class="line">  EnterExitRoute(<span class="keyword">this</span>.enterPage, <span class="keyword">this</span>.exitPage)</span><br><span class="line">      : <span class="keyword">super</span>(</span><br><span class="line">          pageBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> exitPage;</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionsBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">            child,</span><br><span class="line">          ) =&gt;</span><br><span class="line">              Stack(</span><br><span class="line">            children: [</span><br><span class="line">              SlideTransition(</span><br><span class="line">                position: Tween&lt;Offset&gt;(</span><br><span class="line">                  begin: Offset(<span class="number">0.0</span>, <span class="number">0.0</span>),</span><br><span class="line">                  end: Offset(<span class="number">-1.0</span>, <span class="number">0.0</span>),</span><br><span class="line">                ).animate(</span><br><span class="line">                  CurvedAnimation(parent: animation, curve: Curves.easeIn),</span><br><span class="line">                ),</span><br><span class="line">                child: enterPage,</span><br><span class="line">              ),</span><br><span class="line">              SlideTransition(</span><br><span class="line">                position: Tween&lt;Offset&gt;(</span><br><span class="line">                  begin: Offset(<span class="number">1.0</span>, <span class="number">0.0</span>),</span><br><span class="line">                  end: Offset.zero,</span><br><span class="line">                ).animate(</span><br><span class="line">                  CurvedAnimation(parent: animation, curve: Curves.easeInOut),</span><br><span class="line">                ),</span><br><span class="line">                child: exitPage,</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Navigator.of(context).push(</span><br><span class="line">  EnterExitRoute(FirstPage(), SecondPage()),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div>  <video src="videos/enter_exist_transition.mov" controls width="320" autoplay muted loop /></div><h2 id="使用-Navigator-pushNamed-方法跳转"><a href="#使用-Navigator-pushNamed-方法跳转" class="headerlink" title="使用 Navigator.pushNamed 方法跳转"></a>使用 <code>Navigator.pushNamed</code> 方法跳转</h2><p>在 <code>onGenerateRoute</code> 对跳转路由的 <code>name</code> 进行判断，对特定的路由添加过渡动画。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: FirstPage(),</span><br><span class="line">      onGenerateRoute: (settings) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (settings.name) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'/second'</span>:</span><br><span class="line">            <span class="keyword">return</span> ScaleRoute(SecondPage());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Navigator.pushNamed(context, <span class="string">'/second'</span>, arguments: &#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="设置全局的路由过渡动画"><a href="#设置全局的路由过渡动画" class="headerlink" title="设置全局的路由过渡动画"></a>设置全局的路由过渡动画</h2><p><code>Flutter</code> 的默认路由过渡动画是由 <code>buildTransitions</code> 方法创建的，它使用的是 <code>Theme.of(context).pageTransitionsTheme</code>方法，因此可以定义全局的路由跳转过渡动画。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget buildTransitions(context, animation, secondaryAnimation, child) &#123;</span><br><span class="line">    <span class="keyword">final</span> PageTransitionsTheme theme = Theme.of(context).pageTransitionsTheme;</span><br><span class="line">    <span class="keyword">return</span> theme.buildTransitions&lt;T&gt;(<span class="keyword">this</span>, context, animation, secondaryAnimation, child);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先自定义一个 <code>TransitionBuilder</code>， <code>buildTransitions</code> 方法返回跳转页面。然后配置 <code>theme</code> 的 <code>pageTransitionsTheme</code>，设置对应的平台，最后在使用 <code>MaterialPageRoute</code> 或者 <code>CupertinoPageRoute</code> 进行页面跳转时就会有自定义的过渡动画了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScaleTransitionBuilder</span> <span class="keyword">extends</span> <span class="title">PageTransitionsBuilder</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildTransitions&lt;T&gt;(</span><br><span class="line">    route,</span><br><span class="line">    context,</span><br><span class="line">    animation,</span><br><span class="line">    secondaryAnimation,</span><br><span class="line">    child,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> ScaleTransition(</span><br><span class="line">      scale: CurvedAnimation(parent: animation, curve: Curves.easeIn),</span><br><span class="line">      child: child,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: FirstPage(),</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        pageTransitionsTheme: PageTransitionsTheme(</span><br><span class="line">          builders: &#123;</span><br><span class="line">            TargetPlatform.android: ScaleTransitionBuilder(),</span><br><span class="line">            TargetPlatform.iOS: ScaleTransitionBuilder(),</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Navigator.push(context, MaterialPageRoute(builder: (ctx) =&gt; SecondPage()));</span><br></pre></td></tr></table></figure><h2 id="将动画封装成一个库"><a href="#将动画封装成一个库" class="headerlink" title="将动画封装成一个库"></a>将动画封装成一个库</h2><p>将自定义的路由过渡动画封装起来方便使用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> TransitionType &#123;</span><br><span class="line">  fade,</span><br><span class="line">  scale,</span><br><span class="line">  rotate,</span><br><span class="line">  transform,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageTransition</span> <span class="keyword">extends</span> <span class="title">PageRouteBuilder</span> </span>&#123;</span><br><span class="line">  PageTransition(TransitionType type, Widget page, <span class="built_in">Duration</span> time)</span><br><span class="line">      : <span class="keyword">super</span>(</span><br><span class="line">          pageBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionsBuilder: (</span><br><span class="line">            context,</span><br><span class="line">            animation,</span><br><span class="line">            secondaryAnimation,</span><br><span class="line">            child,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">              <span class="keyword">case</span> TransitionType.fade:</span><br><span class="line">                <span class="keyword">return</span> FadeTransition(opacity: animation, child: child);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> TransitionType.scale:</span><br><span class="line">                <span class="keyword">return</span> ScaleTransition(</span><br><span class="line">                  scale: Tween(begin: <span class="number">0.0</span>, end: <span class="number">1.0</span>).animate(</span><br><span class="line">                    CurvedAnimation(parent: animation, curve: Curves.easeInOut),</span><br><span class="line">                  ),</span><br><span class="line">                  child: child,</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> TransitionType.rotate:</span><br><span class="line">                <span class="keyword">return</span> RotationTransition(</span><br><span class="line">                  turns: CurvedAnimation(</span><br><span class="line">                    parent: animation,</span><br><span class="line">                    curve: Curves.easeInBack,</span><br><span class="line">                  ),</span><br><span class="line">                  child: child,</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> TransitionType.transform:</span><br><span class="line">                <span class="keyword">return</span> Transform(</span><br><span class="line">                  transform: Matrix4.identity()</span><br><span class="line">                    ..setEntry(<span class="number">3</span>, <span class="number">2</span>, <span class="number">0.0001</span>)</span><br><span class="line">                    ..rotateX(animation.value * pi * <span class="number">2</span>)</span><br><span class="line">                    ..rotateY(animation.value * pi * <span class="number">2</span>),</span><br><span class="line">                  alignment: FractionalOffset.center,</span><br><span class="line">                  child: child,</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> child;</span><br><span class="line">            &#125;;</span><br><span class="line">          &#125;,</span><br><span class="line">          transitionDuration: time,</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Navigator.push(</span><br><span class="line">  context,</span><br><span class="line">  PageTransition(</span><br><span class="line">    TransitionType.rotate,</span><br><span class="line">    SecondPage(),</span><br><span class="line">    <span class="built_in">Duration</span>(milliseconds: <span class="number">800</span>),</span><br><span class="line">  ),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://flutter.cn/docs/cookbook/animation/page-route-animation" target="_blank" rel="noopener">为页面切换加入动画效果</a></p><p><a href="https://medium.com/flutter-community/everything-you-need-to-know-about-flutter-page-route-transition-9ef5c1b32823" target="_blank" rel="noopener">Everything you need to know about Flutter page route transition</a></p><p><a href="https://medium.com/flutter/perspective-on-flutter-6f832f4d912e" target="_blank" rel="noopener">Perspective on Flutter</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flutter 应用进行路由跳转的时候有默认的过渡动画，但是自定义的跳转动画会让应用更具特色&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Egg.js 上传接口开发总结</title>
    <link href="https://coldstone.fun/post/2019/12/05/egg-api-dev/"/>
    <id>https://coldstone.fun/post/2019/12/05/egg-api-dev/</id>
    <published>2019-12-05T12:00:00.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下之前用 Egg.js 开发的文件上传接口的任务</p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>要在浏览器端将文件上传到阿里的 OSS 对象存储，需要用到阿里云提供的 <a href="https://github.com/ali-sdk/ali-oss" target="_blank" rel="noopener">SDK</a>，但是这样会在前端暴露 OSS 的 <code>accessKeyId</code> 和 <code>accessKeySecret</code>，这是不安全的。所以需要一个文件上传接口把前端传过来的文件上传到对象存储里面，最初只支持阿里云，之后可能会支持其它的云服务商比如七牛云。</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>后端框架用的是 Egg.js，因为比较熟悉。然后这只是一个文件上传的服务，一个路由就行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">`/<span class="subst">$&#123;app.name&#125;</span>/v1/upload`</span>, controller.oss.upload)</span><br></pre></td></tr></table></figure><p>然后实现对应的 <code>OssController</code> 的 <code>upload</code> 方法，一般的实践是在 <code>Controller</code> 层进行参数校验，这里用内置的是 <code>egg-validate</code> 插件进行校验。假如有两个参数 <code>folder</code> 和 <code>bucket</code> 代表文件上传的目录和 <code>bucket</code>，那么验证代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> body = ctx.request.body</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rules = &#123;</span><br><span class="line">  folder: &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">false</span>, <span class="attr">default</span>: <span class="string">'/'</span>, <span class="attr">trim</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  bucket: &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">false</span>, <span class="attr">default</span>:  <span class="string">'you-bucket-name'</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> ctx.validate(rules, body)</span><br></pre></td></tr></table></figure><p>接受前端的上传文件用的是 <a href="https://github.com/eggjs/egg-multipart" target="_blank" rel="noopener">egg-multipart</a> 插件，这个插件有两种模式 <code>file</code> 和 <code>stream</code>，<code>file</code> 模式适合简单的文件上传，这种模式会先将前端传来的图片存到服务器上，执行完操作后需要用 <code>ctx.cleanupRequestFiles()</code> 方法将文件删除。 <code>stream</code> 模式适合在对上传文件进一步处理的时候使用，如压缩，解压等，如果上传文件是图片那么可以将这个流传递给处理图片的库进行处理。</p><p>在 <code>config.default.js</code> 配置 <code>egg-multipart</code> 插件，在 <code>fileExtensions</code> 新增需要添加的文件类型扩展名，<code>cleanSchedule</code> 配置定时清除零时保存的文件。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config.multipart = &#123;</span><br><span class="line">  mode: <span class="string">'file'</span>,</span><br><span class="line">  fileSize: <span class="string">'50mb'</span>,</span><br><span class="line">  tmpdir: path.join(os.tmpdir(), <span class="string">'egg-multipart-tmp'</span>, appInfo.name),</span><br><span class="line">  cleanSchedule: &#123;</span><br><span class="line">    cron: <span class="string">'0 30 4 * * *'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  fileExtensions: [ <span class="string">'.pdf'</span>, <span class="string">'.doc'</span>, <span class="string">'.docx'</span> ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用 <code>ctx.request.files</code> 获取请求过来的文件，这里也需要进行验证请求是否有文件，校验好请求参数后就把请求参数传到 <code>Services</code> 层里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> files = ctx.request.files</span><br><span class="line"><span class="keyword">const</span> body = ctx.request.body</span><br><span class="line">...</span><br><span class="line">ctx.body = <span class="keyword">await</span> ctx.service.oss.upload(body, files)</span><br></pre></td></tr></table></figure><p>对应的 <code>OssService</code> 是负责主要的任务地方，新建 <code>OSS</code> 实例对象，上传文件，设置上传文件的请求头，返回上传结果。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> OSS <span class="keyword">from</span> <span class="string">'ali-oss'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ONE_YEAR = <span class="number">3600</span> * <span class="number">24</span> * <span class="number">365</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OssService</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> OssService <span class="keyword">extends</span> Service &#123;</span><br><span class="line">  <span class="keyword">private</span> client</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> createClient(option) &#123;</span><br><span class="line">      <span class="keyword">this</span>.client = <span class="keyword">new</span> OSS(&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">async</span> uploadFile(dir, file) &#123;</span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> filename = file.filename.replace(<span class="regexp">/\.(\w+)$/</span>, <span class="string">`-<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>.$1`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      result = <span class="keyword">await</span> <span class="keyword">this</span>.client.put(<span class="string">`<span class="subst">$&#123;dir&#125;</span><span class="subst">$&#123;filename&#125;</span>`</span>, file.filepath, &#123;</span><br><span class="line">        headers: &#123; <span class="string">'Cache-Control'</span>: <span class="string">`max-age=<span class="subst">$&#123;ONE_YEAR&#125;</span>`</span>, <span class="string">'Content-Disposition'</span>: <span class="string">''</span> &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.ctx.logger.error(<span class="keyword">new</span> <span class="built_in">Error</span>(e.message))</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(e.message)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      fs.unlink(file.filepath, <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> upload(parmas, files) &#123;</span><br><span class="line">    <span class="keyword">this</span>.createClient(parmas)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (files.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      result = []</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> file of files) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.uploadFile(parmas.dir, file)</span><br><span class="line"></span><br><span class="line">        result.push(&#123; url: res.url &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> file = files[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.uploadFile(parmas.dir, file)</span><br><span class="line"></span><br><span class="line">      result = &#123; url: res.url &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此上传文件到 OSS 接口基本完成了</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>Egg.js 集成了 <a href="https://github.com/visionmedia/supertest" target="_blank" rel="noopener">SuperTest</a> 测试框架，所以写接口的单元测试很方便。这个接口主要是对 <code>Controller</code> 层请求参数进行测试。测试代码写在项目目录 <code>test/app/controller/oss.test.ts</code> 文件内。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; app, assert &#125; <span class="keyword">from</span> <span class="string">'egg-mock/bootstrap'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'测试 oss controller'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">'不再白名单的 bucket 名返回错误'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> app.httpRequest()</span><br><span class="line">      .post(<span class="string">'/upload-server/v1/upload'</span>)</span><br><span class="line">      .set(<span class="string">'Content-type'</span>, <span class="string">'multipart/form-data; boundary=--------------------------820317025826519383208825'</span>)</span><br><span class="line">      .field(<span class="string">'bucket'</span>, <span class="string">'wrong-bucket'</span>)</span><br><span class="line">      .expect(<span class="number">403</span>)</span><br><span class="line"></span><br><span class="line">    assert(result.body)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'上传文件成功'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> app.httpRequest()</span><br><span class="line">      .post(<span class="string">'/upload-server/v1/upload'</span>)</span><br><span class="line">      .set(<span class="string">'Content-type'</span>, <span class="string">'multipart/form-data; boundary=--------------------------820317025826519383208825'</span>)</span><br><span class="line">      .field(<span class="string">'dir'</span>, <span class="string">'images'</span>)</span><br><span class="line">      .attach(<span class="string">'avatar'</span>, <span class="string">'test/app/controller/avatar.png'</span>)</span><br><span class="line">      .expect(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    assert(result.body)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>Egg.js 本身部署十分的方便，只需要在服务器上运行以下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egg-scripts start --daemon --env=prod --title=upload-server</span><br></pre></td></tr></table></figure><p>但是将这个服务变成一个 <code>Docker</code> <code>iamge</code> 就更方便了</p><blockquote><p>注意:<br>要用 <code>Docker</code> 运行 Egg 服务需要将 <code>package.json</code> 中 <code>scripts</code> 的 <code>start</code> 命令去掉 <code>--daemon</code> 参数，变成<br><code>egg-scripts start --env=prod --title=upload-server</code><br>因为在 <code>Docker</code> 运行 Egg 应用需要是前台模式运行</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:lts-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --update add tzdata \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk del tzdata</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /upload-server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package*.json ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install --registry=https://registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /upload-server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm run tsc &amp;&amp; npm prune --production</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> npm start</span></span><br></pre></td></tr></table></figure><p>有了镜像后，写一个运行容器的脚本，添加可执行的权限，之后启动服务就可以只用运行这个脚本即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">IMAGE_NAME=<span class="string">"upload-server"</span></span><br><span class="line">CONTAINER_NAME=<span class="string">"upload-server"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'拉取代码'</span></span><br><span class="line"></span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'运行容器'</span></span><br><span class="line"></span><br><span class="line">docker rm -f <span class="variable">$&#123;CONTAINER_NAME&#125;</span> || <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">docker build -t <span class="variable">$&#123;IMAGE_NAME&#125;</span> .</span><br><span class="line"></span><br><span class="line">docker run -d -p 7001:7001 --env-file .env --name=<span class="variable">$&#123;CONTAINER_NAME&#125;</span> <span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./deploy.sh</span><br></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./deploy.sh</span><br></pre></td></tr></table></figure><h2 id="请求频率限制"><a href="#请求频率限制" class="headerlink" title="请求频率限制"></a>请求频率限制</h2><p>为了防止接口被滥用需要限制请求接口的频率，在 Github 找到一个 <a href="https://github.com/koajs/ratelimit" target="_blank" rel="noopener">koa-ratelimit</a> 的仓库，由于 Egg.js 支持 Koa 的插件，所以也适合。</p><p>参考这个仓库的文档，在项目 <code>middleware</code> 文件添加一个 <code>ratelimit.ts</code>，用这个中间件来控制，一开始使用的 <code>redis</code> 作为 <code>driver</code> 可是遇到一个 <code>docker-compose</code> 网络链接问题始终无法解决，遂放弃，改用内存模式。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Redis <span class="keyword">from</span> <span class="string">'ioredis'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ratelimit <span class="keyword">from</span> <span class="string">'koa-ratelimit'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> Map();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> ratelimit(&#123;</span><br><span class="line">    db: db,</span><br><span class="line">    driver: <span class="string">'memory'</span>,</span><br><span class="line">    duration: <span class="number">60000</span>,</span><br><span class="line">    errorMessage: <span class="string">'请求次数超过限制'</span>,</span><br><span class="line">    id: <span class="function"><span class="params">ctx</span> =&gt;</span> ctx.ip,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      remaining: <span class="string">'Upload-Limit-Remaining'</span>,</span><br><span class="line">      reset: <span class="string">'Uplaod-Limit-Reset'</span>,</span><br><span class="line">      total: <span class="string">'Upload-Limit-Total'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    max: <span class="number">300</span>,</span><br><span class="line">    disableHeader: <span class="literal">false</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p><strong><em>上传到 OSS 的图片在浏览器无法预览变为下载</em></strong></p><p>首先阿里云规定</p><blockquote><p>对于图片文件（在未修改文件http头的情况下）：<br>若您的Bucket是2019年9月23日前创建的，使用OSS默认访问域名或自有域名生成的文件URL从浏览器访问时可以预览文件内容。<br>若您的Bucket是2019年9月23日后创建的，使用OSS默认域名生成的文件URL从浏览器访问时会以附件形式下载；使用自有域名生成的文件URL访问时，可以预览&gt; 文件内容。绑定自有域名步骤请参见绑定自定义域名。</p></blockquote><p>然后是上传的图片不能添加 <code>Content-Disposition</code> 返回头信息，给文件添加了这个 http 返回头，也会让图片变成下载。</p><hr><p><strong><em><code>egg-multipart</code> 插件使用 <code>stream</code> 模式无法获取请求体传过来的参数</em></strong></p><p>用 <code>file</code> 模式能够正确的拿到 <code>ctx.request.body</code> 里的请求参数，但是将使用 <code>stream</code> 模式就无法获取，搜索了一下后发现使用 <code>stream</code> 模式需要将上传文件放到表单的最后一项去，不然拿不到其它参数。</p><blockquote><p><a href="https://eggjs.org/zh-cn/basics/controller.html#%E8%8E%B7%E5%8F%96%E4%B8%8A%E4%BC%A0%E7%9A%84%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">https://eggjs.org/zh-cn/basics/controller.html#%E8%8E%B7%E5%8F%96%E4%B8%8A%E4%BC%A0%E7%9A%84%E6%96%87%E4%BB%B6</a><br>只支持上传一个文件。<br>上传文件必须在所有其他的 fields 后面，否则在拿到文件流时可能还获取不到 fields。</p></blockquote><hr><p><strong><em>Redis 无法链接问题</em></strong></p><p>用以下的 <code>docker-compose.yml</code> 文件启动 Egg.js 应用和一个 <code>Redis</code> 服务，然后想在上传接口的请求频率限制的中间件中使用这个 <code>Redis</code> 服务，然后一直报链接失败…Google 之后试了几种方法依然没有成功 :sad:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"6379:6379"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">upload-server-network</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">upload_server:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">upload_server</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">EGG_SERVER_ENV:prod</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7001</span><span class="string">:7001</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">upload-server-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">upload-server-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><hr><p><strong><em>Egg.js 全局错误处理返回格式问题</em></strong></p><p>Egg.js 本身有一个全局错误处理的插件 <a href="https://github.com/eggjs/egg-onerror" target="_blank" rel="noopener">egg-onerror</a>，但是用这个插件在处理上传文件的异常时，直接 <code>throw</code> 错误，返回给前端的数据格式是文本类型的，不是 json 格式，除非前端在发送请求的添加 <code>Accept: application/json</code> 请求头信息。<br>只能在 <code>config.default.js</code> 使用 <code>all</code> 进行捕获异常，然后用 <code>JSON.stringify</code> 方法在处理一遍，这样 <code>throw new Error(e.message)</code> 的时候返回给前端的才是 json。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">config.onerror = &#123;</span><br><span class="line">  all(err, ctx) &#123;</span><br><span class="line">    ctx.status = err.status || <span class="number">500</span></span><br><span class="line"></span><br><span class="line">    ctx.body = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      code: ctx.status,</span><br><span class="line">      success: <span class="literal">false</span>,</span><br><span class="line">      message: err.message,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终还是没有使用这个插件，自己添加了一个方法，进行异常捕获。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> error(msg) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  ctx.status = <span class="number">400</span></span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    code: ctx.status,</span><br><span class="line">    success: <span class="literal">false</span>,</span><br><span class="line">    message: msg,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.error(<span class="string">'错误的 bucket'</span>)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下之前用 Egg.js 开发的文件上传接口的任务&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Node" scheme="https://coldstone.fun/tags/Node/"/>
    
      <category term="Egg.js" scheme="https://coldstone.fun/tags/Egg-js/"/>
    
  </entry>
  
  <entry>
    <title>使用 Flutter 实现一个走马灯布局</title>
    <link href="https://coldstone.fun/post/2019/11/20/flutter-carousel/"/>
    <id>https://coldstone.fun/post/2019/11/20/flutter-carousel/</id>
    <published>2019-11-20T07:55:26.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>走马灯是一种常见的效果，本文讲一下如何用 <code>PageView</code> 在 <code>Flutter</code> 里实现一个走马灯</p><a id="more"></a><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>实现的效果如下，当前页面的高度比其它页面高，切换页面的时候有一个高度变化的动画。实现这样的效果主要用到的是 <code>PageView.builder</code> 部件。</p><div>  <video src="videos/heroes.mp4" controls width="320" autoplay muted /></div><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="创建首页"><a href="#创建首页" class="headerlink" title="创建首页"></a>创建首页</h3><p>首先创建一个 <code>IndexPage</code> 部件，这个部件用来放 <code>PageView</code>，因为需要使用 <code>setState</code> 方法更新 UI，所以它是 stateful 的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _IndexPageState createState() =&gt; _IndexPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_IndexPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">IndexPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        elevation: <span class="number">0.0</span>,</span><br><span class="line">        backgroundColor: Colors.white,</span><br><span class="line">      ),</span><br><span class="line">      body: Column(</span><br><span class="line">        children: &lt;Widget&gt;[],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在部件内申明一个 <code>_pageIndex</code> 变量用来保存当前显示的页面的 index，在 <code>initState</code> 生命周期里面初始化一个 <code>PageController</code> 用来配置 <code>PageView</code> 部件。</p><p>在 <code>body</code> 的 <code>Column</code> 里面创建一个 <code>PageView.builder</code>，使用一个 <code>SizedBox</code> 部件指定 <code>PageView</code> 的高度，将 <code>controller</code> 设置为 <code>_pageController</code>，在 <code>onPageChanged</code> 事件里将当前显示页面的 <code>index</code> 值赋值给 <code>_pageIndex</code> 变量。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> _pageIndex = <span class="number">0</span>;</span><br><span class="line">PageController _pageController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">  _pageController = PageController(</span><br><span class="line">    initialPage: <span class="number">0</span>,</span><br><span class="line">    viewportFraction: <span class="number">0.8</span>,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body: Column(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    SizedBox(</span><br><span class="line">      height: <span class="number">580.0</span>,</span><br><span class="line">      child: PageView.builder(</span><br><span class="line">        itemCount: <span class="number">3</span>,</span><br><span class="line">        pageSnapping: <span class="keyword">true</span>,</span><br><span class="line">        controller: _pageController,</span><br><span class="line">        onPageChanged: (<span class="built_in">int</span> index) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _pageIndex = index;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        itemBuilder: (BuildContext ctx, <span class="built_in">int</span> index) &#123;</span><br><span class="line">          <span class="keyword">return</span> _buildItem(_pageIndex, index);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure><blockquote><p>关键点: 设置 <code>PageController</code> 的 <code>viewportFraction</code> 参数小于 1，这个值是用来设置每个页面在屏幕上显示的比例，小于 1 的话，就可以在当前页面同时显示其它页面的内容了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="markdown">The fraction of the viewport that each page should occupy.</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">Defaults to 1.0, which means each page fills the viewport in the scrolling direction.</span></span></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">double</span> viewportFraction;</span><br></pre></td></tr></table></figure></blockquote><h3 id="实现-buildItem"><a href="#实现-buildItem" class="headerlink" title="实现 _buildItem"></a>实现 <code>_buildItem</code></h3><p>接着实现 <code>_buildItem</code> 方法，这个方法就是返回 <code>PageView.builder</code> 里每一个页面渲染的内容，第一个参数 <code>activeIndex</code> 是当前显示在屏幕上页面的 <code>index</code>，第二个参数 <code>index</code> 是每一项自己的 <code>index</code>。</p><p>使用一个 <code>Center</code> 部件让内容居中显示，然后用一个 <code>AnimatedContainer</code> 添加页面切换时的高度变化的动画效果，切换页面的时候使用了<code>setState</code> 方法改变了 <code>_pageIndex</code>，<code>Flutter</code> 重新绘制每一项。关键点在于判断当前页面是否为正在显示的页面，是的话它的高度就是 500 不是的话就是 450。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_buildItem(activeIndex, index) &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: AnimatedContainer(</span><br><span class="line">      curve: Curves.easeInOut,</span><br><span class="line">      duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>),</span><br><span class="line">      height: activeIndex == index ? <span class="number">500.0</span> : <span class="number">450.0</span>,</span><br><span class="line">      margin: EdgeInsets.symmetric(vertical: <span class="number">20.0</span>, horizontal: <span class="number">10.0</span>),</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        color: heroes[index].color,</span><br><span class="line">        borderRadius: BorderRadius.all(Radius.circular(<span class="number">12.0</span>)),</span><br><span class="line">      ),</span><br><span class="line">      child: Stack(),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="images/empty00.jpg" width="320"  style="width: 320px;"/><h3 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h3><p>然后给 <code>AnimatedContainer</code> 添加每一项的内容</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">child: Stack(</span><br><span class="line">  fit: StackFit.expand,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    ClipRRect(</span><br><span class="line">      borderRadius: BorderRadius.all(</span><br><span class="line">        Radius.circular(<span class="number">12.0</span>),</span><br><span class="line">      ),</span><br><span class="line">      child: Image.network(</span><br><span class="line">        heroes[index].image,</span><br><span class="line">        fit: BoxFit.cover,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    Align(</span><br><span class="line">      alignment: Alignment.bottomCenter,</span><br><span class="line">      child: Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Expanded(</span><br><span class="line">            child: Container(</span><br><span class="line">              padding: EdgeInsets.all(<span class="number">12.0</span>),</span><br><span class="line">              decoration: BoxDecoration(</span><br><span class="line">                color: Colors.black26,</span><br><span class="line">                borderRadius: BorderRadius.only(</span><br><span class="line">                  bottomRight: Radius.circular(<span class="number">12.0</span>),</span><br><span class="line">                  bottomLeft: Radius.circular(<span class="number">12.0</span>),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              child: Text(</span><br><span class="line">                heroes[index].title,</span><br><span class="line">                textAlign: TextAlign.center,</span><br><span class="line">                style: TextStyle(</span><br><span class="line">                  fontSize: <span class="number">20.0</span>,</span><br><span class="line">                  fontWeight: FontWeight.bold,</span><br><span class="line">                  color: Colors.white,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h3 id="实现指示器"><a href="#实现指示器" class="headerlink" title="实现指示器"></a>实现指示器</h3><p>然后实现页面的指示器，创建一个 <code>PageIndicator</code> 部件，需要传入 <code>pageCount</code> 表示总页数，以及 <code>currentIndex</code> 表示当前显示的页数索引。把所有指示器放在一个 <code>Row</code> 部件里，判断当前指示器的 <code>index</code> 是否为正在显示页面的 <code>index</code>，是的话显示较深的颜色。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageIndicator</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> pageCount;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> currentIndex;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> PageIndicator(<span class="keyword">this</span>.currentIndex, <span class="keyword">this</span>.pageCount);</span><br><span class="line"></span><br><span class="line">  Widget _indicator(<span class="built_in">bool</span> isActive) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">6.0</span>,</span><br><span class="line">      height: <span class="number">6.0</span>,</span><br><span class="line">      margin: EdgeInsets.symmetric(horizontal: <span class="number">3.0</span>),</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        color: isActive ? Color(<span class="number">0xff666a84</span>) : Color(<span class="number">0xffb9bcca</span>),</span><br><span class="line">        shape: BoxShape.circle,</span><br><span class="line">        boxShadow: [</span><br><span class="line">          BoxShadow(</span><br><span class="line">            color: Colors.black12,</span><br><span class="line">            offset: Offset(<span class="number">0.0</span>, <span class="number">3.0</span>),</span><br><span class="line">            blurRadius: <span class="number">3.0</span>,</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _buildIndicators() &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; indicators = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; pageCount; i++) &#123;</span><br><span class="line">      indicators.add(i == currentIndex ? _indicator(<span class="keyword">true</span>) : _indicator(<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> indicators;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Row(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: _buildIndicators(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 <code>PageIndicator</code> 到 <code>SizedBox</code> 下放</p><h3 id="封装-Carousel"><a href="#封装-Carousel" class="headerlink" title="封装 Carousel"></a>封装 <code>Carousel</code></h3><p>最后的最后优化一下代码，把部件封装一下，让它成为一个单独的部件，创建一个 <code>Carousel</code> 部件，对外暴露 <code>items</code> 和 <code>height</code> 两个属性，分别配置数据和高度。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Carousel</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span> items;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Carousel(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.items,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.height,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _CarouselState createState() =&gt; _CarouselState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CarouselState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Carousel</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _pageIndex = <span class="number">0</span>;</span><br><span class="line">  PageController _pageController;</span><br><span class="line"></span><br><span class="line">  Widget _buildItem(activeIndex, index) &#123;</span><br><span class="line">    <span class="keyword">final</span> items = widget.items;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: AnimatedContainer(</span><br><span class="line">        curve: Curves.easeInOut,</span><br><span class="line">        duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>),</span><br><span class="line">        height: activeIndex == index ? <span class="number">500.0</span> : <span class="number">450.0</span>,</span><br><span class="line">        margin: EdgeInsets.symmetric(vertical: <span class="number">20.0</span>, horizontal: <span class="number">10.0</span>),</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">          color: items[index].color,</span><br><span class="line">          borderRadius: BorderRadius.all(Radius.circular(<span class="number">12.0</span>)),</span><br><span class="line">        ),</span><br><span class="line">        child: Stack(</span><br><span class="line">          fit: StackFit.expand,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            ClipRRect(</span><br><span class="line">              borderRadius: BorderRadius.all(</span><br><span class="line">                Radius.circular(<span class="number">12.0</span>),</span><br><span class="line">              ),</span><br><span class="line">              child: Image.network(</span><br><span class="line">                items[index].image,</span><br><span class="line">                fit: BoxFit.cover,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Align(</span><br><span class="line">              alignment: Alignment.bottomCenter,</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Expanded(</span><br><span class="line">                    child: Container(</span><br><span class="line">                      padding: EdgeInsets.all(<span class="number">12.0</span>),</span><br><span class="line">                      decoration: BoxDecoration(</span><br><span class="line">                        color: Colors.black26,</span><br><span class="line">                        borderRadius: BorderRadius.only(</span><br><span class="line">                          bottomRight: Radius.circular(<span class="number">12.0</span>),</span><br><span class="line">                          bottomLeft: Radius.circular(<span class="number">12.0</span>),</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                      child: Text(</span><br><span class="line">                        items[index].title,</span><br><span class="line">                        textAlign: TextAlign.center,</span><br><span class="line">                        style: TextStyle(</span><br><span class="line">                          fontSize: <span class="number">20.0</span>,</span><br><span class="line">                          fontWeight: FontWeight.bold,</span><br><span class="line">                          color: Colors.white,</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _pageController = PageController(</span><br><span class="line">      initialPage: <span class="number">0</span>,</span><br><span class="line">      viewportFraction: <span class="number">0.8</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Container(</span><br><span class="line">          height: widget.height,</span><br><span class="line">          child: PageView.builder(</span><br><span class="line">            pageSnapping: <span class="keyword">true</span>,</span><br><span class="line">            itemCount: heroes.length,</span><br><span class="line">            controller: _pageController,</span><br><span class="line">            onPageChanged: (<span class="built_in">int</span> index) &#123;</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                _pageIndex = index;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            itemBuilder: (BuildContext ctx, <span class="built_in">int</span> index) &#123;</span><br><span class="line">              <span class="keyword">return</span> _buildItem(_pageIndex, index);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        PageIndicator(_pageIndex, widget.items.length),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在 <code>IndexPage</code> 部件里就只用实例化一个 <code>Carousel</code> 了，同时由于 <code>IndexPage</code> 不用管理部件状态了，可以将它变成 <code>StatelessWidget</code>。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Color color;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> image;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  Hero(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.color,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.image,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.title,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> heroes = [</span><br><span class="line">  Hero(</span><br><span class="line">    color: Color(<span class="number">0xFF86F3FB</span>),</span><br><span class="line">    image: <span class="string">"https://game.gtimg.cn/images/lol/act/img/skin/big22009.jpg"</span>,</span><br><span class="line">    title: <span class="string">'寒冰射手-艾希'</span>,</span><br><span class="line">  ),</span><br><span class="line">  Hero(</span><br><span class="line">    color: Color(<span class="number">0xFF7D6588</span>),</span><br><span class="line">    image: <span class="string">"https://game.gtimg.cn/images/lol/act/img/skin/big39006.jpg"</span>,</span><br><span class="line">    title: <span class="string">'刀锋舞者-艾瑞莉娅'</span>,</span><br><span class="line">  ),</span><br><span class="line">  Hero(</span><br><span class="line">    color: Color(<span class="number">0xFF4C314D</span>),</span><br><span class="line">    image: <span class="string">"https://game.gtimg.cn/images/lol/act/img/skin/big103015.jpg"</span>,</span><br><span class="line">    title: <span class="string">'九尾妖狐-阿狸'</span>,</span><br><span class="line">  ),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Carousel</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span> items;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Carousel(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.items,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.height,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _CarouselState createState() =&gt; _CarouselState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CarouselState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Carousel</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _pageIndex = <span class="number">0</span>;</span><br><span class="line">  PageController _pageController;</span><br><span class="line"></span><br><span class="line">  Widget _buildItem(activeIndex, index) &#123;</span><br><span class="line">    <span class="keyword">final</span> items = widget.items;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: AnimatedContainer(</span><br><span class="line">        curve: Curves.easeInOut,</span><br><span class="line">        duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>),</span><br><span class="line">        height: activeIndex == index ? <span class="number">500.0</span> : <span class="number">450.0</span>,</span><br><span class="line">        margin: EdgeInsets.symmetric(vertical: <span class="number">20.0</span>, horizontal: <span class="number">10.0</span>),</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">          color: items[index].color,</span><br><span class="line">          borderRadius: BorderRadius.all(Radius.circular(<span class="number">12.0</span>)),</span><br><span class="line">        ),</span><br><span class="line">        child: Stack(</span><br><span class="line">          fit: StackFit.expand,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            ClipRRect(</span><br><span class="line">              borderRadius: BorderRadius.all(</span><br><span class="line">                Radius.circular(<span class="number">12.0</span>),</span><br><span class="line">              ),</span><br><span class="line">              child: Image.network(</span><br><span class="line">                items[index].image,</span><br><span class="line">                fit: BoxFit.cover,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Align(</span><br><span class="line">              alignment: Alignment.bottomCenter,</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Expanded(</span><br><span class="line">                    child: Container(</span><br><span class="line">                      padding: EdgeInsets.all(<span class="number">12.0</span>),</span><br><span class="line">                      decoration: BoxDecoration(</span><br><span class="line">                        color: Colors.black26,</span><br><span class="line">                        borderRadius: BorderRadius.only(</span><br><span class="line">                          bottomRight: Radius.circular(<span class="number">12.0</span>),</span><br><span class="line">                          bottomLeft: Radius.circular(<span class="number">12.0</span>),</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                      child: Text(</span><br><span class="line">                        items[index].title,</span><br><span class="line">                        textAlign: TextAlign.center,</span><br><span class="line">                        style: TextStyle(</span><br><span class="line">                          fontSize: <span class="number">20.0</span>,</span><br><span class="line">                          fontWeight: FontWeight.bold,</span><br><span class="line">                          color: Colors.white,</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _pageController = PageController(</span><br><span class="line">      initialPage: <span class="number">0</span>,</span><br><span class="line">      viewportFraction: <span class="number">0.8</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Container(</span><br><span class="line">          height: widget.height,</span><br><span class="line">          child: PageView.builder(</span><br><span class="line">            pageSnapping: <span class="keyword">true</span>,</span><br><span class="line">            itemCount: heroes.length,</span><br><span class="line">            controller: _pageController,</span><br><span class="line">            onPageChanged: (<span class="built_in">int</span> index) &#123;</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                _pageIndex = index;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            itemBuilder: (BuildContext ctx, <span class="built_in">int</span> index) &#123;</span><br><span class="line">              <span class="keyword">return</span> _buildItem(_pageIndex, index);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        PageIndicator(_pageIndex, widget.items.length),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageIndicator</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> currentIndex;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> pageCount;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> PageIndicator(<span class="keyword">this</span>.currentIndex, <span class="keyword">this</span>.pageCount);</span><br><span class="line"></span><br><span class="line">  Widget _indicator(<span class="built_in">bool</span> isActive) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">6.0</span>,</span><br><span class="line">      height: <span class="number">6.0</span>,</span><br><span class="line">      margin: EdgeInsets.symmetric(horizontal: <span class="number">3.0</span>),</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        color: isActive ? Color(<span class="number">0xff666a84</span>) : Color(<span class="number">0xffb9bcca</span>),</span><br><span class="line">        shape: BoxShape.circle,</span><br><span class="line">        boxShadow: [</span><br><span class="line">          BoxShadow(</span><br><span class="line">            color: Colors.black12,</span><br><span class="line">            offset: Offset(<span class="number">0.0</span>, <span class="number">3.0</span>),</span><br><span class="line">            blurRadius: <span class="number">3.0</span>,</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _buildIndicators() &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; indicators = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; pageCount; i++) &#123;</span><br><span class="line">      indicators.add(i == currentIndex ? _indicator(<span class="keyword">true</span>) : _indicator(<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> indicators;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Row(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: _buildIndicators(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        elevation: <span class="number">0.0</span>,</span><br><span class="line">        backgroundColor: Colors.white,</span><br><span class="line">      ),</span><br><span class="line">      body: Carousel(</span><br><span class="line">        height: <span class="number">540</span>,</span><br><span class="line">        items: heroes,</span><br><span class="line">      ),</span><br><span class="line">      backgroundColor: Colors.white,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，整个布局就完成了！ 😎</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;走马灯是一种常见的效果，本文讲一下如何用 &lt;code&gt;PageView&lt;/code&gt; 在 &lt;code&gt;Flutter&lt;/code&gt; 里实现一个走马灯&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>分享两道面试题</title>
    <link href="https://coldstone.fun/post/2019/11/15/two-interview-question/"/>
    <id>https://coldstone.fun/post/2019/11/15/two-interview-question/</id>
    <published>2019-11-15T02:33:15.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>前几天遇到两个前端面试题，要写代码的那种，然后我都没做对…记录一下</p><a id="more"></a><p>前几天遇到两个前端面试题，要写代码的那种，然后我都没做对…记录一下</p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><blockquote><p>JavaScript 采用原型继承，即一个对象继承自另外一个对象，另外一个对象再继承自别的对象，依此往复。请写一个通用的 JavaScript 函数，来找出某个对象身上的某个属性继承自哪个对象。</p></blockquote><p>解答: 实际上是在考察如何判断一个对象上的属性是本身的还是通过继承来的，使用 <code>hasOwnProperty</code> 和 <code>getPrototypeOf</code> 方法即可</p><figure class="highlight javascript"><figcaption><span>get-prototype.js</span><a href="/code/get-prototype.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPrototype</span>(<span class="params">obj, key</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (obj.hasOwnProperty(key)) {</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> getPrototype(<span class="built_in">Object</span>.getPrototypeOf(obj), key)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = { <span class="attr">a</span>: <span class="string">'a'</span> }</span><br><span class="line"><span class="keyword">const</span> o1 = <span class="built_in">Object</span>.create(obj)</span><br><span class="line">o1.b = <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o1.a) <span class="comment">// a</span></span><br><span class="line"><span class="built_in">console</span>.log(o1.b) <span class="comment">// b</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o1.hasOwnProperty(<span class="string">'a'</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(o1.hasOwnProperty(<span class="string">'b'</span>)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getPrototype(o1, <span class="string">'a'</span>)) <span class="comment">// { a: 'a' }</span></span><br><span class="line"><span class="built_in">console</span>.log(getPrototype(o1, <span class="string">'b'</span>)) <span class="comment">// { b: 'b' }</span></span><br></pre></td></tr></table></figure><p>相关文章</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noopener">继承与原型链</a></p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><blockquote><p><code>URLSearchParams()</code>  可以解析和处理URL参数，目前兼容性一般，请实现 <code>class URLSearchParams</code> 的 polyfill。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">searchParams = <span class="keyword">new</span> URLSearchParams(<span class="string">"foo=1&amp;bar=2"</span>)</span><br><span class="line"><span class="comment">// 或者这样传入</span></span><br><span class="line">searchParams = <span class="keyword">new</span> URLSearchParams(&#123;<span class="attr">foo</span>: <span class="string">"1"</span>, <span class="attr">bar</span>: <span class="string">"2"</span>&#125;)</span><br><span class="line"><span class="comment">// 实例支持 get()、set()、has()、append() 四个方法</span></span><br><span class="line"><span class="comment">// 支持以下方式</span></span><br><span class="line">searchParams.get(<span class="string">"foo"</span>) <span class="comment">// 1</span></span><br><span class="line">searchParams.set(<span class="string">"foo"</span>, <span class="string">"10"</span>)</span><br><span class="line">searchParams.has(<span class="string">"bar"</span>)</span><br><span class="line">searchParams.append(<span class="string">"foo"</span>, <span class="string">"100"</span>)</span><br></pre></td></tr></table></figure></blockquote><p>解答：简单实现了下，看了 Github 上 <code>URLSearchParams</code> 的 polyfill 代码，发现这个还是有点复杂的</p><figure class="highlight javascript"><figcaption><span>url-search-params.js</span><a href="/code/url-search-params.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLSearchParams</span> </span>{</span><br><span class="line">  <span class="keyword">constructor</span> (query) {</span><br><span class="line">    <span class="keyword">this</span>._query = {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> query === <span class="string">'string'</span>) {</span><br><span class="line">      <span class="keyword">if</span> (query.startsWith(<span class="string">'?'</span>, <span class="number">0</span>)) {</span><br><span class="line">        query = query.slice(<span class="number">1</span>)</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      query.split(<span class="string">'&amp;'</span>).forEach(<span class="function"><span class="params">pair</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> params = pair.split(<span class="string">'='</span>)</span><br><span class="line">        <span class="keyword">const</span> key = params[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">const</span> val = params[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._query[key] = val</span><br><span class="line">      })</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(query)) {</span><br><span class="line">        <span class="keyword">this</span>._query[key] = query[key]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> (key) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.has(key) ? <span class="keyword">this</span>._query[key] : <span class="literal">null</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> (key, val) {</span><br><span class="line">    <span class="keyword">this</span>._query[key] = <span class="built_in">encodeURIComponent</span>(val)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  has (key) {</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> <span class="keyword">this</span>._query</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  append (key, val) {</span><br><span class="line">    <span class="keyword">const</span> value = <span class="built_in">Array</span>.isArray(val) ? val.join(<span class="string">','</span>) : val</span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> <span class="keyword">this</span>._query) {</span><br><span class="line">      <span class="keyword">this</span>._query[key].push(value)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">this</span>._query[key] = value</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._query[key]</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mysp1 = <span class="keyword">new</span> URLSearchParams(<span class="string">'a=aaa&amp;b=bbb'</span>)</span><br><span class="line"><span class="keyword">const</span> mysp2 = <span class="keyword">new</span> URLSearchParams({ <span class="attr">c</span>: <span class="string">'ccc'</span>, <span class="attr">d</span>: <span class="string">'ddd'</span> })</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mysp1) <span class="comment">// URLSearchParams { _query: { a: 'aaa', b: 'bbb' } }</span></span><br><span class="line"><span class="built_in">console</span>.log(mysp1.get(<span class="string">'a'</span>)) <span class="comment">// aaa</span></span><br><span class="line"><span class="built_in">console</span>.log(mysp1.set(<span class="string">'c'</span>, <span class="string">'ccc'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(mysp1.has(<span class="string">'d'</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(mysp1.append(<span class="string">'e'</span>, <span class="string">'eee'</span>)) <span class="comment">// eee</span></span><br><span class="line"><span class="built_in">console</span>.log(mysp1) <span class="comment">// { _query: { a: 'aaa', b: 'bbb', c: 'ccc', e: 'eee' } }</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mysp2) <span class="comment">// URLSearchParams { _query: { c: 'ccc', d: 'ddd' } }</span></span><br><span class="line"><span class="built_in">console</span>.log(mysp2.get(<span class="string">'c'</span>)) <span class="comment">// ccc</span></span><br><span class="line"><span class="built_in">console</span>.log(mysp2.set(<span class="string">'d'</span>, <span class="string">'ddd2'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(mysp2.has(<span class="string">'d'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(mysp2.append(<span class="string">'f'</span>, <span class="string">'fff'</span>)) <span class="comment">// fff</span></span><br><span class="line"><span class="built_in">console</span>.log(mysp2) <span class="comment">// URLSearchParams { _query: { c: 'ccc', d: 'ddd2', f: 'fff' } }</span></span><br></pre></td></tr></table></figure><p>相关文章</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams" target="_blank" rel="noopener">URLSearchParams docs</a></p><p><a href="https://github.com/ungap/url-search-params" target="_blank" rel="noopener">URLSearchParams polyfill</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>自己太菜了，基础知识由于没有去回顾所以忘的很多，继续加油吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天遇到两个前端面试题，要写代码的那种，然后我都没做对…记录一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://coldstone.fun/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Interview" scheme="https://coldstone.fun/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>使用 FFmpeg 转换视频格式</title>
    <link href="https://coldstone.fun/post/2019/11/11/simple-use-ffmpeg/"/>
    <id>https://coldstone.fun/post/2019/11/11/simple-use-ffmpeg/</id>
    <published>2019-11-11T12:12:26.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>用 B 站下载助手 下载下来的视频格式是 <code>flv</code>，用 QuickTime 看不了也不能导入 iMovie 进行编辑，所以需要转换一下视频格式</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用 B 站下载助手 下载下来的视频格式是 <code>flv</code>，用 QuickTime 看不了也不能导入 iMovie 进行编辑，所以需要转换一下视频格式。在搜索了很多视频格式转换工具后，发现它们大多底层是用 <a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a> 这个开源工具进行转换的，所以为什么不直接用 <code>FFmpeg</code> 它本身呢。</p><h2 id="关于-FFmpeg"><a href="#关于-FFmpeg" class="headerlink" title="关于 FFmpeg"></a>关于 FFmpeg</h2><p>官方描述：FFmpeg 是一种非常快速的视频和音频转换器，也可以从实时音频/视频源中获取。 它还可以在任意采样率之间转换，并使用高质量的多相滤波器即时调整视频大小。</p><p>转换流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> _______              ______________</span><br><span class="line">|       |            |              |</span><br><span class="line">| input |  demuxer   | encoded data |   decoder</span><br><span class="line">| file  | ---------&gt; | packets      | -----+</span><br><span class="line">|_______|            |______________|      |</span><br><span class="line">                                           v</span><br><span class="line">                                       _________</span><br><span class="line">                                      |         |</span><br><span class="line">                                      | decoded |</span><br><span class="line">                                      | frames  |</span><br><span class="line">                                      |_________|</span><br><span class="line"> ________             ______________       |</span><br><span class="line">|        |           |              |      |</span><br><span class="line">| output | &lt;-------- | encoded data | &lt;----+</span><br><span class="line">| file   |   muxer   | packets      |   encoder</span><br><span class="line">|________|           |______________|</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先安装 <code>FFmpeg</code>，macOS 可以使用 <code>homebrew</code> 安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure><p>Windows 到 <code>https://ffmpeg.zeranoe.com/builds</code> 这里下载 zip 包，然后将 <code>bin</code> 目录添加到环境变量 <code>PATH</code> 中，在命令行中运行 <code>ffmpeg</code> 命令，出现提示语即表示安装成功</p><p><img src="images/ffmpeg-hint.jpg" alt="hint"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>只需一条命令即可对视频进行格式转换，<code>-i</code> 参数表示需要转换的视频，值是视频路径，后面的是转换后的视频文件名。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 output.avi</span><br></pre></td></tr></table></figure><p>转换过程中会出现进度提示</p><p><img src="images/ffmpeg-running.jpg" alt="running"></p><ul><li><code>frame</code> 表示是转码所进行到的帧数。</li><li><code>fps</code> 表示中的 FPS 就是 Frame per Second ，是现在电脑每秒所处理的帧的数量，这个数字跟视频的帧率无关。</li><li><code>size</code> 表示已经转换出来的视频的体积。</li><li><code>time</code> 表示经转换出来的视频的时间。</li></ul><h2 id="转换参数"><a href="#转换参数" class="headerlink" title="转换参数"></a>转换参数</h2><p><code>-r</code></p><p>这个选项设置视频帧率, 单位是 Hz，也就是帧每秒 FPS，如 <code>-r 30</code> 即代表输出视频的帧率为每秒 30 帧，降低帧率可以减小视频的体积。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -r 30 output.mp4</span><br></pre></td></tr></table></figure><p><code>-s</code></p><p>默认输出的视频尺寸与原视频相同，<code>-s 720x480</code> 选项可以指定输出视频的尺寸，以像素为单位。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -s 720x480 output.mp4</span><br></pre></td></tr></table></figure><p><code>-t</code></p><p>用来指定输出文件的持续时间，以秒为单位，如截取 input.mp4 的前 30 秒并保存为 output.mp4。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -t 30 output.mp4</span><br></pre></td></tr></table></figure><p><code>-c</code></p><p>用来指定输出文件的编码，设置 <code>-c copy</code> 让 <code>FFmpeg</code> 在转换音视频时不重新进行编码，减少转换耗时。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c copy -t 30 output.mp4</span><br></pre></td></tr></table></figure><p>执行 help 命令，可以看到更多关于视频转换的选项</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p><img src="images/ffmpeg-video-opt.jpg" alt="video-options"></p><ul><li><code>-vframes</code> 设置要输出的视频帧数</li><li><code>-r</code> 速率设置帧速率（Hz值，分数或缩写）</li><li><code>-s</code> size设置帧大小（WxH或缩写）</li><li><code>-aspect</code> 宽高比设置的宽高比（4：3、16：9或1.3333、1.7777）</li><li><code>-bits_per_raw_sample</code> 设置每个原始样本的位数</li><li><code>-vn</code> 禁用视频</li><li><code>-vcodec</code> 编解码器强制视频编解码器（“复制”以复制流）</li><li><code>-timecode</code> 单位 hh：mm：ss [：;。] ff设置初始 TimeCode 值。</li><li><code>-pass n</code> 选择通过次数（1到3）</li><li><code>-vf filter_graph</code> 设置视频过滤器</li><li><code>-ab</code> 比特率音频比特率（请使用-b：a）</li><li><code>-b</code> 比特率视频比特率（请使用-b：v）</li><li><code>-dn</code> 禁用数据</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.ffmpeg.org/documentation.html" target="_blank" rel="noopener">FFmpeg Documentation</a></p><p><a href="https://wiki.fiveyellowmice.com/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8_FFmpeg_%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E8%BD%AC%E7%A0%81:%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">如何使用_FFmpeg_进行视频转码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 B 站下载助手 下载下来的视频格式是 &lt;code&gt;flv&lt;/code&gt;，用 QuickTime 看不了也不能导入 iMovie 进行编辑，所以需要转换一下视频格式&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="FFmpeg" scheme="https://coldstone.fun/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>对 Egg.js 进行单元测试</title>
    <link href="https://coldstone.fun/post/2019/11/01/eggjs-test/"/>
    <id>https://coldstone.fun/post/2019/11/01/eggjs-test/</id>
    <published>2019-11-01T04:35:00.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>优秀的代码需要有单元测试进行质量保证，每个测试用例都给应用的稳定性提供了一层保障，本文说一下如何对使用 egg.js 写的接口进行单元测试</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>优秀的代码需要有单元测试进行质量保证，每个测试用例都给应用的稳定性提供了一层保障。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>egg.js 工程的测试代码都是放在工程的 test 目录下，命名的方式为 <code>${filename}.test.js</code>，比如我想测试项目的 <code>user</code> <code>controller</code> 就在 <code>test</code> 目录下新建一个 <code>controller/user.test.js</code>，同理要测 <code>service</code> 就是创建一个 <code>service</code> 目录，然后就是写具体的测试代码了。</p><p>假设现在需要对一个 <code>UserService</code> 进行测试，首先在 <code>user.test.js</code> 中引入 <code>egg-mock</code> 模块用来创建一个 <code>app</code> 实例以及一个 <code>ctx</code> 对象，一般在请求接口的时候会在 <code>ctx</code> 对象上携带这次请求的参数和是用户信息，需要在创建 <code>ctx</code> 的时候添加所要的数据，最好的方式是 <code>before</code> 函数中，将这些数据附加到 <code>ctx</code> 上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, assert &#125; = <span class="built_in">require</span>(<span class="string">'egg-mock/bootstrap'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ctx</span><br><span class="line"></span><br><span class="line">before(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  ctx = app.mockContext(&#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      name: <span class="string">'your-name'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果还需要添加请求头信息，比如用户的 <code>token</code> 可以这样添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.request.headers = &#123;</span><br><span class="line">  authorization: yourToken</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备完毕，接下来编写具体的测试代码了，假如 <code>UserService</code> 有一个 <code>create</code> 方法，作用是创建一个新的 <code>user</code>，参数是请求体传过来的新建用户数据，那么可以这样写测试代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'create 方法返回新增用户成功信息'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    name: <span class="string">'user name'</span> + <span class="built_in">Date</span>.now(),</span><br><span class="line">    age: <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">60</span>),</span><br><span class="line">    gender: <span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> ? <span class="string">'male'</span> : <span class="string">'female'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> ctx.service.user.create(data)</span><br><span class="line"></span><br><span class="line">  assert(response.success === <span class="literal">true</span>)</span><br><span class="line">  assert(response.payload.length &gt; <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>完整的代码</p><figure class="highlight javascript"><figcaption><span>user.test.js</span><a href="/code/user.test.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { app, assert } = <span class="built_in">require</span>(<span class="string">'egg-mock/bootstrap'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'用户服务测试'</span>, () =&gt; {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ctx</span><br><span class="line"></span><br><span class="line">  before(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    ctx = app.mockContext({</span><br><span class="line">      user: {</span><br><span class="line">        name: <span class="string">'your-name'</span>,</span><br><span class="line">      },</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    ctx.request.headers = {</span><br><span class="line">      authorization: yourToken</span><br><span class="line">    };</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'create 方法返回新增用户成功信息'</span>, <span class="keyword">async</span> () =&gt; {</span><br><span class="line">    <span class="keyword">const</span> data = {</span><br><span class="line">      name: <span class="string">'user name'</span> + <span class="built_in">Date</span>.now(),</span><br><span class="line">      age: <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">60</span>),</span><br><span class="line">      gender: <span class="built_in">Math</span>.random() &gt; <span class="number">.5</span> ? <span class="string">'male'</span> : <span class="string">'female'</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> ctx.service.user.create(data);</span><br><span class="line"></span><br><span class="line">    assert(response.success === <span class="literal">true</span>);</span><br><span class="line">    assert(response.payload.length &gt; <span class="number">0</span>);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></table></figure><p>断言返回值的 <code>success</code> 为 <code>true</code>，<code>payload</code> 的 <code>length</code> 属性长度大于 0，当然这需要根据具体的业务来写，一个 <code>service</code> 可能会有很多的方法，需要尽可能多的对这些方法进行测试。</p><p>最后就是执行测试代码了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>通过命令 <code>npm run test</code> 执行 <code>egg-bin test</code>，或者在 <code>Idea</code> 添加一个测试的 <code>configuration</code> 点击执行即可，这样 <code>test</code> 目录下的所有测试都会运行。运行全部的测试耗时可能会很长或者有时只需要对一个测试文件进行测试，这时通过指定测试文件的路径即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">test</span> &lt;TestFilePath&gt;</span><br></pre></td></tr></table></figure><p>运行测试的时候会加载 <code>config.unittest.js</code> 里面的配置，运行完毕，没有通过的测试会显示具体的错误信息，可以方便的定位错误，如果测试都通过了就会出现测试通过的以及耗时信息</p><p><img src="images/egg-test.jpg" alt="test"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://eggjs.org/zh-cn/core/unittest.html" target="_blank" rel="noopener">单元测试</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;优秀的代码需要有单元测试进行质量保证，每个测试用例都给应用的稳定性提供了一层保障，本文说一下如何对使用 egg.js 写的接口进行单元测试&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Node" scheme="https://coldstone.fun/tags/Node/"/>
    
      <category term="Egg" scheme="https://coldstone.fun/tags/Egg/"/>
    
  </entry>
  
  <entry>
    <title>Docker ARG vs ENV</title>
    <link href="https://coldstone.fun/post/2019/10/25/docker-arg-vs-env/"/>
    <id>https://coldstone.fun/post/2019/10/25/docker-arg-vs-env/</id>
    <published>2019-10-25T06:12:19.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>构建 Docker 镜像的的时候有两种环境变量 <code>ARG</code> 和 <code>ENV</code>, 一种是在运行 build 命令时通过 <code>--build-arg</code> 参数设置的 build-time variables 以及通过在 <code>dockerfile</code> 里面设置 <code>ENV</code> 指令配置的环境变量。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>构建 Docker 镜像的的时候有两种环境变量 <code>ARG</code> 和 <code>ENV</code>, 一种是在运行 build 命令时通过 <code>--build-arg</code> 参数设置的 build-time variables 以及通过在 <code>dockerfile</code> 里面设置 <code>ENV</code> 指令配置的环境变量，本文说明它们之间的区别。</p><h2 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h2><p>Dockerfile 里面的 ARG 指令定义了一个变量，在运行 <code>docker build</code> 命令时使用 <code>--build-arg &lt;varname&gt; = &lt;value&gt;</code> 参数将其传递给构建器。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> &lt;name&gt;[=&lt;default value&gt;]</span><br></pre></td></tr></table></figure><p>这种变量只存在于镜像构建的时候，一旦镜像构建完成就失效了，不要使用构建时变量来传递诸如 github 密钥，用户凭据等机密数据，构建时变量值可以使用 docker history 命令查看。</p><h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><p>Dockerfile 里面的 ENV 指令将环境变量 <key> 设置为值 <value>，这个变量将在构建阶段中所有后续指令的环境中使用。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure><p>使用 ENV 设置的环境变量将一直存在于构建镜像时以及镜像容器运行时，可以使用 docker inspect 查看设置打的变量。也可以使用 <code>docker run --env &lt;key&gt; = &lt;value&gt;</code> 来更改它们。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果只是需要构建镜像时的环境变量，使用 <code>ARG</code>，如果这个变量在容器运行时也有用到就需要用 <code>ENV</code>，注意使用 <code>ENV</code> 指令定义的环境变量会覆盖同名的 <code>ARG</code> 指令定义的变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;构建 Docker 镜像的的时候有两种环境变量 &lt;code&gt;ARG&lt;/code&gt; 和 &lt;code&gt;ENV&lt;/code&gt;, 一种是在运行 build 命令时通过 &lt;code&gt;--build-arg&lt;/code&gt; 参数设置的 build-time variables 以及通过在 &lt;code&gt;dockerfile&lt;/code&gt; 里面设置 &lt;code&gt;ENV&lt;/code&gt; 指令配置的环境变量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="https://coldstone.fun/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>前端代码规范</title>
    <link href="https://coldstone.fun/post/2019/10/10/code-standard/"/>
    <id>https://coldstone.fun/post/2019/10/10/code-standard/</id>
    <published>2019-10-10T09:59:04.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>良好的代码规范有利于提高项目开发效率以及减少阅读代码的困难，本规范结合了(chaoxi)多个流行的代码规范以及前人的开发经验而成，参考规范进行开发提高代码质量</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>良好的代码规范有利于提高项目开发效率以及减少阅读代码的困难，本规范结合了(chaoxi)多个流行的代码规范以及前人的开发经验而成，参考规范进行开发提高代码质量</p><h2 id="HTML-规范"><a href="#HTML-规范" class="headerlink" title="HTML 规范"></a>HTML 规范</h2><p>设置标准模式的文档类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置页面语言</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置页面字符编码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>使用语义化的标签准确地描述网页的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>published: <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"2015-02-21"</span>&gt;</span>21st Feb, 2015<span class="tag">&lt;/<span class="name">time</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span>...<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><p>确保页面可访问性</p><ul><li>给 <code>img</code>  标签添加正确的 <code>alt</code>  属性</li><li>使用 <code>label</code>  标签对表单进行控制</li></ul><p>使用字符实体替代特殊字符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;copy;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用两个空格缩进</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按特定顺序书写标签属性</p><ol><li><code>class</code></li><li><code>id</code>, <code>name</code></li><li><code>data-*</code></li><li><code>src</code>, <code>for</code>, <code>type</code>, <code>href</code>, <code>value</code></li><li><code>title</code>, <code>alt</code></li><li><code>role</code>, <code>aria-*</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"link"</span> <span class="attr">id</span>=<span class="string">"link"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"example.jpg"</span> <span class="attr">alt</span>=<span class="string">"dog"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>不对布尔属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">selected</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS-规范"><a href="#CSS-规范" class="headerlink" title="CSS 规范"></a>CSS 规范</h2><p>全局设置盒子模型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用简洁的 class 命名</p><p>class 的命名应该尽量简洁、明确，以字母开头命名，且全部字母为小写，单词之间使用连字符 “-”  连接。<br />每个模块使用一个模块命名，子元素使用模块名 + 元素作用名名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"header-title"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用常用的 class 命名</p><p><strong>包裹类：</strong> container, wrapper, outer, inner, box, header, footer, main, content, aside, page, section, block</p><p><strong>状态类：</strong> primary, secondary, success, danger, warning, info, error, link, light, dark, disabled, active,         checked, loading</p><p><strong>尺寸类：</strong> large, middle, small, bigger, smaller</p><p><strong>组件类：</strong> card, list, picture, carousel, swiper, menu, navs, badge, hint, modal, dialog</p><p><strong>位置类：</strong> first, last, current, prev, next, forward, back</p><p><strong>文本类：</strong> title, desc, content, date, author, category，label，tag</p><p><strong>人物类：</strong> avatar, name, age, post, intro</p><table><thead><tr><th align="left">Class Name</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">about</td><td align="left">关于</td></tr><tr><td align="left">account</td><td align="left">账户</td></tr><tr><td align="left">arrow</td><td align="left">箭头图标</td></tr><tr><td align="left">article</td><td align="left">文章</td></tr><tr><td align="left">aside</td><td align="left">边栏</td></tr><tr><td align="left">audio</td><td align="left">音频</td></tr><tr><td align="left">avatar</td><td align="left">头像</td></tr><tr><td align="left">bg,background</td><td align="left">背景</td></tr><tr><td align="left">bar</td><td align="left">栏（工具类）</td></tr><tr><td align="left">branding</td><td align="left">品牌化</td></tr><tr><td align="left">crumb,breadcrumbs</td><td align="left">面包屑</td></tr><tr><td align="left">btn,button</td><td align="left">按钮</td></tr><tr><td align="left">caption</td><td align="left">标题，说明</td></tr><tr><td align="left">category</td><td align="left">分类</td></tr><tr><td align="left">chart</td><td align="left">图表</td></tr><tr><td align="left">clearfix</td><td align="left">清除浮动</td></tr><tr><td align="left">close</td><td align="left">关闭</td></tr><tr><td align="left">col,column</td><td align="left">列</td></tr><tr><td align="left">comment</td><td align="left">评论</td></tr><tr><td align="left">community</td><td align="left">社区</td></tr><tr><td align="left">container</td><td align="left">容器</td></tr><tr><td align="left">content</td><td align="left">内容</td></tr><tr><td align="left">copyright</td><td align="left">版权</td></tr><tr><td align="left">current</td><td align="left">当前态，选中态</td></tr><tr><td align="left">default</td><td align="left">默认</td></tr><tr><td align="left">description</td><td align="left">描述</td></tr><tr><td align="left">details</td><td align="left">细节</td></tr><tr><td align="left">disabled</td><td align="left">不可用</td></tr><tr><td align="left">entry</td><td align="left">文章，博文</td></tr><tr><td align="left">error</td><td align="left">错误</td></tr><tr><td align="left">even</td><td align="left">偶数，常用于多行列表或表格中</td></tr><tr><td align="left">fail</td><td align="left">失败（提示）</td></tr><tr><td align="left">feature</td><td align="left">专题</td></tr><tr><td align="left">fewer</td><td align="left">收起</td></tr><tr><td align="left">field</td><td align="left">用于表单的输入区域</td></tr><tr><td align="left">figure</td><td align="left">图</td></tr><tr><td align="left">filter</td><td align="left">筛选</td></tr><tr><td align="left">first</td><td align="left">第一个，常用于列表中</td></tr><tr><td align="left">footer</td><td align="left">页脚</td></tr><tr><td align="left">forum</td><td align="left">论坛</td></tr><tr><td align="left">gallery</td><td align="left">画廊</td></tr><tr><td align="left">group</td><td align="left">模块，清除浮动</td></tr><tr><td align="left">header</td><td align="left">页头</td></tr><tr><td align="left">help</td><td align="left">帮助</td></tr><tr><td align="left">hide</td><td align="left">隐藏</td></tr><tr><td align="left">hightlight</td><td align="left">高亮</td></tr><tr><td align="left">home</td><td align="left">主页</td></tr><tr><td align="left">icon</td><td align="left">图标</td></tr><tr><td align="left">info,information</td><td align="left">信息</td></tr><tr><td align="left">last</td><td align="left">最后一个，常用于列表中</td></tr><tr><td align="left">links</td><td align="left">链接</td></tr><tr><td align="left">login</td><td align="left">登录</td></tr><tr><td align="left">logout</td><td align="left">退出</td></tr><tr><td align="left">logo</td><td align="left">标志</td></tr><tr><td align="left">main</td><td align="left">主体</td></tr><tr><td align="left">menu</td><td align="left">菜单</td></tr><tr><td align="left">meta</td><td align="left">作者、更新时间等信息栏，一般位于标题之下</td></tr><tr><td align="left">module</td><td align="left">模块</td></tr><tr><td align="left">more</td><td align="left">更多（展开）</td></tr><tr><td align="left">msg,message</td><td align="left">消息</td></tr><tr><td align="left">nav,navigation</td><td align="left">导航</td></tr><tr><td align="left">next</td><td align="left">下一页</td></tr><tr><td align="left">nub</td><td align="left">小块</td></tr><tr><td align="left">odd</td><td align="left">奇数，常用于多行列表或表格中</td></tr><tr><td align="left">off</td><td align="left">鼠标离开</td></tr><tr><td align="left">on</td><td align="left">鼠标移过</td></tr><tr><td align="left">output</td><td align="left">输出</td></tr><tr><td align="left">pagination</td><td align="left">分页</td></tr><tr><td align="left">pop,popup</td><td align="left">弹窗</td></tr><tr><td align="left">preview</td><td align="left">预览</td></tr><tr><td align="left">previous</td><td align="left">上一页</td></tr><tr><td align="left">primary</td><td align="left">主要</td></tr><tr><td align="left">progress</td><td align="left">进度条</td></tr><tr><td align="left">promotion</td><td align="left">促销</td></tr><tr><td align="left">rcommd,recommendations</td><td align="left">推荐</td></tr><tr><td align="left">reg,register</td><td align="left">注册</td></tr><tr><td align="left">save</td><td align="left">保存</td></tr><tr><td align="left">search</td><td align="left">搜索</td></tr><tr><td align="left">secondary</td><td align="left">次要</td></tr><tr><td align="left">section</td><td align="left">区块</td></tr><tr><td align="left">selected</td><td align="left">已选</td></tr><tr><td align="left">share</td><td align="left">分享</td></tr><tr><td align="left">show</td><td align="left">显示</td></tr><tr><td align="left">sidebar</td><td align="left">边栏，侧栏</td></tr><tr><td align="left">slide</td><td align="left">幻灯片，图片切换</td></tr><tr><td align="left">sort</td><td align="left">排序</td></tr><tr><td align="left">sub</td><td align="left">次级的，子级的</td></tr><tr><td align="left">submit</td><td align="left">提交</td></tr><tr><td align="left">subscribe</td><td align="left">订阅</td></tr><tr><td align="left">subtitle</td><td align="left">副标题</td></tr><tr><td align="left">success</td><td align="left">成功（提示）</td></tr><tr><td align="left">summary</td><td align="left">摘要</td></tr><tr><td align="left">tab</td><td align="left">标签页</td></tr><tr><td align="left">table</td><td align="left">表格</td></tr><tr><td align="left">txt,text</td><td align="left">文本</td></tr><tr><td align="left">thumbnail</td><td align="left">缩略图</td></tr><tr><td align="left">time</td><td align="left">时间</td></tr><tr><td align="left">tips</td><td align="left">提示</td></tr><tr><td align="left">title</td><td align="left">标题</td></tr><tr><td align="left">video</td><td align="left">视频</td></tr><tr><td align="left">wrap</td><td align="left">容器，包，一般用于最外层</td></tr><tr><td align="left">wrapper</td><td align="left">容器，包，一般用于最外层</td></tr></tbody></table><p>不使用 ID 选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="selector-id">#title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不要为  <code>0</code>  值设置单位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遵循以下的样式书写顺序</p><ol><li>布局定位属性：position / display / float / clear / visibility / overflow</li><li>盒属性：width / height / margin / padding / border / background</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li>视觉属性：background-color / border / border-radius / box-shadow</li><li>其他属性：content / cursor /  text-shadow / background:linear-gradient</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* Positioning */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Box-model */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Typography */</span></span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">13px</span> <span class="string">'Helvetica Neue'</span>, sans-serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Visual */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Misc */</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套选择器的深度不要超过 3 层</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  .content &#123;</span><br><span class="line">    <span class="selector-class">.profile</span> &#123;</span><br><span class="line">      <span class="comment">/* STOP! */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不要使用 <code>@import</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* bad */ @import url("other.css"); /* good */</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"other.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>将媒体查询语句放在靠近相关规则最近的位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.element-avatar</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.element-selected</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.element-avatar</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.element-selected</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用简短的申明语句</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 stylelint 检查样式代码</p><p><a href="https://github.com/shinnn/vscode-stylelint" target="_blank" rel="noopener">https://github.com/shinnn/vscode-stylelint</a></p><h2 id="JS-规范"><a href="#JS-规范" class="headerlink" title="JS 规范"></a>JS 规范</h2><p>使用 const 优于 let，弃用 var</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'jack'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myVariable = <span class="string">'myVariable'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> FIRST_US_PRESIDENT = <span class="string">'George Washington'</span></span><br></pre></td></tr></table></figure><p>使用字面量创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br></pre></td></tr></table></figure><p>函数名或方法名使用动宾短语</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">userInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命名所有的方法包含闭包和回调, 避免匿名方法</p><p>命名方法和函数可以让你在代码运行出错时更快的找到错误</p><p>布尔值变量使用 is 开头的词组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> finished = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> isFinished = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>避免重复的描述对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">  carMake: <span class="string">'Honda'</span>,</span><br><span class="line">  carModel: <span class="string">'Accord'</span>,</span><br><span class="line">  carColor: <span class="string">'Blue'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> Car = &#123;</span><br><span class="line">  make: <span class="string">'Honda'</span>,</span><br><span class="line">  model: <span class="string">'Accord'</span>,</span><br><span class="line">  color: <span class="string">'Blue'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用有意义可读性好的变量名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> yyyymmdstr = moment().format(<span class="string">'YYYY/MM/DD'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">525600</span>; i++) &#123;</span><br><span class="line">  runCronJob()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> yearMonthDay = moment().format(<span class="string">'YYYY/MM/DD'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MINUTES_IN_A_YEAR = <span class="number">525600</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; MINUTES_IN_A_YEAR; i++) &#123;</span><br><span class="line">  runCronJob()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将函数参数限制 2 个以内</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">title, body, buttonText, cancellable</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> menuConfig = &#123;</span><br><span class="line">  title: <span class="string">'Foo'</span>,</span><br><span class="line">  body: <span class="string">'Bar'</span>,</span><br><span class="line">  buttonText: <span class="string">'Baz'</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">menuConfig</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装判断条件</p><p>将多个条件的判断结果赋值给一个变量或使用一个函数返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (fsm.state === <span class="string">'fetching'</span> &amp;&amp; isEmpty(listNode)) &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldShowSpinner</span>(<span class="params">fsm, listNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fsm.state === <span class="string">'fetching'</span> &amp;&amp; isEmpty(listNode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (shouldShowSpinner(fsmInstance, listNodeInstance)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>避免否定情况的判断</p><p>尽可能只使用正向的判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(!isLoading) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span>(isLoading) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除无效的代码</p><p>及时删除不再被调用的代码，避免给阅读代码带来困扰</p><p>使用 <code>try/catch</code>  语句捕获可能出现的错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow()</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// 不单单只是使用 console</span></span><br><span class="line">  <span class="built_in">console</span>.error(error)</span><br><span class="line">  <span class="comment">// 更多的错误处理</span></span><br><span class="line">  notifyUserOfError(error)</span><br><span class="line">  <span class="comment">// 报告错误</span></span><br><span class="line">  reportErrorToService(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只注释业务逻辑复杂性的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashIt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> length = data.length</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> char = data.charCodeAt(i)</span><br><span class="line">    hash = (hash &lt;&lt; <span class="number">5</span>) - hash + char</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert to 32-bit integer</span></span><br><span class="line">    hash = hash &amp; hash</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-规范"><a href="#Vue-规范" class="headerlink" title="Vue 规范"></a>Vue 规范</h2><p>将组件名命名为多个单词</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">todo.vue</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">todo-item.vue</span><br></pre></td></tr></table></figure><p>使用 PascalCase 或者 kebab-case 命名组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bad  --&gt;</span></span><br><span class="line">components/ |- mycomponent.vue components/ |- myComponent.vue</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line">components/ |- MyComponent.vue components/ |- my-component.vue</span><br></pre></td></tr></table></figure><p>详细定义组件的  Prop</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">props: [<span class="string">'status'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">props: &#123;</span><br><span class="line">   status: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 v-for 循环上加 key</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span>&gt;</span></span><br><span class="line">  &#123;&#123; todo.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span> <span class="attr">:key</span>=<span class="string">"todo.id"</span>&gt;</span></span><br><span class="line">  &#123;&#123; todo.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不要把  v-if  和  v-for  同时用在同一个元素上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"user in users"</span> <span class="attr">v-if</span>=<span class="string">"shouldShowUsers"</span> <span class="attr">:key</span>=<span class="string">"user.id"</span>&gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">"shouldShowUsers"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"user in users"</span> <span class="attr">:key</span>=<span class="string">"user.id"</span>&gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为组件样式设置作用域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-close"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.btn-close</span> &#123;</span></span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"c-button c-button--close"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 BEM 约定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.c-button</span> &#123;</span></span><br><span class="line">    border: none;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.c-button--close</span> &#123;</span></span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>组件和实例的选项使用统一的顺序</strong></p><ol><li><strong>副作用</strong>(触发组件外的影响)</li></ol><ul><li><code>el</code></li></ul><ol start="2"><li><strong>全局感知</strong>(要求组件以外的知识)</li></ol><ul><li><code>name</code></li><li><code>parent</code></li></ul><ol start="3"><li><strong>组件类型</strong>(更改组件的类型)</li></ol><ul><li><code>functional</code></li></ul><ol start="4"><li><strong>模板修改器</strong>(改变模板的编译方式)</li></ol><ul><li><code>delimiters</code></li><li><code>comments</code></li></ul><ol start="5"><li><strong>模板依赖</strong>(模板内使用的资源)</li></ol><ul><li><code>components</code></li><li><code>directives</code></li><li><code>filters</code></li></ul><ol start="6"><li><strong>组合</strong>(向选项里合并属性)</li></ol><ul><li><code>extends</code></li><li><code>mixins</code></li></ul><ol start="7"><li><strong>接口</strong>(组件的接口)</li></ol><ul><li><code>inheritAttrs</code></li><li><code>model</code></li><li><code>props</code>/<code>propsData</code></li></ul><ol start="8"><li><strong>本地状态</strong>(本地的响应式属性)</li></ol><ul><li><code>data</code></li><li><code>computed</code></li></ul><ol start="9"><li><strong>事件</strong>(通过响应式事件触发的回调)</li></ol><ul><li><code>watch</code></li><li>生命周期钩子 (按照它们被调用的顺序)<ul><li><code>beforeCreate</code></li><li><code>created</code></li><li><code>beforeMount</code></li><li><code>mounted</code></li><li><code>beforeUpdate</code></li><li><code>updated</code></li><li><code>activated</code></li><li><code>deactivated</code></li><li><code>beforeDestroy</code></li><li><code>destroyed</code></li></ul></li></ul><ol start="10"><li><strong>非响应式的属性</strong>(不依赖响应系统的实例属性)</li></ol><ul><li><code>methods</code></li></ul><ol start="11"><li><strong>渲染</strong>(组件输出的声明式描述)</li></ol><ul><li><code>template</code>/<code>render</code></li><li><code>renderError</code></li></ul><p><strong>元素和组件的特性使用统一的顺序</strong></p><ol><li><strong>定义</strong>(提供组件的选项)</li></ol><ul><li><code>is</code></li></ul><ol start="2"><li><strong>列表渲染</strong>(创建多个变化的相同元素)</li></ol><ul><li><code>v-for</code></li></ul><ol start="3"><li><strong>条件渲染</strong>(元素是否渲染/显示)</li></ol><ul><li><code>v-if</code></li><li><code>v-else-if</code></li><li><code>v-else</code></li><li><code>v-show</code></li><li><code>v-cloak</code></li></ul><ol start="4"><li><strong>渲染方式</strong>(改变元素的渲染方式)</li></ol><ul><li><code>v-pre</code></li><li><code>v-once</code></li></ul><ol start="5"><li><strong>全局感知</strong>(需要超越组件的知识)</li></ol><ul><li><code>id</code></li></ul><ol start="6"><li><strong>唯一的特性</strong>(需要唯一值的特性)</li></ol><ul><li><code>ref</code></li><li><code>key</code></li><li><code>slot</code></li></ul><ol start="7"><li><strong>双向绑定</strong>(把绑定和事件结合起来)</li></ol><ul><li><code>v-model</code></li></ul><ol start="8"><li><strong>其它特性</strong> (所有普通的绑定或未绑定的特性)<br /></li><li><strong>事件</strong>(组件事件监听器)</li></ol><ul><li><code>v-on</code></li></ul><ol start="10"><li><strong>内容</strong>(覆写元素的内容)</li></ol><ul><li><code>v-html</code></li><li><code>v-text</code></li></ul><p>保证一个组件专注于解决一个问题</p><p>确保一个组件是独立的、可复用的、微小的和可测试的</p><p>将行内表达式转为  computed</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; (new Date()).getUTCFullYear() &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; year &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">      year() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getUTCFullYear()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>尽可能使用 mixins</p><p>Mixins 封装可重用的代码，避免了重复。如果两个组件共享有相同的功能，则可以使用 mixin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HelloMixin = &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CompA</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> HelloMixin <span class="keyword">from</span> <span class="string">'./HelloMixin'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'CompA'</span>,</span><br><span class="line">    mixins: [HelloMixin]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ CompB</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  import HelloMixin from './</span>HelloMixin<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  export default &#123;</span></span><br><span class="line"><span class="string">    name: '</span>CompB<span class="string">',</span></span><br><span class="line"><span class="string">    mixins: [HelloMixin]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Node-规范"><a href="#Node-规范" class="headerlink" title="Node 规范"></a>Node 规范</h2><p>require 文件夹，而不是文件</p><p>在一个文件夹中开发库/模块，放置一个文件 index.js 暴露模块的内部</p><p>使用 .npmrc 锁住依赖版本</p><p>代码必须在所有的环境中是相同的，但是 Npm 默认情况下会拿包的最新版本，配置 .npmrc 锁定依赖版本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save-exact=true</span><br></pre></td></tr></table></figure><p>在 Node 外管理前端资源</p><p>使用专门的中间件（nginx，S3，CDN）服务前端内容，这是因为在处理大量静态文件的时候，由于 node 的单线程模型，它的性能很受影响</p><p>使用中间件限制并发请求</p><p>DOS 攻击非常流行而且相对容易处理。使用外部服务，比如 cloud 负载均衡, cloud 防火墙, nginx, 或者（对于小的，不是那么重要的 app）一个速率限制中间件(比如<a href="https://www.npmjs.com/package/express-rate-limit" target="_blank" rel="noopener">express-rate-limit</a>)，来实现速率限制。否则应用程序可能受到攻击, 导致拒绝服务, 在这种情况下, 真实用户会遭受服务降级或不可用。</p><p>验证传入的 JSON schemas</p><p>验证传入请求的 body payload，并确保其符合预期要求, 如果没有, 则快速报错。为了避免每个路由中繁琐的验证编码, 您可以使用基于 JSON 的轻量级验证架构，比如  <a href="https://www.npmjs.com/package/jsonschema" target="_blank" rel="noopener">jsonschema</a> or <a href="https://www.npmjs.com/package/joi" target="_blank" rel="noopener">joi</a>，否则您疏忽和宽松的方法大大增加了攻击面, 并鼓励攻击者尝试许多输入, 直到他们找到一些组合, 使应用程序崩溃。</p><p>使用非 root 用户运行 Node.js</p><p>Node.js 作为一个具有无限权限的 root 用户运行，这是一种普遍的情景。例如，在 Docker 容器中，这是默认行为。建议创建一个非 root 用户，并保存到 Docker 镜像中（下面给出了示例），或者通过调用带有”-u username” 的容器来代表此用户运行该进程，否则在服务器上运行脚本的攻击者在本地计算机上获得无限制的权利 (例如，改变 iptable，引流到他的服务器上)</p><h2 id="其它规范"><a href="#其它规范" class="headerlink" title="其它规范"></a>其它规范</h2><p>使用 jest 进行单元测试</p><p>通常只要求对一些基础/底层的组件、函数进行测试, 视情况考虑是否要测试业务代码</p><p>使用 <a href="https://link.juejin.im/?target=https%3A%2F%2Fprettier.io">Prettier</a>  格式化代码</p><p><br />所有代码格式相关的工作都可以交给 Prettier 来做</p><p>合理的图片命名</p><p>图片业务 + 图片功能类别 + 图片模块名称 + 图片精度</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://codeguide.co" target="_blank" rel="noopener">Code Guide</a></li><li><a href="https://guide.aotu.io/" target="_blank" rel="noopener">O2 前端规范文档</a></li><li><a href="https://github.com/alivebao/clean-code-js" target="_blank" rel="noopener">JavaScript 风格指南</a></li><li><a href="https://cn.vuejs.org/v2/style-guide/" target="_blank" rel="noopener">Vue  风格指南</a></li><li><a href="https://github.com/pablohpsilva/vuejs-component-style-guide/blob/master/README-CN.md" target="_blank" rel="noopener">Vue.js 组件编码规范</a></li><li><a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md" target="_blank" rel="noopener">Node.js 最佳实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;良好的代码规范有利于提高项目开发效率以及减少阅读代码的困难，本规范结合了(chaoxi)多个流行的代码规范以及前人的开发经验而成，参考规范进行开发提高代码质量&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Standard" scheme="https://coldstone.fun/tags/Standard/"/>
    
  </entry>
  
  <entry>
    <title>使用 Intl 对象进行日期时间格式化</title>
    <link href="https://coldstone.fun/post/2019/10/05/js-intl/"/>
    <id>https://coldstone.fun/post/2019/10/05/js-intl/</id>
    <published>2019-10-05T04:04:00.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要说明如何使用浏览器自带的 Intl 对象进行日期时间的格式化</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时项目中要对日期时间格式化通常会使用如 <a href="https://github.com/iamkun/dayjs" target="_blank" rel="noopener">dayjs</a>，<a href="https://github.com/date-fns/date-fns" target="_blank" rel="noopener">date-fns</a>，<a href="https://github.com/moment/moment" target="_blank" rel="noopener">moment</a> 这些第三方库，但是我们可能只需要某几个方法，却安装了一整个库，大大增加了项目的体积，具体可以看这篇文章的数据 <a href="https://github.com/you-dont-need/You-Dont-Need-Momentjs" target="_blank" rel="noopener">You-Dont-Need-Momentjs</a>。本文主要说明如何使用浏览器自带的 Intl 对象进行日期时间的格式化</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noopener">MDN</a></p><blockquote><p>Intl 对象是 ECMAScript 国际化 API 的一个命名空间，它提供了精确的字符串对比、数字格式化，和日期时间格式化。Collator，NumberFormat 和 DateTimeFormat 对象的构造函数是 Intl 对象的属性。本页文档内容包括了这些属性，以及国际化使用的构造器和其他语言的方法等常见的功能。</p></blockquote><h2 id="日期时间格式化"><a href="#日期时间格式化" class="headerlink" title="日期时间格式化"></a>日期时间格式化</h2><p>要对日期时间格式化就要使用 <code>Intl.DateTimeFormat</code> 对象，它是根据语言来格式化日期和时间的构造函数。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>第一个参数是语言代码，第二个参数是构造函数的选项，都是可选的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat([locales[, options]])</span><br></pre></td></tr></table></figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">'en-US'</span>).format(date))</span><br><span class="line"><span class="comment">// "10/8/2019"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">'zh-CN'</span>).format(date))</span><br><span class="line"><span class="comment">// "2019/10/8"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">'zh-CN'</span>, &#123;</span><br><span class="line">    year: <span class="string">'numeric'</span>,</span><br><span class="line">    month: <span class="string">'numeric'</span>,</span><br><span class="line">    day: <span class="string">'numeric'</span>,</span><br><span class="line">    weekday: <span class="string">'long'</span>,</span><br><span class="line">    hour: <span class="string">'numeric'</span>,</span><br><span class="line">    minute: <span class="string">'numeric'</span>,</span><br><span class="line">    second: <span class="string">'numeric'</span>,</span><br><span class="line">    hour12: <span class="literal">false</span></span><br><span class="line">  &#125;).format(date)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// "2019年10月8日星期二 15:07:04"</span></span><br></pre></td></tr></table></figure><h3 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h3><p>参考文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" target="_blank" rel="noopener">Intl.DateTimeFormat</a></p><h2 id="相对时间格式化"><a href="#相对时间格式化" class="headerlink" title="相对时间格式化"></a>相对时间格式化</h2><p>使用 Intl.RelativeTimeFormat 对相对时间进行格式化</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>同上，第一个参数是语言代码，第二个参数是构造函数的选项，都是可选的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Intl</span>.RelativeTimeFormat([locales[, options]])</span><br></pre></td></tr></table></figure><h3 id="简单使用-1"><a href="#简单使用-1" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rtf = <span class="keyword">new</span> <span class="built_in">Intl</span>.RelativeTimeFormat(<span class="string">'zh-CN'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rtf.format(<span class="number">-3</span>, <span class="string">'day'</span>))</span><br><span class="line"><span class="comment">// "3天前"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rtf.format(<span class="number">3</span>, <span class="string">'day'</span>))</span><br><span class="line"><span class="comment">// "3天后"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rtf.format(<span class="number">3</span>, <span class="string">'minute'</span>))</span><br><span class="line"><span class="comment">// "3分钟后"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rtf.format(<span class="number">-3</span>, <span class="string">'second'</span>))</span><br><span class="line"><span class="comment">// "3秒钟前"</span></span><br></pre></td></tr></table></figure><h3 id="详细使用-1"><a href="#详细使用-1" class="headerlink" title="详细使用"></a>详细使用</h3><p>参考文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat#%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">Intl.RelativeTimeFormat</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhangxinxu.com/wordpress/2019/09/js-intl-zh/" target="_blank" rel="noopener">Intl</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noopener">JS Intl 对象完整简介及在中文中的应用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要说明如何使用浏览器自带的 Intl 对象进行日期时间的格式化&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JS" scheme="https://coldstone.fun/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法之集合</title>
    <link href="https://coldstone.fun/post/2019/10/01/dsa-set/"/>
    <id>https://coldstone.fun/post/2019/10/01/dsa-set/</id>
    <published>2019-10-01T02:46:48.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>集合是一种包含不同元素的数据结构，集合中的元素称之为成员。集合有两个重要的特性，一是集合中的成员是无序的，其次集合中不存在相同的成员。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>集合是一种包含不同元素的数据结构，集合中的元素称之为成员。集合有两个重要的特性，一是集合中的成员是无序的，其次集合中不存在相同的成员。</p><h2 id="关于集合"><a href="#关于集合" class="headerlink" title="关于集合"></a>关于集合</h2><p>不包含任何成员的集合称为空集，全集则是包含可能一切成员的集合。<br>如果两个集合的成员完全相等，则两个集合相等。<br>如果一个集合的所有成员都属于另一个集合，则认为这个集合是另一个集合的子集。<br>并集-将两个集合的成员合并的操作。<br>交集-将两个集合共有的成员组成一个新的集合。<br>补集-属于一个集合而不属于另一个集合的成员。</p><h2 id="实现集合"><a href="#实现集合" class="headerlink" title="实现集合"></a>实现集合</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MySet &#123;</span><br><span class="line">  data = &lt;<span class="built_in">any</span>&gt;[]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.data.indexOf(element) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.data.push(element)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  remove(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.data.indexOf(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.data.splice(index, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  contains(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.data.indexOf(element) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 并集</span></span><br><span class="line">  uinon(<span class="keyword">set</span>: MySet) &#123;</span><br><span class="line">    <span class="keyword">const</span> newSet = <span class="keyword">new</span> MySet()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.data.forEach(<span class="function">(<span class="params">e: <span class="built_in">any</span></span>) =&gt;</span> newSet.add(e))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="keyword">set</span>.data.length; index++) &#123;</span><br><span class="line">      <span class="keyword">const</span> ele = <span class="keyword">set</span>.data[index]</span><br><span class="line">      <span class="keyword">if</span> (!newSet.contains(ele)) &#123;</span><br><span class="line">        newSet.add(ele)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newSet</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 交集</span></span><br><span class="line">  intersect(<span class="keyword">set</span>: MySet) &#123;</span><br><span class="line">    <span class="keyword">const</span> newSet = <span class="keyword">new</span> MySet()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.data.forEach(<span class="function">(<span class="params">ele: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">set</span>.contains(ele)) &#123;</span><br><span class="line">        newSet.add(ele)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> newSet</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否是补集</span></span><br><span class="line">  subset(<span class="keyword">set</span>: MySet) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.size &gt; <span class="keyword">set</span>.size) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="keyword">this</span>.data.length; index++) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = <span class="keyword">this</span>.data[index]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">set</span>.contains(element)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回集合中不同的成员</span></span><br><span class="line">  difference(<span class="keyword">set</span>: MySet) &#123;</span><br><span class="line">    <span class="keyword">const</span> newSet = <span class="keyword">new</span> MySet()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="keyword">this</span>.data.length; index++) &#123;</span><br><span class="line">      <span class="keyword">const</span> element = <span class="keyword">this</span>.data[index]</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">set</span>.contains(element)) &#123;</span><br><span class="line">        newSet.add(element)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newSet</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.forEach(<span class="function">(<span class="params">e: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">console</span>.log(e))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setOne = <span class="keyword">new</span> MySet()</span><br><span class="line"></span><br><span class="line">setOne.add(<span class="string">'a'</span>)</span><br><span class="line">setOne.add(<span class="string">'b'</span>)</span><br><span class="line">setOne.add(<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setTwo = <span class="keyword">new</span> MySet()</span><br><span class="line"></span><br><span class="line">setTwo.add(<span class="string">'c'</span>)</span><br><span class="line">setTwo.add(<span class="string">'d'</span>)</span><br><span class="line">setTwo.add(<span class="string">'e'</span>)</span><br><span class="line">setTwo.add(<span class="string">'f'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setThree = setOne.uinon(setTwo)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'合集'</span>)</span><br><span class="line">setThree.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合集</span></span><br><span class="line"><span class="comment">// a b c d e f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setFour = setOne.intersect(setTwo)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'交集'</span>)</span><br><span class="line">setFour.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isSubset = setOne.subset(setTwo)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'是否是补集'</span>, isSubset)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否是补集 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setSix = setOne.difference(setTwo)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'查看集合中不同的成员'</span>)</span><br><span class="line">setSix.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看集合中不同的成员</span></span><br><span class="line"><span class="comment">// a b</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;集合是一种包含不同元素的数据结构，集合中的元素称之为成员。集合有两个重要的特性，一是集合中的成员是无序的，其次集合中不存在相同的成员。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DSA" scheme="https://coldstone.fun/tags/DSA/"/>
    
  </entry>
  
  <entry>
    <title>使用 Provider 管理 Flutter 应用状态 (下)</title>
    <link href="https://coldstone.fun/post/2019/09/23/flutter-provider-todos-02/"/>
    <id>https://coldstone.fun/post/2019/09/23/flutter-provider-todos-02/</id>
    <published>2019-09-23T08:17:17.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>为了存储数据可以将数据存到手机的存储里面或者存到远程服务器上，本文就实现如何使用 dio 将数据存到服务器</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>紧接上篇，对于一个代办事项的新增，修改，删除功能都已经完成了，但是数据都是保存在内存中的，重新启动应用数据就重置了，为了存储数据可以将数据存到手机的存储里面或者存到远程服务器上，本文就实现如何使用 <a href="https://github.com/flutterchina/dio" target="_blank" rel="noopener">dio</a> 将数据存到服务器</p><p><a href="https://github.com/xrr2016/flutter_provider_todos/tree/http" target="_blank" rel="noopener">源码地址</a></p><h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><p>在 <code>pubspec.yaml</code> 添加 dio 依赖；一个存储数据的服务，我用的是 <a href="https://jsonbox.io/" target="_blank" rel="noopener">jsonbox</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">dio:</span> <span class="string">^3.0.1</span></span><br></pre></td></tr></table></figure><h2 id="配置-dio"><a href="#配置-dio" class="headerlink" title="配置 dio"></a>配置 dio</h2><p>由于这个应用只有一个服务地址，所以创建一个 dio 的单例来进行请求就很好了，新建一个 request.dart 文件配置 dio，使用一个函数返回创建的 dio 实例</p><ul><li>设置基础的请求地址</li><li>设置请求超时时间</li><li>设置在调试控制台输出请求响应体方便查看请求</li></ul><p>基本设置下就可以用了，其它设置可以查看 dio 的<a href="https://pub.flutter-io.cn/packages/dio" target="_blank" rel="noopener">文档</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:dio/dio.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DB_URL = <span class="string">'https://jsonbox.io/box_7ea9df49e805cf99509b'</span>;</span><br><span class="line"></span><br><span class="line">Dio craeteDio() &#123;</span><br><span class="line">  BaseOptions options = BaseOptions(</span><br><span class="line">    baseUrl: DB_URL,</span><br><span class="line">    connectTimeout: <span class="number">5000</span>,</span><br><span class="line">    receiveTimeout: <span class="number">3000</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  Dio dio = Dio(options);</span><br><span class="line"></span><br><span class="line">  dio.interceptors.add(LogInterceptor(</span><br><span class="line">    error: <span class="keyword">true</span>,</span><br><span class="line">    request: <span class="keyword">false</span>,</span><br><span class="line">    responseBody: <span class="keyword">true</span>,</span><br><span class="line">    responseHeader: <span class="keyword">false</span>,</span><br><span class="line">    requestHeader: <span class="keyword">false</span>,</span><br><span class="line">  ));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dio;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改-Todo-模型"><a href="#修改-Todo-模型" class="headerlink" title="修改 Todo 模型"></a>修改 Todo 模型</h2><p>由于需要从服务器上获取 todo 数据，服务返回的数据是 json 格式，所以需要在拿到数据的时候将单个 todo 的 json 数据转成 Todo 实例，新建一个 model/todo.dart 文件，比之前多的是两个方法而已，<code>fromJson</code> 这个工厂函数作用是使用 json 数据实例化一个 Todo，<code>toJson</code> 方法用来将一个 Todo 转成一个 Map 结构的数据</p><p>如果一个模型的字段较少可以手写，但是当字段较多比较复杂的时候就需要使用工具来帮助生成代码了，我使用的是 <a href="https://app.quicktype.io/" target="_blank" rel="noopener">quicktype</a> 这个工具</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> id;</span><br><span class="line">  <span class="built_in">bool</span> finish;</span><br><span class="line">  <span class="built_in">String</span> thing;</span><br><span class="line"></span><br><span class="line">  Todo(&#123;</span><br><span class="line">    <span class="keyword">this</span>.id,</span><br><span class="line">    <span class="keyword">this</span>.thing,</span><br><span class="line">    <span class="keyword">this</span>.finish,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Todo.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; Todo(</span><br><span class="line">        id: json[<span class="string">"_id"</span>].toString(),</span><br><span class="line">        thing: json[<span class="string">"thing"</span>],</span><br><span class="line">        finish: json[<span class="string">"finish"</span>],</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; &#123;</span><br><span class="line">        <span class="string">"id"</span>: id,</span><br><span class="line">        <span class="string">"thing"</span>: thing,</span><br><span class="line">        <span class="string">"finish"</span>: finish,</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p>配置好 dio 就可以在 todos.dart 向服务器发送请求了，修改 store/todos.dart，给 Todos 类添加了一个 _dio 属性用来发送请求，一个 getTodos 方法用来获取全部 todo 的列表数据，然后修改 addTodo，removeTodo，editTodo 方法使用 _dio 向服务器发送 post，delete，put 请求。</p><p>需要注意的一点是将 json 转换成实例的问题，很容易就会出现类似</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type <span class="string">'List&lt;dynamic&gt;'</span> <span class="keyword">is</span> not a subtype of type <span class="string">'List&lt;Todo&gt;'</span></span><br></pre></td></tr></table></figure><p>这种错误，这种都是类型转换的问题，我看了一篇文章后才算弄懂了一点 <a href="https://medium.com/flutter-community/parsing-complex-json-in-flutter-747c46655f51" target="_blank" rel="noopener">parsing-complex-json-in-flutter</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:dio/dio.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/foundation.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../request.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../model/todo.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todos</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Todo&gt; _items = [];</span><br><span class="line"></span><br><span class="line">  Dio _dio = craeteDio();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> items &#123;</span><br><span class="line">    <span class="keyword">return</span> [..._items];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> refresh() &#123;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="built_in">List</span>&gt; getTodos() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Response response = <span class="keyword">await</span> _dio.<span class="keyword">get</span>(<span class="string">'/todos'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> list = response.data <span class="keyword">as</span> <span class="built_in">List</span>;</span><br><span class="line">      _items = <span class="built_in">List</span>&lt;Todo&gt;.from(list.map((i) =&gt; Todo.fromJson(i)).toList());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> items;</span><br><span class="line">    &#125; <span class="keyword">on</span> DioError <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future addTodo(<span class="built_in">String</span> thing) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Response response = <span class="keyword">await</span> _dio.post(<span class="string">'/todos'</span>, data: &#123;</span><br><span class="line">        <span class="string">"thing"</span>: thing,</span><br><span class="line">        <span class="string">"finish"</span>: <span class="keyword">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      Todo todo = Todo(</span><br><span class="line">        thing: thing,</span><br><span class="line">        id: response.data[<span class="string">"_id"</span>],</span><br><span class="line">        finish: response.data[<span class="string">"finish"</span>],</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      _items.insert(<span class="number">0</span>, todo);</span><br><span class="line">      refresh();</span><br><span class="line">    &#125; <span class="keyword">on</span> DioError <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future removeTodo(<span class="built_in">int</span> index) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">String</span> todoId = _items[index].id;</span><br><span class="line">      <span class="keyword">await</span> _dio.delete(<span class="string">"/todos/<span class="subst">$todoId</span>"</span>);</span><br><span class="line">      _items.removeAt(index);</span><br><span class="line">      refresh();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future editTodo(<span class="built_in">int</span> index, <span class="built_in">String</span> thing, <span class="built_in">bool</span> finish) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> todoId = _items[index].id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> _dio.put(<span class="string">"/todos/<span class="subst">$todoId</span>"</span>, data: &#123;</span><br><span class="line">        <span class="string">"thing"</span>: thing,</span><br><span class="line">        <span class="string">"finish"</span>: finish,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      Todo todo = _items[index];</span><br><span class="line">      todo.thing = thing;</span><br><span class="line">      todo.finish = finish;</span><br><span class="line">      refresh();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> toggleFinish(<span class="built_in">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">final</span> todo = _items[index];</span><br><span class="line">    todo.finish = !todo.finish;</span><br><span class="line"></span><br><span class="line">    refresh();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> isTodoExist(<span class="built_in">String</span> thing) &#123;</span><br><span class="line">    <span class="built_in">bool</span> isExist = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _items.length; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> todo = _items[i];</span><br><span class="line">      <span class="keyword">if</span> (todo.thing == thing) &#123;</span><br><span class="line">        isExist = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isExist;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用数据"><a href="#使用数据" class="headerlink" title="使用数据"></a>使用数据</h2><p>有了数据后就可以在列表页使用了，由于现在数据是从服务器返回的，会有请求耗时，所以需要使用 <code>FutureBuilder</code> 这个部件渲染列表，<code>FutureBuilder</code> 需要一个设置一个 future 来判断状态，这里自然是 Todos 类的 <code>getTodos</code> 方法返回的 Future 对象，然后 builder 就是一个函数，有两个参数，一个是 context 上下文对象，一个是 snapshot 对象，表示的是这个 future 的状态。</p><p>在 builder 方法里面用一个 switch 语句判断这个 future 的状态，根据状态返回需要渲染的部件，有以下几种状态 none（状态不存在），active（运行中），waiting（等待中），done（完成），如果都不匹配就，返回一个 null 值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'store/todos.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'widget/add_todo_button.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'widget/edit_todo_button.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'widget/remove_todo_button.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodosPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Flutter Provider Todos'</span>)),</span><br><span class="line">      body: FutureBuilder(</span><br><span class="line">        future: Provider.of&lt;Todos&gt;(context).getTodos(),</span><br><span class="line">        builder: (context, snapshot) &#123;</span><br><span class="line">          <span class="keyword">switch</span> (snapshot.connectionState) &#123;</span><br><span class="line">            <span class="keyword">case</span> ConnectionState.none:</span><br><span class="line">              <span class="keyword">return</span> Text(<span class="string">'Press button to start.'</span>);</span><br><span class="line">            <span class="keyword">case</span> ConnectionState.active:</span><br><span class="line">            <span class="keyword">case</span> ConnectionState.waiting:</span><br><span class="line">              <span class="keyword">return</span> Center(child: CircularProgressIndicator());</span><br><span class="line">            <span class="keyword">case</span> ConnectionState.done:</span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                <span class="built_in">print</span>(snapshot.error);</span><br><span class="line">                <span class="keyword">return</span> Center(</span><br><span class="line">                  child: Text(</span><br><span class="line">                    <span class="string">'出错了，请重试'</span>,</span><br><span class="line">                    style: TextStyle(fontSize: <span class="number">18.0</span>, color: Colors.red),</span><br><span class="line">                  ),</span><br><span class="line">                );</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="built_in">List</span> items = snapshot.data;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (items == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Center(</span><br><span class="line">                  child: Text(</span><br><span class="line">                    <span class="string">'还没有代办事项，快去添加吧'</span>,</span><br><span class="line">                    style: TextStyle(fontSize: <span class="number">18.0</span>),</span><br><span class="line">                  ),</span><br><span class="line">                );</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">return</span> ListView.builder(</span><br><span class="line">                  itemCount: items.length,</span><br><span class="line">                  itemBuilder: (_, index) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Column(</span><br><span class="line">                      children: &lt;Widget&gt;[</span><br><span class="line">                        ListTile(</span><br><span class="line">                          title: Text(</span><br><span class="line">                            items[index].thing,</span><br><span class="line">                            style: TextStyle(</span><br><span class="line">                              color: items[index].finish</span><br><span class="line">                                  ? Colors.green</span><br><span class="line">                                  : Colors.grey,</span><br><span class="line">                            ),</span><br><span class="line">                          ),</span><br><span class="line">                          trailing: Container(</span><br><span class="line">                            width: <span class="number">150</span>,</span><br><span class="line">                            child: Row(</span><br><span class="line">                              mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">                              children: &lt;Widget&gt;[</span><br><span class="line">                                EditTodoButton(todoIndex: index),</span><br><span class="line">                                RemoveTodoButton(todoIndex: index),</span><br><span class="line">                              ],</span><br><span class="line">                            ),</span><br><span class="line">                          ),</span><br><span class="line">                        ),</span><br><span class="line">                        Divider(),</span><br><span class="line">                      ],</span><br><span class="line">                    );</span><br><span class="line">                  &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: Consumer&lt;Todos&gt;(</span><br><span class="line">        builder: (_, todos, child) &#123;</span><br><span class="line">          <span class="keyword">return</span> AddTodoButton();</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改按钮"><a href="#修改按钮" class="headerlink" title="修改按钮"></a>修改按钮</h2><p>接下来就是需要修改新增，编辑，删除代办的按钮了，同理由于现在需要跟服务端进行通信，所以需要根据请求状态来处理逻辑，主要的修改就是使用 <code>async/await</code> 语法等到一个请求完成后，根据返回值进行处理。</p><p>添加 Todo 按钮</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../store/todos.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddTodoButton</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AddTodoButtonState createState() =&gt; _AddTodoButtonState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AddTodoButtonState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AddTodoButton</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _formKey = GlobalKey&lt;FormState&gt;();</span><br><span class="line">  <span class="keyword">final</span> _controller = TextEditingController();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _formKey.currentState.dispose();</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Consumer&lt;Todos&gt;(</span><br><span class="line">      builder: (_, todos, child) &#123;</span><br><span class="line">        _addTodo() <span class="keyword">async</span> &#123;</span><br><span class="line">          <span class="keyword">final</span> isValid = _formKey.currentState.validate();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!isValid) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">final</span> thing = _controller.value.text;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> todos.addTodo(thing);</span><br><span class="line">            Navigator.pop(context);</span><br><span class="line">            _controller.clear();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            Scaffold.of(context).showSnackBar(</span><br><span class="line">              SnackBar(content: Text(<span class="string">'新增代办失败了，请重试。'</span>)),</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> FloatingActionButton(</span><br><span class="line">          child: Icon(Icons.add),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'add todo'</span>);</span><br><span class="line">            <span class="keyword">return</span> showDialog(</span><br><span class="line">              context: context,</span><br><span class="line">              builder: (BuildContext _) &#123;</span><br><span class="line">                <span class="keyword">return</span> SimpleDialog(</span><br><span class="line">                  title: Text(<span class="string">'添加 Todo'</span>),</span><br><span class="line">                  contentPadding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">24.0</span>),</span><br><span class="line">                  children: &lt;Widget&gt;[</span><br><span class="line">                    Form(</span><br><span class="line">                      key: _formKey,</span><br><span class="line">                      child: Column(</span><br><span class="line">                        children: &lt;Widget&gt;[</span><br><span class="line">                          TextFormField(</span><br><span class="line">                            autofocus: <span class="keyword">true</span>,</span><br><span class="line">                            autovalidate: <span class="keyword">false</span>,</span><br><span class="line">                            controller: _controller,</span><br><span class="line">                            keyboardType: TextInputType.text,</span><br><span class="line">                            decoration: InputDecoration(</span><br><span class="line">                              border: OutlineInputBorder(),</span><br><span class="line">                              labelText: <span class="string">'输入你想做的事'</span>,</span><br><span class="line">                            ),</span><br><span class="line">                            validator: (val) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (val.isEmpty) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="string">'想做的事不能为空'</span>;</span><br><span class="line">                              &#125;</span><br><span class="line"></span><br><span class="line">                              <span class="built_in">bool</span> isExist = todos.isTodoExist(val);</span><br><span class="line"></span><br><span class="line">                              <span class="keyword">if</span> (isExist) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="string">'这件事情已经存在了'</span>;</span><br><span class="line">                              &#125;</span><br><span class="line">                              <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ),</span><br><span class="line">                          SizedBox(height: <span class="number">20</span>),</span><br><span class="line">                          Row(</span><br><span class="line">                            mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">                            children: &lt;Widget&gt;[</span><br><span class="line">                              FlatButton(</span><br><span class="line">                                child: Text(<span class="string">'取消'</span>),</span><br><span class="line">                                onPressed: () &#123;</span><br><span class="line">                                  Navigator.pop(context);</span><br><span class="line">                                &#125;,</span><br><span class="line">                              ),</span><br><span class="line">                              RaisedButton(</span><br><span class="line">                                child: Text(</span><br><span class="line">                                  <span class="string">'确定'</span>,</span><br><span class="line">                                  style: TextStyle(color: Colors.white),</span><br><span class="line">                                ),</span><br><span class="line">                                color: Theme.of(context).primaryColor,</span><br><span class="line">                                onPressed: _addTodo,</span><br><span class="line">                              ),</span><br><span class="line">                            ],</span><br><span class="line">                          ),</span><br><span class="line">                        ],</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ],</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑 Todo 按钮</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../model/todo.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../store/todos.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditTodoButton</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> todoIndex;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> EditTodoButton(&#123;Key key, <span class="keyword">this</span>.todoIndex&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _EditTodoButtonState createState() =&gt; _EditTodoButtonState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_EditTodoButtonState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">EditTodoButton</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _formKey = GlobalKey&lt;FormState&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _formKey?.currentState?.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Consumer&lt;Todos&gt;(</span><br><span class="line">      builder: (context, todos, child) &#123;</span><br><span class="line">        <span class="keyword">final</span> todoIndex = widget.todoIndex;</span><br><span class="line">        <span class="keyword">final</span> Todo todo = todos.items[todoIndex];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> IconButton(</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          icon: Icon(Icons.edit),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            <span class="keyword">return</span> showDialog(</span><br><span class="line">              context: context,</span><br><span class="line">              builder: (_) &#123;</span><br><span class="line">                <span class="keyword">return</span> SimpleDialog(</span><br><span class="line">                  title: Text(<span class="string">'编辑 Todo'</span>),</span><br><span class="line">                  contentPadding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">24.0</span>),</span><br><span class="line">                  children: &lt;Widget&gt;[</span><br><span class="line">                    Form(</span><br><span class="line">                      key: _formKey,</span><br><span class="line">                      child: Column(</span><br><span class="line">                        children: &lt;Widget&gt;[</span><br><span class="line">                          TextFormField(</span><br><span class="line">                            autofocus: <span class="keyword">false</span>,</span><br><span class="line">                            autovalidate: <span class="keyword">false</span>,</span><br><span class="line">                            initialValue: todo.thing,</span><br><span class="line">                            decoration: InputDecoration(</span><br><span class="line">                              border: OutlineInputBorder(),</span><br><span class="line">                              labelText: <span class="string">'输入你想做的事'</span>,</span><br><span class="line">                            ),</span><br><span class="line">                            onChanged: (val) &#123;</span><br><span class="line">                              todo.thing = val;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            validator: (val) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (val.isEmpty) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="string">'想做的事不能为空'</span>;</span><br><span class="line">                              &#125;</span><br><span class="line">                              <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ),</span><br><span class="line">                          SizedBox(height: <span class="number">20</span>),</span><br><span class="line">                          SwitchListTile(</span><br><span class="line">                            title: <span class="keyword">const</span> Text(<span class="string">'是否完成'</span>),</span><br><span class="line">                            value: todo.finish,</span><br><span class="line">                            onChanged: (<span class="built_in">bool</span> value) &#123;</span><br><span class="line">                              todo.finish = value;</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ),</span><br><span class="line">                          SizedBox(height: <span class="number">20</span>),</span><br><span class="line">                          Row(</span><br><span class="line">                            mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">                            children: &lt;Widget&gt;[</span><br><span class="line">                              FlatButton(</span><br><span class="line">                                child: Text(<span class="string">'取消'</span>),</span><br><span class="line">                                onPressed: () =&gt; Navigator.pop(context),</span><br><span class="line">                              ),</span><br><span class="line">                              RaisedButton(</span><br><span class="line">                                child: Text(</span><br><span class="line">                                  <span class="string">'确定'</span>,</span><br><span class="line">                                  style: TextStyle(color: Colors.white),</span><br><span class="line">                                ),</span><br><span class="line">                                color: Theme.of(context).primaryColor,</span><br><span class="line">                                onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">                                  <span class="keyword">final</span> isValid =</span><br><span class="line">                                      _formKey.currentState.validate();</span><br><span class="line"></span><br><span class="line">                                  <span class="keyword">if</span> (!isValid) &#123;</span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                  &#125;</span><br><span class="line"></span><br><span class="line">                                  <span class="keyword">try</span> &#123;</span><br><span class="line">                                    <span class="keyword">await</span> todos.editTodo(</span><br><span class="line">                                      todoIndex,</span><br><span class="line">                                      todo.thing,</span><br><span class="line">                                      todo.finish,</span><br><span class="line">                                    );</span><br><span class="line">                                    Navigator.pop(context);</span><br><span class="line">                                  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                                    Scaffold.of(context).showSnackBar(</span><br><span class="line">                                      SnackBar(content: Text(<span class="string">'修改代办失败了，请重试。'</span>)),</span><br><span class="line">                                    );</span><br><span class="line">                                  &#125;</span><br><span class="line">                                &#125;,</span><br><span class="line">                              )</span><br><span class="line">                            ],</span><br><span class="line">                          ),</span><br><span class="line">                        ],</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ],</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除 Todo 按钮</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../model/todo.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../store/todos.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoveTodoButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> todoIndex;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> RemoveTodoButton(&#123;Key key, <span class="keyword">this</span>.todoIndex&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Consumer&lt;Todos&gt;(builder: (_, todos, child) &#123;</span><br><span class="line">      <span class="keyword">final</span> Todo todo = todos.items[todoIndex];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> IconButton(</span><br><span class="line">        color: Colors.red,</span><br><span class="line">        icon: Icon(Icons.delete),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">'delete todo'</span>);</span><br><span class="line">          showDialog(</span><br><span class="line">            context: context,</span><br><span class="line">            builder: (BuildContext context) &#123;</span><br><span class="line">              <span class="keyword">return</span> AlertDialog(</span><br><span class="line">                title: Text(<span class="string">'确认删除 <span class="subst">$&#123;todo.thing&#125;</span>?'</span>),</span><br><span class="line">                actions: &lt;Widget&gt;[</span><br><span class="line">                  FlatButton(</span><br><span class="line">                    child: Text(</span><br><span class="line">                      <span class="string">'取消'</span>,</span><br><span class="line">                      style: TextStyle(color: Colors.grey),</span><br><span class="line">                    ),</span><br><span class="line">                    onPressed: () =&gt; Navigator.pop(context),</span><br><span class="line">                  ),</span><br><span class="line">                  FlatButton(</span><br><span class="line">                    child: Text(<span class="string">'确认'</span>),</span><br><span class="line">                    onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">                      <span class="keyword">await</span> todos.removeTodo(todoIndex);</span><br><span class="line">                      Navigator.pop(context);</span><br><span class="line">                    &#125;,</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此所有的数据都存储在服务器上了，重启应用数据也会从服务器上获取了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了存储数据可以将数据存到手机的存储里面或者存到远程服务器上，本文就实现如何使用 dio 将数据存到服务器&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>使用 Provider 管理 Flutter 应用状态 (上)</title>
    <link href="https://coldstone.fun/post/2019/09/11/flutter-provider-todos-01/"/>
    <id>https://coldstone.fun/post/2019/09/11/flutter-provider-todos-01/</id>
    <published>2019-09-11T13:48:56.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>本文说明如何使用 Provider 来管理这种应用的全局性的数据</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个应用内通常会有两种数据，部件内部的使用的临时性数据以及很多部件使用的全局性数据，部件内部使用的数据可以通过 StatefulWidget 来管理，但是全局性的数据如果通过从上到下传递的方式会使代码写的十分繁琐，这时就需要一个状态管理工具来进行管理了，本文说明如何使用 Provider 来管理这种应用的全局性的数据</p><h2 id="什么是-Provider"><a href="#什么是-Provider" class="headerlink" title="什么是 Provider"></a>什么是 Provider</h2><p>官方的定义是： A mixture between dependency injection (DI) and state management, built with widgets for widgets. 翻译过来大意是一种依赖注入和状态管理的混合方案，使用部件创建，作用于部件 😅</p><p><a href="https://pub.flutter-io.cn/documentation/provider/latest/" target="_blank" rel="noopener">官方文档</a></p><h2 id="为什么要使用-Provider"><a href="#为什么要使用-Provider" class="headerlink" title="为什么要使用 Provider"></a>为什么要使用 Provider</h2><p>应用中通常会有一些很多部件都需要的数据，如用户的登录信息，用户设置，地理位置等，如果只是使用 StatefullWeight 的话就需要将状态提升到一个父部件中然后向下进行传递，会很繁琐，使用 provider 的话可以将对一种状态数据的操作放到一个文件内，然后使用到这个数据的部件只需要使用就可以了，当数据有变化时，部件会自动的重新构建，使界面更新。</p><h2 id="一个例子-🌰"><a href="#一个例子-🌰" class="headerlink" title="一个例子 🌰"></a>一个例子 🌰</h2><p>使用一个 todo 应用来说明如何在 Flutter 应用中使用 Provider，最终的完成的应用是这样的，可以新增，编辑和删除 todo。</p><p><a href="https://github.com/xrr2016/flutter_provider_todos" target="_blank" rel="noopener">源码地址</a></p><img src="images/provider-todos.png" width="360" style="max-width: 360px;"><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>首先使用命令行创建一个项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create flutter_provider_todos</span><br></pre></td></tr></table></figure><p>然后在项目的 pubspec.yml 添加 provider</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">^3.1.0</span></span><br></pre></td></tr></table></figure><p>创建一个 store 文件夹以及 todos.dart 用来存放应用中需要用到的全局性数据，新建一个 widget 目录，用来存放应用中的部件以及一个显示 todo 的页面 todos_page.dart</p><img src="images/todos-folder.jpg" width="360" style="max-width: 360px;"><p>首先创建 todos 这个全局性的数据，修改 store/todos.dart，创建一个 Todo 类表示一个代办事项，然后实现 Todos 类， Todos 混合了 ChangeNotifier 类，为了使用 notifyListeners 方法来通知 UI 更新，因此需要导入 foundation.dart，Todos 类使用一个 _items 数组存放 Todo 数据，以及其它对 Todo 进行操作的方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/foundation.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> finish;</span><br><span class="line">  <span class="built_in">String</span> thing;</span><br><span class="line"></span><br><span class="line">  Todo(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.thing,</span><br><span class="line">    <span class="keyword">this</span>.finish = <span class="keyword">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todos</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Todo&gt; _items = [</span><br><span class="line">    Todo(thing: <span class="string">'Play lol'</span>, finish: <span class="keyword">true</span>),</span><br><span class="line">    Todo(thing: <span class="string">'Learn flutter'</span>, finish: <span class="keyword">false</span>),</span><br><span class="line">    Todo(thing: <span class="string">'Read book'</span>, finish: <span class="keyword">false</span>),</span><br><span class="line">    Todo(thing: <span class="string">'Watch anime'</span>, finish: <span class="keyword">false</span>),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> items &#123;</span><br><span class="line">    <span class="keyword">return</span> [..._items];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> finishTodos &#123;</span><br><span class="line">    <span class="keyword">return</span> _items.where((todo) =&gt; todo.finish);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> refresh() &#123;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> addTodo(Todo todo) &#123;</span><br><span class="line">    _items.insert(<span class="number">0</span>, todo);</span><br><span class="line"></span><br><span class="line">    refresh();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> removeTodo(<span class="built_in">int</span> index) &#123;</span><br><span class="line">    _items.removeAt(index);</span><br><span class="line"></span><br><span class="line">    refresh();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> editTodo(<span class="built_in">int</span> index, <span class="built_in">String</span> newThing, <span class="built_in">bool</span> isFinish) &#123;</span><br><span class="line">    Todo todo = _items[index];</span><br><span class="line">    todo.thing = newThing;</span><br><span class="line">    todo.finish = isFinish;</span><br><span class="line"></span><br><span class="line">    refresh();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> toggleFinish(<span class="built_in">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">final</span> todo = _items[index];</span><br><span class="line">    todo.finish = !todo.finish;</span><br><span class="line"></span><br><span class="line">    refresh();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> isTodoExist(<span class="built_in">String</span> thing) &#123;</span><br><span class="line">    <span class="built_in">bool</span> isExist = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _items.length; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> todo = _items[i];</span><br><span class="line">      <span class="keyword">if</span> (todo.thing == thing) &#123;</span><br><span class="line">        isExist = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isExist;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用 provider 提供的 ChangeNotifierProvider 方法将数据注册到整个应用，如果有多个数据就需要使用 MultiProvider 方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'todos_page.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'store/todos.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Todos'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.green,</span><br><span class="line">      ),</span><br><span class="line">      home: ChangeNotifierProvider(</span><br><span class="line">        builder: (context) =&gt; Todos(),</span><br><span class="line">        child: TodosPage(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列表页面"><a href="#列表页面" class="headerlink" title="列表页面"></a>列表页面</h3><p>接着就是实现显示 todo 列表的页面，这个页面就是要用到 Todos 类里面的数据的部件，要使用 provider 的数据首先要导入 provider 以及对应的数据类 Todos，然后用 Consumer 加类型 Todos 来使用这个数据</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Todos&gt;(</span><br><span class="line">  builder: (ctx, todos, child) &#123;</span><br><span class="line">    <span class="keyword">return</span> YourWidget()</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这个页面使用了一个 ListView.builder() 来渲染 Todos，然后每一项使用一个 ListTile 展示。新增，编辑和删除对应了 3 个不同的部件，分别是 AddTodoButton()，EditTodoButton()， RemoveTodoButton()</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// todos_page.dart</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'store/todos.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'widget/add_todo_button.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'widget/edit_todo_button.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'widget/remove_todo_button.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodosPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Flutter Provider Todos'</span>)),</span><br><span class="line">      body: Consumer&lt;Todos&gt;(</span><br><span class="line">        builder: (ctx, todos, child) &#123;</span><br><span class="line">          <span class="built_in">List</span>&lt;Todo&gt; items = todos.items;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> ListView.builder(</span><br><span class="line">            itemCount: items.length,</span><br><span class="line">            itemBuilder: (_, index) =&gt; Column(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                ListTile(</span><br><span class="line">                  title: Text(</span><br><span class="line">                    items[index].thing,</span><br><span class="line">                    style: TextStyle(</span><br><span class="line">                      color: items[index].finish ? Colors.green : Colors.grey,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  trailing: Container(</span><br><span class="line">                    width: <span class="number">150</span>,</span><br><span class="line">                    child: Row(</span><br><span class="line">                      mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">                      children: &lt;Widget&gt;[</span><br><span class="line">                        EditTodoButton(todoIndex: index),</span><br><span class="line">                        RemoveTodoButton(todoIndex: index),</span><br><span class="line">                      ],</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                Divider(),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: AddTodoButton(),</span><br><span class="line">      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>接下来就是要实现这 3 个按钮了，在 widget 目录创建对应的文件，每个按钮都会使用到 Todos 类里面定义的方法，所以都需要导入 provider 和 Todos 类，点击按钮会弹出一个对话框询问对应的操作，</p><img src="images/todos-widget.jpg" style="max-width: 360px;"><p>添加 Todo 按钮</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../store/todos.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddTodoButton</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AddTodoButtonState createState() =&gt; _AddTodoButtonState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AddTodoButtonState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AddTodoButton</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _formKey = GlobalKey&lt;FormState&gt;();</span><br><span class="line">  <span class="keyword">final</span> _controller = TextEditingController();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _formKey.currentState.dispose();</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Consumer&lt;Todos&gt;(</span><br><span class="line">      builder: (_, todos, child) &#123;</span><br><span class="line">        <span class="keyword">return</span> FloatingActionButton(</span><br><span class="line">          child: Icon(Icons.add),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'add todo'</span>);</span><br><span class="line">            <span class="keyword">return</span> showDialog(</span><br><span class="line">              context: context,</span><br><span class="line">              builder: (BuildContext _) &#123;</span><br><span class="line">                <span class="keyword">return</span> SimpleDialog(</span><br><span class="line">                  title: Text(<span class="string">'添加 Todo'</span>),</span><br><span class="line">                  contentPadding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">24.0</span>),</span><br><span class="line">                  children: &lt;Widget&gt;[</span><br><span class="line">                    Form(</span><br><span class="line">                      key: _formKey,</span><br><span class="line">                      child: Column(</span><br><span class="line">                        children: &lt;Widget&gt;[</span><br><span class="line">                          TextFormField(</span><br><span class="line">                            autofocus: <span class="keyword">true</span>,</span><br><span class="line">                            autovalidate: <span class="keyword">false</span>,</span><br><span class="line">                            controller: _controller,</span><br><span class="line">                            keyboardType: TextInputType.text,</span><br><span class="line">                            decoration: InputDecoration(</span><br><span class="line">                              border: OutlineInputBorder(),</span><br><span class="line">                              labelText: <span class="string">'输入你想做的事'</span>,</span><br><span class="line">                            ),</span><br><span class="line">                            validator: (val) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (val.isEmpty) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="string">'想做的事不能为空'</span>;</span><br><span class="line">                              &#125;</span><br><span class="line"></span><br><span class="line">                              <span class="built_in">bool</span> isExist = todos.isTodoExist(val);</span><br><span class="line"></span><br><span class="line">                              <span class="keyword">if</span> (isExist) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="string">'这件事情已经存在了'</span>;</span><br><span class="line">                              &#125;</span><br><span class="line">                              <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ),</span><br><span class="line">                          SizedBox(height: <span class="number">20</span>),</span><br><span class="line">                          Row(</span><br><span class="line">                            mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">                            children: &lt;Widget&gt;[</span><br><span class="line">                              FlatButton(</span><br><span class="line">                                child: Text(<span class="string">'取消'</span>),</span><br><span class="line">                                onPressed: () &#123;</span><br><span class="line">                                  Navigator.pop(context);</span><br><span class="line">                                &#125;,</span><br><span class="line">                              ),</span><br><span class="line">                              RaisedButton(</span><br><span class="line">                                child: Text(</span><br><span class="line">                                  <span class="string">'确定'</span>,</span><br><span class="line">                                  style: TextStyle(color: Colors.white),</span><br><span class="line">                                ),</span><br><span class="line">                                color: Theme.of(context).primaryColor,</span><br><span class="line">                                onPressed: () &#123;</span><br><span class="line">                                  <span class="keyword">final</span> isValid =</span><br><span class="line">                                      _formKey.currentState.validate();</span><br><span class="line"></span><br><span class="line">                                  <span class="keyword">if</span> (!isValid) &#123;</span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                  &#125;</span><br><span class="line"></span><br><span class="line">                                  <span class="keyword">final</span> thing = _controller.value.text;</span><br><span class="line"></span><br><span class="line">                                  todos.addTodo(Todo(</span><br><span class="line">                                    thing: thing,</span><br><span class="line">                                    finish: <span class="keyword">false</span>,</span><br><span class="line">                                  ));</span><br><span class="line">                                  _controller.clear();</span><br><span class="line">                                  Navigator.pop(context);</span><br><span class="line">                                &#125;,</span><br><span class="line">                              )</span><br><span class="line">                            ],</span><br><span class="line">                          ),</span><br><span class="line">                        ],</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ],</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://github.com/xrr2016/flutter_provider_todos/raw/master/add-todo.png" width="360" style="max-width: 360px;"><p>编辑 Todo 按钮</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../store/todos.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditTodoButton</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> todoIndex;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> EditTodoButton(&#123;Key key, <span class="keyword">this</span>.todoIndex&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _EditTodoButtonState createState() =&gt; _EditTodoButtonState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_EditTodoButtonState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">EditTodoButton</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _formKey = GlobalKey&lt;FormState&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _formKey?.currentState?.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Consumer&lt;Todos&gt;(</span><br><span class="line">      builder: (context, todos, child) &#123;</span><br><span class="line">        <span class="keyword">final</span> todoIndex = widget.todoIndex;</span><br><span class="line">        <span class="keyword">final</span> Todo todo = todos.items[todoIndex];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> IconButton(</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          icon: Icon(Icons.edit),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            <span class="keyword">return</span> showDialog(</span><br><span class="line">              context: context,</span><br><span class="line">              builder: (context) &#123;</span><br><span class="line">                <span class="keyword">return</span> SimpleDialog(</span><br><span class="line">                  title: Text(<span class="string">'编辑 Todo'</span>),</span><br><span class="line">                  contentPadding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">24.0</span>),</span><br><span class="line">                  children: &lt;Widget&gt;[</span><br><span class="line">                    Form(</span><br><span class="line">                      key: _formKey,</span><br><span class="line">                      child: Column(</span><br><span class="line">                        children: &lt;Widget&gt;[</span><br><span class="line">                          TextFormField(</span><br><span class="line">                            autofocus: <span class="keyword">false</span>,</span><br><span class="line">                            autovalidate: <span class="keyword">false</span>,</span><br><span class="line">                            initialValue: todo.thing,</span><br><span class="line">                            decoration: InputDecoration(</span><br><span class="line">                              border: OutlineInputBorder(),</span><br><span class="line">                              labelText: <span class="string">'输入你想做的事'</span>,</span><br><span class="line">                            ),</span><br><span class="line">                            onChanged: (val) &#123;</span><br><span class="line">                              todo.thing = val;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            validator: (val) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (val.isEmpty) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="string">'想做的事不能为空'</span>;</span><br><span class="line">                              &#125;</span><br><span class="line">                              <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ),</span><br><span class="line">                          SizedBox(height: <span class="number">20</span>),</span><br><span class="line">                          SwitchListTile(</span><br><span class="line">                            title: <span class="keyword">const</span> Text(<span class="string">'是否完成'</span>),</span><br><span class="line">                            value: todo.finish,</span><br><span class="line">                            onChanged: (<span class="built_in">bool</span> value) &#123;</span><br><span class="line">                              todo.finish = value;</span><br><span class="line">                            &#125;,</span><br><span class="line">                          ),</span><br><span class="line">                          SizedBox(height: <span class="number">20</span>),</span><br><span class="line">                          Row(</span><br><span class="line">                            mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">                            children: &lt;Widget&gt;[</span><br><span class="line">                              FlatButton(</span><br><span class="line">                                child: Text(<span class="string">'取消'</span>),</span><br><span class="line">                                onPressed: () =&gt; Navigator.pop(context),</span><br><span class="line">                              ),</span><br><span class="line">                              RaisedButton(</span><br><span class="line">                                child: Text(</span><br><span class="line">                                  <span class="string">'确定'</span>,</span><br><span class="line">                                  style: TextStyle(color: Colors.white),</span><br><span class="line">                                ),</span><br><span class="line">                                color: Theme.of(context).primaryColor,</span><br><span class="line">                                onPressed: () &#123;</span><br><span class="line">                                  <span class="keyword">final</span> isValid =</span><br><span class="line">                                      _formKey.currentState.validate();</span><br><span class="line"></span><br><span class="line">                                  <span class="keyword">if</span> (!isValid) &#123;</span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                  &#125;</span><br><span class="line"></span><br><span class="line">                                  Navigator.pop(context);</span><br><span class="line"></span><br><span class="line">                                  todos.editTodo(</span><br><span class="line">                                    todoIndex,</span><br><span class="line">                                    todo.thing,</span><br><span class="line">                                    todo.finish,</span><br><span class="line">                                  );</span><br><span class="line">                                &#125;,</span><br><span class="line">                              )</span><br><span class="line">                            ],</span><br><span class="line">                          ),</span><br><span class="line">                        ],</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ],</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://github.com/xrr2016/flutter_provider_todos/raw/master/edit-todo.png" width="360" style="max-width: 360px;"><p>删除 Todo 按钮</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../store/todos.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoveTodoButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> todoIndex;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> RemoveTodoButton(&#123;Key key, <span class="keyword">this</span>.todoIndex&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Consumer&lt;Todos&gt;(builder: (_, todos, child) &#123;</span><br><span class="line">      <span class="keyword">final</span> Todo todo = todos.items[todoIndex];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> IconButton(</span><br><span class="line">        color: Colors.red,</span><br><span class="line">        icon: Icon(Icons.delete),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">'delete todo'</span>);</span><br><span class="line">          showDialog(</span><br><span class="line">            context: context,</span><br><span class="line">            builder: (BuildContext context) &#123;</span><br><span class="line">              <span class="keyword">return</span> AlertDialog(</span><br><span class="line">                title: Text(<span class="string">'确认删除 <span class="subst">$&#123;todo.thing&#125;</span>?'</span>),</span><br><span class="line">                actions: &lt;Widget&gt;[</span><br><span class="line">                  FlatButton(</span><br><span class="line">                    child: Text(</span><br><span class="line">                      <span class="string">'取消'</span>,</span><br><span class="line">                      style: TextStyle(color: Colors.grey),</span><br><span class="line">                    ),</span><br><span class="line">                    onPressed: () =&gt; Navigator.pop(context),</span><br><span class="line">                  ),</span><br><span class="line">                  FlatButton(</span><br><span class="line">                    child: Text(<span class="string">'确认'</span>),</span><br><span class="line">                    onPressed: () &#123;</span><br><span class="line">                      todos.removeTodo(todoIndex);</span><br><span class="line">                      Navigator.pop(context);</span><br><span class="line">                    &#125;,</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://github.com/xrr2016/flutter_provider_todos/raw/master/remove-todo.png" width="360" style="max-width: 360px;"><p>可以看到要使用对应的方法需要的只是向对应的部件注入这个数据，然后使用就可以了</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>使用了 provider 后，数据以及对一个 Todo 的操作都放在一个文件里面了，不用在多个层级间传递数据，并且在数据变化时自动更新了 UI，所以是十分有必要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文说明如何使用 Provider 来管理这种应用的全局性的数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法之哈希表</title>
    <link href="https://coldstone.fun/post/2019/09/08/dsa-hash/"/>
    <id>https://coldstone.fun/post/2019/09/08/dsa-hash/</id>
    <published>2019-09-08T08:26:45.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>哈希表是一种常用的数据结构，可以快速的插入和取用，但是查询数据效率低下</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>哈希表是一种常用的数据结构，可以快速的插入和取用，但是查询数据效率低下。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>基于数组实现哈希表，数组的长度是预先设定的，有需要是增加。最常见的是将数组的长度设为一个质数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> HashTable &#123;</span><br><span class="line">  table = &lt;<span class="built_in">any</span>&gt;[]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.table = <span class="built_in">Array</span>.from(&#123;</span><br><span class="line">      length: <span class="number">137</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将字符串的 ASCLL 码相加对数组长度求余</span></span><br><span class="line">  hash(data: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; data.length; index++) &#123;</span><br><span class="line">      total += data.charCodeAt(index)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total % <span class="keyword">this</span>.table.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更优的 hash 方法</span></span><br><span class="line">  betterHash(data: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> H = <span class="number">37</span></span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; data.length; index++) &#123;</span><br><span class="line">      total += H * total + data.charCodeAt(index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    total = total % <span class="keyword">this</span>.table.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (total &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      total += <span class="keyword">this</span>.table.length - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(total.toString())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储数据</span></span><br><span class="line">  put(key: <span class="built_in">string</span>, data: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pos = <span class="keyword">this</span>.betterHash(key)</span><br><span class="line">    <span class="keyword">this</span>.table[pos] = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据</span></span><br><span class="line">  <span class="keyword">get</span>(key: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.table[<span class="keyword">this</span>.betterHash(key)]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示数据</span></span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="keyword">this</span>.table.length; index++) &#123;</span><br><span class="line">      <span class="keyword">const</span> item = <span class="keyword">this</span>.table[index]</span><br><span class="line">      <span class="keyword">if</span> (item) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span>: <span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hashTable = <span class="keyword">new</span> HashTable()</span><br><span class="line"></span><br><span class="line">hashTable.put(<span class="string">'David'</span>, <span class="string">'David'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Jennifer'</span>, <span class="string">'Jennifer'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Donnie'</span>, <span class="string">'Donnie'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Raymond'</span>, <span class="string">'Raymond'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Cynthia'</span>, <span class="string">'Cynthia'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Mike'</span>, <span class="string">'Mike'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Clayton'</span>, <span class="string">'Clayton'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Danny'</span>, <span class="string">'Danny'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Jonathan'</span>, <span class="string">'Jonathan'</span>)</span><br><span class="line"></span><br><span class="line">hashTable.show()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Jonathan: '</span>, hashTable.get(<span class="string">'Jonathan'</span>))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>: Jennifer</span><br><span class="line"><span class="number">22</span>: Raymond</span><br><span class="line"><span class="number">55</span>: Donnie</span><br><span class="line"><span class="number">58</span>: Clayton</span><br><span class="line"><span class="number">80</span>: Jonathan</span><br><span class="line"><span class="number">82</span>: Mike</span><br><span class="line"><span class="number">103</span>: Cynthia</span><br><span class="line"><span class="number">110</span>: Danny</span><br><span class="line">Jonathan:  Jonathan</span><br></pre></td></tr></table></figure><h2 id="碰撞处理"><a href="#碰撞处理" class="headerlink" title="碰撞处理"></a>碰撞处理</h2><p>当哈希方法对于多个输入产生了相同的输出是就会出现碰撞，两种可以解决键的碰撞问题开链法以及线性探测法</p><p>开链法</p><p>开链法指的是在实现 hash 表的底层数组中，每个数组又是一个新的数据结构，比如另一个数组，这样即使有两个键 hash 后的值相同，依然被保存在同样的位置，但是他们在第二个数组中的位置是不同的。</p><p>要实现开链法，在创建存储键值的数组时，通过一个函数创建一个新的数组，然后将该数组赋值给 hash 表里的每一个元素，创建一个二维数组。</p><p>线性探测法</p><p>线性探测法指的是当发生碰撞时检查 hash 表里的下一个位置是否为空，如果为空就将数据存入该位置，如果不为空，则继续查找下一个位置，直到找到空位子为止。通常来说如果数组的大小是待存储数据个数的 1.5 倍时，那么用开链法；如果数组的大小是待存储的数据两倍以上时，那么使用线性探测法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哈希表是一种常用的数据结构，可以快速的插入和取用，但是查询数据效率低下&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DSA" scheme="https://coldstone.fun/tags/DSA/"/>
    
  </entry>
  
  <entry>
    <title>在 Egg.js 中使用 Redis 缓存提升性能</title>
    <link href="https://coldstone.fun/post/2019/08/31/egg-redis-cache/"/>
    <id>https://coldstone.fun/post/2019/08/31/egg-redis-cache/</id>
    <published>2019-08-31T05:20:56.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 是一款开源的，基于 BSD 许可的，高级键值缓存和存储系统</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis 是一款开源的，基于 BSD 许可的，高级键值缓存和存储系统。Redis 的键包括 string，hash，list，set，sorted set，bitmap 和 hyperloglog。你可以在这些类型上面运行原子操作，例如，追加字符串，增加哈希中的值，加入一个元素到列表，计算集合的交集、并集和差集，或者是从有序集合中获取最高排名的元素。</p><p>要在 Egg.js 中使用 redis，只需要执行 <code>npm i redis</code> 命令即可。</p><p>通过一个例子来验证一下，创建一个可以返回开源仓库在 Github 上的 star 数量的数据接口，来测试使用 Redis 后带来的提升，代码地址: <a href="https://github.com/xrr2016/egg-redis-test" target="_blank" rel="noopener">https://github.com/xrr2016/egg-redis-test</a></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>首先使用 Egg.js 创建一个项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir egg-redis-test &amp;&amp; <span class="built_in">cd</span> egg-redis-test</span><br><span class="line"></span><br><span class="line">npm init egg --<span class="built_in">type</span>=simple</span><br><span class="line"></span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p>安装 redis</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i redis</span><br></pre></td></tr></table></figure><p>启动项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line">open http://localhost:7001</span><br></pre></td></tr></table></figure><p>先创建 controller 和 service 目录，用来放处理请求和返回数据的方法，完成后的项目目录为</p><p><img src="/images/egg-folder.jpg" alt="folder"></p><p>修改 router.js 文件，添加路由，然后在 controller/home.js 文件实现 stars 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app</span><br><span class="line"></span><br><span class="line">  router.get(<span class="string">'/'</span>, controller.home.index)</span><br><span class="line">  router.get(<span class="string">'/stars'</span>, controller.home.stars)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 controller/home.js 文件，接收请求传过来的 query 参数向下传给 stars service 返回结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">'egg'</span>).Controller</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> stars() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx, service &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> &#123; owner, name &#125; = ctx.query</span><br><span class="line"></span><br><span class="line">    ctx.body = <span class="keyword">await</span> service.home.stars(owner, name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HomeController</span><br></pre></td></tr></table></figure><p>在 service/home.js 里实现 stars 方法，需要做的就是通过 controller 传过来的 owner, name 参数，请求 Github 的接口，返回数据。</p><p>需要注意的是，这里请求的是 Github 的 graphql 接口，所以首先需要在 Github 上新建一个 token，token 不能直接写在代码里面，需要将 token 放在环境变量里，否则代码提交到 Github 后会失效。</p><p><img src="/images/redis-token.jpg" alt="token"></p><p>创建 token 后使用 <a href="https://github.com/motdotla/dotenv#readme" target="_blank" rel="noopener">dotenv</a> 保存环境变量，先安装然后在项目目录创建一个 .env 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i dotenv</span><br></pre></td></tr></table></figure><p><img src="/images/env.jpg" alt="token"></p><p>然后就可以使用 egg.js 自带的 crul 方法向 Github 接口发送 post 请求，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).config()</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> stars(owner, name) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setResponse</span>(<span class="params">name, stars</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">`<span class="subst">$&#123;name&#125;</span> has <span class="subst">$&#123;stars&#125;</span> stars.`</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> query = <span class="string">`</span></span><br><span class="line"><span class="string">      query &#123;</span></span><br><span class="line"><span class="string">        repository(owner: <span class="subst">$&#123;owner&#125;</span>, name: <span class="subst">$&#123;name&#125;</span>) &#123;</span></span><br><span class="line"><span class="string">          stargazers &#123;</span></span><br><span class="line"><span class="string">            totalCount</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.curl(<span class="string">'https://api.github.com/graphql'</span>, &#123;</span><br><span class="line">      method: <span class="string">'POST'</span>,</span><br><span class="line">      dataType: <span class="string">'json'</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        Authorization: <span class="string">`token <span class="subst">$&#123;process.env.TOKEN&#125;</span>`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      data: <span class="built_in">JSON</span>.stringify(&#123; query &#125;),</span><br><span class="line">      timeout: <span class="number">10000</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = result.data.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> setResponse(name, data.repository.stargazers.totalCount)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HomeService</span><br></pre></td></tr></table></figure><p>使用 postman 测试一下接口</p><p><img src="/images/redis-before.jpg" alt="folder"></p><p>耗时平均 1 秒左右，接下来就是使用 Redis 添加缓存，首先需要在本地安装 Redis，参考 <a href="https://redis.io/download" target="_blank" rel="noopener">Redis download</a>，Mac 可以直接使用 homebrew 安装</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /usr/<span class="built_in">local</span>/etc/redis.conf</span><br></pre></td></tr></table></figure><p>进入 redis 命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>缓存的主要逻辑就是，第一次请求完得到 Github 的数据将数据放到缓存中，再次请求的时候直接使用缓存中的数据，也需要给缓存设置一个过期时间，<br>需要从环境变量中拿到 token，post 请求的数据要用 JSON.stringify 方法传给 Github 接口，否则出现解析错误，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).config()</span><br><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> REDIS_PORT = process.env.PORT || <span class="number">6379</span></span><br><span class="line"><span class="keyword">const</span> client = redis.createClient(REDIS_PORT)</span><br><span class="line"><span class="keyword">const</span> getAsync = promisify(client.get).bind(client)</span><br><span class="line"><span class="keyword">const</span> setexAsync = promisify(client.setex).bind(client)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> stars(owner, name) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">`<span class="subst">$&#123;owner&#125;</span>/<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">    <span class="keyword">const</span> stars = <span class="keyword">await</span> getAsync(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setResponse</span>(<span class="params">name, stars</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">`<span class="subst">$&#123;name&#125;</span> has <span class="subst">$&#123;stars&#125;</span> stars.`</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stars !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> setResponse(name, stars)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> query = <span class="string">`</span></span><br><span class="line"><span class="string">      query &#123;</span></span><br><span class="line"><span class="string">        repository(owner: <span class="subst">$&#123;owner&#125;</span>, name: <span class="subst">$&#123;name&#125;</span>) &#123;</span></span><br><span class="line"><span class="string">          stargazers &#123;</span></span><br><span class="line"><span class="string">            totalCount</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.curl(<span class="string">'https://api.github.com/graphql'</span>, &#123;</span><br><span class="line">      method: <span class="string">'POST'</span>,</span><br><span class="line">      dataType: <span class="string">'json'</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        Authorization: <span class="string">`token <span class="subst">$&#123;process.env.TOKEN&#125;</span>`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      data: <span class="built_in">JSON</span>.stringify(&#123; query &#125;),</span><br><span class="line">      timeout: <span class="number">10000</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = result.data.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> setexAsync(key, <span class="number">10</span>, data.repository.stargazers.totalCount)</span><br><span class="line">    <span class="keyword">return</span> setResponse(name, data.repository.stargazers.totalCount)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HomeService</span><br></pre></td></tr></table></figure><p>再次测试，首先把 Redis 里面的缓存清空，使用 Redis 的命令行运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSHALL</span><br></pre></td></tr></table></figure><p>发送请求，第一次的耗时还是一秒多，然后在失效时间内请求，可以看到使用缓存的数据后耗时大大减少了，性能提升效果显著，实际项目可以设置一个较长的缓存失效时间</p><p><img src="/images/redis-after.jpg" alt="folder"></p><p>当然缓存过期后又要重新向 Github 发送请求了，因为 Redis 已经把数据删除了</p><p><img src="/images/redis-vue.jpg" alt="folder"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://redis.io/documentation" target="_blank" rel="noopener">Redis documentation</a></p><p><a href="https://github.com/noderedis/node_redis" target="_blank" rel="noopener">Node Redis</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis 是一款开源的，基于 BSD 许可的，高级键值缓存和存储系统&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Node" scheme="https://coldstone.fun/tags/Node/"/>
    
      <category term="Redis" scheme="https://coldstone.fun/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法之字典</title>
    <link href="https://coldstone.fun/post/2019/08/28/dsa-dictionary/"/>
    <id>https://coldstone.fun/post/2019/08/28/dsa-dictionary/</id>
    <published>2019-08-28T13:09:13.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>字典是一种以键值对形式存储数据的数据结构，键用来查找，值用来保存数据</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>字典是一种以键值对形式存储数据的数据结构，键用来查找，值用来保存数据</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Dictionary &#123;</span><br><span class="line">  data: <span class="built_in">any</span>[] = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加元素</span></span><br><span class="line">  add(key: <span class="built_in">any</span>, value: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data[key] = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找元素</span></span><br><span class="line">  find(key: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除元素</span></span><br><span class="line">  remove(key: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.data[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示元素</span></span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="built_in">Object</span>.entries(<span class="keyword">this</span>.data).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'key:'</span>, item[<span class="number">0</span>], <span class="string">' value:'</span>, item[<span class="number">1</span>])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 元素个数</span></span><br><span class="line">  count() &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.data).forEach(_ =&gt; &#123;</span><br><span class="line">      n += <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空元素</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.data).forEach(<span class="function">(<span class="params">key: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.data[key]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dictionary = <span class="keyword">new</span> Dictionary()</span><br><span class="line"></span><br><span class="line">dictionary.add(<span class="string">'a'</span>, <span class="string">'a'</span>)</span><br><span class="line">dictionary.add(<span class="string">'b'</span>, <span class="string">'b'</span>)</span><br><span class="line">dictionary.add(<span class="string">'c'</span>, <span class="string">'c'</span>)</span><br><span class="line">dictionary.add(<span class="string">'d'</span>, <span class="string">'d'</span>)</span><br><span class="line">dictionary.add(<span class="string">'e'</span>, <span class="string">'e'</span>)</span><br><span class="line"></span><br><span class="line">dictionary.show()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'count: '</span>, dictionary.count())</span><br><span class="line"></span><br><span class="line">dictionary.clear()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'clear: '</span>, dictionary.count())</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key: a  value: a</span><br><span class="line">key: b  value: b</span><br><span class="line">key: c  value: c</span><br><span class="line">key: d  value: d</span><br><span class="line">key: e  value: e</span><br><span class="line">count:  5</span><br><span class="line">clear:  0</span><br></pre></td></tr></table></figure><p>排序字典的输出，需要重新定义 show 方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示元素</span></span><br><span class="line">show() &#123;</span><br><span class="line">  <span class="built_in">Object</span>.entries(<span class="keyword">this</span>.data)</span><br><span class="line">.sort()</span><br><span class="line">.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'key:'</span>, item[<span class="number">0</span>], <span class="string">' value:'</span>, item[<span class="number">1</span>])</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dictionary = <span class="keyword">new</span> Dictionary()</span><br><span class="line"></span><br><span class="line">dictionary.add(<span class="string">'c'</span>, <span class="string">'c'</span>)</span><br><span class="line">dictionary.add(<span class="string">'a'</span>, <span class="string">'a'</span>)</span><br><span class="line">dictionary.add(<span class="string">'d'</span>, <span class="string">'d'</span>)</span><br><span class="line">dictionary.add(<span class="string">'e'</span>, <span class="string">'e'</span>)</span><br><span class="line">dictionary.add(<span class="string">'b'</span>, <span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line">dictionary.show()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key: a  value: a</span><br><span class="line">key: b  value: b</span><br><span class="line">key: c  value: c</span><br><span class="line">key: d  value: d</span><br><span class="line">key: e  value: e</span><br></pre></td></tr></table></figure><p>使用 Object.keys 方法拿到字典的 keys 数组后，在用 sort 方法就可以显示有序的字典输出了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字典是一种以键值对形式存储数据的数据结构，键用来查找，值用来保存数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DSA" scheme="https://coldstone.fun/tags/DSA/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法之链表</title>
    <link href="https://coldstone.fun/post/2019/08/25/dsa-linklist/"/>
    <id>https://coldstone.fun/post/2019/08/25/dsa-linklist/</id>
    <published>2019-08-25T04:49:36.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>链表是一组节点组成的集合，每个节点都使用一个对象的引用指向它的下一个节点，指向节点的引用叫做链</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>链表是一组节点组成的集合，每个节点都使用一个对象的引用指向它的下一个节点，指向节点的引用叫做链。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用 LinkedListNode 类来表示节点，使用 LinkedList 来表示链表</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> LinkedListNode &#123;</span><br><span class="line">  element: <span class="built_in">any</span></span><br><span class="line">  next: LinkedListNode</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> LinkedList &#123;</span><br><span class="line">  <span class="comment">// 头节点</span></span><br><span class="line">  head: LinkedListNode</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.head = <span class="keyword">new</span> LinkedListNode(<span class="string">'head'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找</span></span><br><span class="line">  find(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode: LinkedListNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode.element !== element) &#123;</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入</span></span><br><span class="line">  insert(element: <span class="built_in">any</span>, item: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> LinkedListNode(element)</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.find(item)</span><br><span class="line"></span><br><span class="line">    newNode.next = currentNode.next</span><br><span class="line">    currentNode.next = newNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除</span></span><br><span class="line">  remove(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> prevNode = <span class="keyword">this</span>.findPrevNode(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(prevNode.next === <span class="literal">null</span>)) &#123;</span><br><span class="line">      prevNode.next = prevNode.next.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  findPrevNode(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line">    <span class="keyword">while</span> (</span><br><span class="line">      !(currentNode.next === <span class="literal">null</span>) &amp;&amp;</span><br><span class="line">      currentNode.next.element !== element</span><br><span class="line">    ) &#123;</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示</span></span><br><span class="line">  display() &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(currentNode.next === <span class="literal">null</span>)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(currentNode.next.element)</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foods = <span class="keyword">new</span> LinkedList()</span><br><span class="line"></span><br><span class="line">foods.insert(<span class="string">'eggs'</span>, <span class="string">'head'</span>)</span><br><span class="line">foods.insert(<span class="string">'apple'</span>, <span class="string">'eggs'</span>)</span><br><span class="line">foods.insert(<span class="string">'bread'</span>, <span class="string">'apple'</span>)</span><br><span class="line">foods.insert(<span class="string">'chese'</span>, <span class="string">'bread'</span>)</span><br><span class="line">foods.insert(<span class="string">'rice'</span>, <span class="string">'chese'</span>)</span><br><span class="line">foods.display()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------'</span>)</span><br><span class="line">foods.remove(<span class="string">'bread'</span>)</span><br><span class="line">foods.display()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">eggs</span><br><span class="line">apple</span><br><span class="line">bread</span><br><span class="line">chese</span><br><span class="line">rice</span><br><span class="line">------------</span><br><span class="line">eggs</span><br><span class="line">apple</span><br><span class="line">chese</span><br><span class="line">rice</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>要实现双向链表首先要为 LinkedListNode 类增加一个 prev 属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> LinkedListNode &#123;</span><br><span class="line">  element: <span class="built_in">any</span></span><br><span class="line">  prev: LinkedListNode</span><br><span class="line">  next: LinkedListNode</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element</span><br><span class="line">    <span class="keyword">this</span>.prev = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 LinkedList 类的 insert, remove 方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> LinkedList &#123;</span><br><span class="line">  <span class="comment">// 头节点</span></span><br><span class="line">  head: LinkedListNode = <span class="keyword">new</span> LinkedListNode(<span class="string">'head'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找</span></span><br><span class="line">  find(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode.element !== element) &#123;</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 找到最后的节点</span></span><br><span class="line">  findLast() &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入</span></span><br><span class="line">  insert(element: <span class="built_in">any</span>, item: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> LinkedListNode(element)</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.find(item)</span><br><span class="line"></span><br><span class="line">    newNode.prev = currentNode</span><br><span class="line">    newNode.next = currentNode.next</span><br><span class="line">    currentNode.next = newNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除</span></span><br><span class="line">  remove(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.find(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">      currentNode.prev.next = currentNode.next</span><br><span class="line">      currentNode.next.prev = currentNode.prev</span><br><span class="line">      currentNode.next = <span class="literal">null</span></span><br><span class="line">      currentNode.prev = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示</span></span><br><span class="line">  display() &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(currentNode.next === <span class="literal">null</span>)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(currentNode.next.element)</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 倒叙显示</span></span><br><span class="line">  displayReverse() &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.findLast()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode.prev !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(currentNode.element)</span><br><span class="line">      currentNode = currentNode.prev</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">foods.insert(<span class="string">'eggs'</span>, <span class="string">'head'</span>)</span><br><span class="line">foods.insert(<span class="string">'apple'</span>, <span class="string">'eggs'</span>)</span><br><span class="line">foods.insert(<span class="string">'bread'</span>, <span class="string">'apple'</span>)</span><br><span class="line">foods.insert(<span class="string">'chese'</span>, <span class="string">'bread'</span>)</span><br><span class="line">foods.insert(<span class="string">'rice'</span>, <span class="string">'chese'</span>)</span><br><span class="line">foods.display()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------'</span>)</span><br><span class="line">foods.remove(<span class="string">'bread'</span>)</span><br><span class="line">foods.display()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------'</span>)</span><br><span class="line">foods.displayReverse()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">eggs</span><br><span class="line">apple</span><br><span class="line">bread</span><br><span class="line">chese</span><br><span class="line">rice</span><br><span class="line">------------</span><br><span class="line">eggs</span><br><span class="line">apple</span><br><span class="line">chese</span><br><span class="line">rice</span><br><span class="line">------------</span><br><span class="line">rice</span><br><span class="line">chese</span><br><span class="line">apple</span><br><span class="line">eggs</span><br></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>创建循环链表需要让它的头节点的 next 属性指向本身， 然后修改 display 方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.head.next = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 显示</span></span><br><span class="line">display() &#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span> &amp;&amp; currentNode.next.element !== <span class="string">'head'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(currentNode.next.element)</span><br><span class="line">    currentNode = currentNode.next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>链表是一种高效的数据结构，如果发现数组在使用时很慢，就可以考虑用链表替代它，但是如果需要对数据随机访问，数组任然是更优的选择</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链表是一组节点组成的集合，每个节点都使用一个对象的引用指向它的下一个节点，指向节点的引用叫做链&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DSA" scheme="https://coldstone.fun/tags/DSA/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Egg.js 中使用 Sequelize 的事务 Transaction</title>
    <link href="https://coldstone.fun/post/2019/08/22/egg-sequelize-transaction/"/>
    <id>https://coldstone.fun/post/2019/08/22/egg-sequelize-transaction/</id>
    <published>2019-08-22T06:07:14.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>Egg.js 框架中使用事务</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在查了几遍 <a href="https://sequelize.org/" target="_blank" rel="noopener">Sequelize</a> 关于 <a href="https://sequelize.org/master/manual/transactions.html" target="_blank" rel="noopener">Transactions</a> 的文档，看了大佬同事的代码后，我终于弄懂怎么在 egg.js 框架里面使用事务了 😓</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>Sequelize 关于事务的示例代码是这样滴，首先通过 <code>sequelize.transaction</code> 方法创建了一个事务后，把这个事务传给需要进行操作的函数，如新增用户，给用户加属性等，但是看上去代码比较难懂</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> sequelize.transaction().then(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> User.create(</span><br><span class="line">    &#123;</span><br><span class="line">      firstName: <span class="string">'Bart'</span>,</span><br><span class="line">      lastName: <span class="string">'Simpson'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">transaction</span>: t &#125;</span><br><span class="line">  )</span><br><span class="line">    .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> user.addSibling(</span><br><span class="line">        &#123;</span><br><span class="line">          firstName: <span class="string">'Lisa'</span>,</span><br><span class="line">          lastName: <span class="string">'Simpson'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="attr">transaction</span>: t &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> t.commit()</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> t.rollback()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>实际使用的话需要用 <code>async/await</code> 语法让代码看起来更加清晰一点，在 egg.js 中使用的示例如下，首先需要用当前上下文中的 model 对象（就是对数据表的映射对象）创建一个事务，然后在 <code>try/catch</code> 中执行所要进行的操作，如果操作抛出了异常，那么就会回滚</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transaction = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.model.transaction()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.ctx.model.create(<span class="keyword">this</span>.ctx.request.body, &#123; transaction &#125;)</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.user.find(userId, &#123; transaction &#125;);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.product.destory(productId, &#123; transaction &#125;);</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">await</span> transaction.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="keyword">await</span> transaction.rollback()</span><br><span class="line">  <span class="keyword">throw</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用了 <code>async/await</code> 语法，代码确实清晰了很多</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Egg.js 框架中使用事务&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Egg.js" scheme="https://coldstone.fun/tags/Egg-js/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法之队列</title>
    <link href="https://coldstone.fun/post/2019/08/18/das-queue/"/>
    <id>https://coldstone.fun/post/2019/08/18/das-queue/</id>
    <published>2019-08-18T14:18:36.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>队列是一种列表，只能在队尾插入元素，在队首删除元素。队列用于存储按顺序排列的的数据，先进先出，可以将队列想象成在饭店排队取餐的人群，在队伍前面的先取餐，后来的人后取餐</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>队列是一种列表，只能在队尾插入元素，在队首删除元素。队列用于存储按顺序排列的的数据，先进先出，可以将队列想象成在饭店排队取餐的人群，在队伍前面的先取餐，后来的人后取餐。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>用 TypeScript 实现队列</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Queue &#123;</span><br><span class="line">  data: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt; = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 入队</span></span><br><span class="line">  enqueue(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.push(element)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 出队</span></span><br><span class="line">  dequeue() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.shift()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回第一个元素</span></span><br><span class="line">  front() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回最后一个元素</span></span><br><span class="line">  back() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.data.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示队列中所有元素</span></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.map(<span class="function"><span class="params">ele</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;ele&#125;</span>`</span>).toString()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断队列是否为空</span></span><br><span class="line">  empty() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.data.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line"></span><br><span class="line">queue.enqueue(<span class="string">'a'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'b'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'c'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'d'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'e'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queue: '</span>, queue)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'front: '</span>, queue.front())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'back: '</span>, queue.back())</span><br><span class="line"></span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queue: '</span>, queue)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queue: '</span>, queue.empty())</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">queue:  Queue &#123; data: [ 'a', 'b', 'c', 'd', 'e' ] &#125;</span><br><span class="line"></span><br><span class="line">front: a</span><br><span class="line"></span><br><span class="line">back:  e</span><br><span class="line"></span><br><span class="line">queue:  Queue &#123; data: [ 'e' ] &#125;</span><br><span class="line"></span><br><span class="line">queue:  false</span><br></pre></td></tr></table></figure><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>优先队列指的是在删除队列中元素的时候需要考虑元素的优先级，优先级高的元素先出队，优先级低的后出队，同等优先级的元素按原本的顺序出队。</p><p>首先需要一个具有优先级的元素</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Element &#123;</span><br><span class="line">  data: <span class="built_in">any</span></span><br><span class="line">  code: <span class="built_in">number</span> <span class="comment">// code 表示优先级，数值越小优先级越高，0 为最高</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后需要修改下队列的出队方法，找到队列中优先级最高的元素，然后将其移除队列</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dequeue() &#123;</span><br><span class="line">  <span class="keyword">const</span> codes = <span class="keyword">this</span>.data.map(<span class="function"><span class="params">ele</span> =&gt;</span> ele.code)</span><br><span class="line">  <span class="keyword">const</span> minCode = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, codes)</span><br><span class="line">  <span class="keyword">const</span> index = <span class="keyword">this</span>.data.findIndex(<span class="function"><span class="params">ele</span> =&gt;</span> ele.code === minCode)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.data.splice(index, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line"></span><br><span class="line">queue.enqueue(&#123; data: <span class="string">'a'</span>, code: <span class="number">5</span> &#125;)</span><br><span class="line">queue.enqueue(&#123; data: <span class="string">'b'</span>, code: <span class="number">4</span> &#125;)</span><br><span class="line">queue.enqueue(&#123; data: <span class="string">'c'</span>, code: <span class="number">3</span> &#125;)</span><br><span class="line">queue.enqueue(&#123; data: <span class="string">'d'</span>, code: <span class="number">2</span> &#125;)</span><br><span class="line">queue.enqueue(&#123; data: <span class="string">'e'</span>, code: <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queue: '</span>, queue)</span><br><span class="line"></span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queue: '</span>, queue)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">queue:  Queue &#123;</span><br><span class="line">  data:</span><br><span class="line">   [</span><br><span class="line">     &#123; data: 'a', code: 5 &#125;,</span><br><span class="line">     &#123; data: 'b', code: 4 &#125;,</span><br><span class="line">     &#123; data: 'c', code: 3 &#125;,</span><br><span class="line">     &#123; data: 'd', code: 2 &#125;,</span><br><span class="line">     &#123; data: 'e', code: 1 &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue:  Queue &#123;</span><br><span class="line">  data:</span><br><span class="line">    [</span><br><span class="line">      &#123; data: 'a', code: 5 &#125;,</span><br><span class="line">      &#123; data: 'b', code: 4 &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到队列中剩下了优先级较低的元素</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;队列是一种列表，只能在队尾插入元素，在队首删除元素。队列用于存储按顺序排列的的数据，先进先出，可以将队列想象成在饭店排队取餐的人群，在队伍前面的先取餐，后来的人后取餐&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DSA" scheme="https://coldstone.fun/tags/DSA/"/>
    
  </entry>
  
  <entry>
    <title>关于 Flutter 的安卓打包</title>
    <link href="https://coldstone.fun/post/2019/08/14/flutter-android-build/"/>
    <id>https://coldstone.fun/post/2019/08/14/flutter-android-build/</id>
    <published>2019-08-14T01:56:55.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter 在打包安卓应用时有两种方式 <code>flutter build apk</code> 和 <code>flutter build appbundle</code>，本文说下这两种方式有什么区别</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Flutter 在打包安卓应用时有两种方式 <code>flutter build apk</code> 和 <code>flutter build appbundle</code>，本文说下这两种方式有什么区别。</p><h2 id="Appbundle"><a href="#Appbundle" class="headerlink" title="Appbundle"></a>Appbundle</h2><p>Android App Bundle 是上传到 Google Play 用以支持 Dynamic Delivery 的文件，扩展名为 .aab，一个 bundle 包含所有应用的已编译代码和资源，但是还没有生成 apk 和 Google Play 的签名。</p><p>Google Play 的新应用服务模式称为 Dynamic Delivery（动态传送），使用你的应用包为每个用户的设备配置生成并提供优化的 APK，因此用户只下载运行应用所需的代码和资源。开发者不再需要构建，签名和管理多个 APK 来支持不同的设备，用户可以获得更小，更优化的下载。</p><p><a href="https://developer.android.com/guide/app-bundle" target="_blank" rel="noopener">官方文档</a></p><h2 id="Apk"><a href="#Apk" class="headerlink" title="Apk"></a>Apk</h2><p>如果应用不发布到 Google Play，则需要发布多个 apk，但必须自己构建，签名和管理每个 apk。</p><p>通常构建一个 apk 用以支持所有目标设备，但由于需要支持多个屏幕密度或应用程序二进制接口（ABI）的文件，这可能会导致非常大的 apk，减少 apk 大小的一种方法是创建多个 apk，在执行 <code>flutter build apk</code> 的时候可以添加构建参数 <code>--target-platform android-arm,android-arm64 --split-per-abi</code>， 这样构建出来的 apk 包含特定屏幕密度或 ABI 的文件。</p><p><a href="https://developer.android.com/studio/build/configure-apk-splits" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flutter 在打包安卓应用时有两种方式 &lt;code&gt;flutter build apk&lt;/code&gt; 和 &lt;code&gt;flutter build appbundle&lt;/code&gt;，本文说下这两种方式有什么区别&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法之栈</title>
    <link href="https://coldstone.fun/post/2019/08/10/dsa-stack/"/>
    <id>https://coldstone.fun/post/2019/08/10/dsa-stack/</id>
    <published>2019-08-10T15:12:09.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>栈是一种高效的数据结构，因为它只能在栈顶添加或删除，这样的操作很快，它是被称之为后入先出（LIFO，last in first out）的数据结构。可以将栈想象成一叠装菜的盘子，用的时候先拿最上面的，洗好的盘子又会放到最上面</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>栈是一种高效的数据结构，因为它只能在栈顶添加或删除，这样的操作很快，它是被称之为后入先出（LIFO，last in first out）的数据结构。可以将栈想象成一叠装菜的盘子，用的时候先拿最上面的，洗好的盘子又会放到最上面。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>用 TypeScript 实现栈</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Stack &#123;</span><br><span class="line">  top: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  data: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt; = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> length() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.top</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 向栈中压入一个新元素</span></span><br><span class="line">  push(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.push(element)</span><br><span class="line">    <span class="keyword">this</span>.top += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回栈顶元素, 同时将 top 值减 1</span></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">this</span>.top -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.pop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回栈顶元素</span></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.data.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.top - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空栈</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.top = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"></span><br><span class="line">stack.push(<span class="string">'aaa'</span>)</span><br><span class="line">stack.push(<span class="string">'bbb'</span>)</span><br><span class="line">stack.push(<span class="string">'ccc'</span>)</span><br><span class="line">stack.push(<span class="string">'ddd'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行 push 方法后\n'</span>, stack)</span><br><span class="line"></span><br><span class="line">stack.pop()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行 pop 方法后\n'</span>, stack)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行 peek 方法后返回：'</span>, stack.peek())</span><br><span class="line"></span><br><span class="line">stack.clear()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行 clear 方法后\n'</span>, stack)</span><br><span class="line"></span><br><span class="line">执行 push 方法后</span><br><span class="line"> Stack &#123; data: [ <span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>, <span class="string">'ddd'</span> ], top: <span class="number">4</span> &#125;</span><br><span class="line">执行 pop 方法后</span><br><span class="line"> Stack &#123; data: [ <span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span> ], top: <span class="number">3</span> &#125;</span><br><span class="line">执行 peek 方法后返回： ccc</span><br><span class="line">执行 clear 方法后</span><br><span class="line"> Stack &#123; data: [ <span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span> ], top: <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="将-10-进制的数转化为另一种进制"><a href="#将-10-进制的数转化为另一种进制" class="headerlink" title="将 10 进制的数转化为另一种进制"></a>将 10 进制的数转化为另一种进制</h3><p>此算法只针对基数为 2 ～ 9 的情况</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mulBase</span>(<span class="params">num: <span class="built_in">number</span>, base: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    stack.push(num % base)</span><br><span class="line">    num = <span class="built_in">Math</span>.floor((num /= base))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> converted = <span class="string">''</span></span><br><span class="line">  <span class="keyword">while</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    converted += stack.pop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> converted</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num = 2 base = 2：'</span>, mulBase(<span class="number">2</span>, <span class="number">2</span>)) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num = 32 base = 2：'</span>, mulBase(<span class="number">32</span>, <span class="number">2</span>)) <span class="comment">// 100000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num = 125 base = 8：'</span>, mulBase(<span class="number">125</span>, <span class="number">8</span>)) <span class="comment">// 175</span></span><br></pre></td></tr></table></figure><h3 id="判断回文"><a href="#判断回文" class="headerlink" title="判断回文"></a>判断回文</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">word: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rword = <span class="string">''</span></span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"></span><br><span class="line">  word.split(<span class="string">''</span>).forEach(<span class="function"><span class="params">w</span> =&gt;</span> stack.push(w))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     rword += stack.pop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(word === rword) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>, isPalindrome(<span class="string">'hello'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bob'</span>, isPalindrome(<span class="string">'bob'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'racecar'</span>, isPalindrome(<span class="string">'racecar'</span>));</span><br><span class="line"></span><br><span class="line">hello <span class="literal">false</span></span><br><span class="line">bob <span class="literal">true</span></span><br><span class="line">racecar <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈是一种高效的数据结构，因为它只能在栈顶添加或删除，这样的操作很快，它是被称之为后入先出（LIFO，last in first out）的数据结构。可以将栈想象成一叠装菜的盘子，用的时候先拿最上面的，洗好的盘子又会放到最上面&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DSA" scheme="https://coldstone.fun/tags/DSA/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法之列表</title>
    <link href="https://coldstone.fun/post/2019/08/08/datastructure-list/"/>
    <id>https://coldstone.fun/post/2019/08/08/datastructure-list/</id>
    <published>2019-08-08T14:14:05.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>列表是一种常用的数据结构，如代办事项，十佳榜单等。当不需要在一个很长的序列中查找元素，或者对其排序时，列表显得尤其有用</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>列表是一种常用的数据结构，如代办事项，十佳榜单等。当不需要在一个很长的序列中查找元素，或者对其排序时，列表显得尤其有用</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用 TypeScript 实现列表类，要实现的的列表类是</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List &#123;</span><br><span class="line">  pos: <span class="built_in">number</span> <span class="comment">// 列表当前位置</span></span><br><span class="line">  listSize: <span class="built_in">number</span> <span class="comment">// 列表的元素个数</span></span><br><span class="line">  data: [] <span class="comment">// 列表的数据存储位置</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.listSize = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.data = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> length() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.listSize</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空列表中的所有元素</span></span><br><span class="line">  clear() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的字符串形式</span></span><br><span class="line">  toString() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回当前位置的元素</span></span><br><span class="line">  getElement() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在现有元素后插入新元素</span></span><br><span class="line">  insert() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在列表的末尾添加新元素</span></span><br><span class="line">  append() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从列表中删除元素</span></span><br><span class="line">  remove() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到第一个元素</span></span><br><span class="line">  front() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到最后一个元素</span></span><br><span class="line">  end() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向前移一位</span></span><br><span class="line">  prev() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向后移一位</span></span><br><span class="line">  next() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有后一个元素</span></span><br><span class="line">  hasNext() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有前一个元素</span></span><br><span class="line">  hasPrev() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的当前位置</span></span><br><span class="line">  currentPos() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到指定位置</span></span><br><span class="line">  moveTo() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将列表类实现后</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List &#123;</span><br><span class="line">  pos: <span class="built_in">number</span> <span class="comment">// 列表当前位置</span></span><br><span class="line">  data: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt; <span class="comment">// 列表的数据存储</span></span><br><span class="line">  listSize: <span class="built_in">number</span> <span class="comment">// 列表的元素个数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.listSize = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.data = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的长度</span></span><br><span class="line">  <span class="keyword">get</span> length() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.listSize</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的当前位置</span></span><br><span class="line">  <span class="keyword">get</span> currentPos() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pos</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空列表中的所有元素</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.data</span><br><span class="line">    <span class="keyword">this</span>.data.length = <span class="keyword">this</span>.listSize = <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的字符串形式</span></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.toString()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回当前位置的元素</span></span><br><span class="line">  getElement() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.pos]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在现有元素后插入新元素</span></span><br><span class="line">  insert(element: <span class="built_in">any</span>, after: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.findIndex(after)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.data.splice(index + <span class="number">1</span>, <span class="number">0</span>, element)</span><br><span class="line">      <span class="keyword">this</span>.listSize += <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在列表的末尾添加新元素</span></span><br><span class="line">  append(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.push(element)</span><br><span class="line">    <span class="keyword">this</span>.listSize += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从列表中删除元素</span></span><br><span class="line">  remove(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.findIndex(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.data.splice(index, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">this</span>.listSize -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断元素是否在列表中</span></span><br><span class="line">  contains(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.includes(element)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到第一个元素</span></span><br><span class="line">  front() &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到最后一个元素</span></span><br><span class="line">  end() &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="keyword">this</span>.listSize - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向前移一位</span></span><br><span class="line">  prev() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pos -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向后移一位</span></span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pos &lt; <span class="keyword">this</span>.listSize) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pos += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有后一个元素</span></span><br><span class="line">  hasNext() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pos &lt; <span class="keyword">this</span>.listSize</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有前一个元素</span></span><br><span class="line">  hasPrev() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pos &gt; <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到指定位置</span></span><br><span class="line">  moveTo(position: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &gt; <span class="number">0</span> &amp;&amp; position &lt; <span class="keyword">this</span>.listSize) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pos = position</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找元素位置</span></span><br><span class="line">  <span class="keyword">private</span> findIndex(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.findIndex(<span class="function"><span class="params">ele</span> =&gt;</span> element === ele)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="keyword">new</span> List()</span><br><span class="line"></span><br><span class="line">list.append(<span class="string">'aaa'</span>)</span><br><span class="line">list.append(<span class="string">'bbb'</span>)</span><br><span class="line">list.append(<span class="string">'ccc'</span>)</span><br><span class="line">list.append(<span class="string">'ddd'</span>)</span><br><span class="line">list.append(<span class="string">'eee'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'list :'</span>, list)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list : List &#123;</span><br><span class="line">  pos: <span class="number">0</span>,</span><br><span class="line">  listSize: <span class="number">5</span>,</span><br><span class="line">  data: [ <span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>, <span class="string">'ddd'</span>, <span class="string">'eee'</span> ] &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;列表是一种常用的数据结构，如代办事项，十佳榜单等。当不需要在一个很长的序列中查找元素，或者对其排序时，列表显得尤其有用&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DSA" scheme="https://coldstone.fun/tags/DSA/"/>
    
  </entry>
  
  <entry>
    <title>在服务器上搭建 Npm 私服</title>
    <link href="https://coldstone.fun/post/2019/08/08/create-privite-npm-server/"/>
    <id>https://coldstone.fun/post/2019/08/08/create-privite-npm-server/</id>
    <published>2019-08-08T07:33:00.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>部门需要建一个 npm 私服，我查了一下发现有一个很好用的开源工具 Verdaccio，有 3 中方式可以在自己的服务器上搭建，以 Centos 为例</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>部门需要建一个 npm 私服，我查了一下发现有一个很好用的开源工具 <a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">Verdaccio</a>，有 3 中方式可以在自己的服务器上搭建，以 Centos 为例</p><h2 id="使用-Node-js-环境"><a href="#使用-Node-js-环境" class="headerlink" title="使用 Node.js 环境"></a>使用 Node.js 环境</h2><p>首先需要在服务器上安装 node 环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs</span><br></pre></td></tr></table></figure><p>安装后检查 node 是否正确安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>然后安装 Verdaccio</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g verdaccio</span><br></pre></td></tr></table></figure><p>安装完成就可以使用了， 如果使用的是 root 用户会提示你不要使用 root 账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verdaccio</span><br></pre></td></tr></table></figure><p>但是这样退出后服务就停止了，所以需要 pm2 进行启动</p><p>全局安装 pm2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><p>使用 pm2 启动 Verdaccio</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start verdaccio</span><br></pre></td></tr></table></figure><h2 id="使用-Docker"><a href="#使用-Docker" class="headerlink" title="使用 Docker"></a>使用 Docker</h2><p>首先需要在服务器上安装 Docker，有了 Docker 之后就很简单了</p><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull verdaccio/verdaccio</span><br></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --rm --name verdaccio -p 4873:4873 verdaccio/verdaccio</span><br></pre></td></tr></table></figure><h2 id="使用-Cloudron"><a href="#使用-Cloudron" class="headerlink" title="使用 Cloudron"></a>使用 Cloudron</h2><p>这种方式没试过，因为上面两种已经很方便了</p><p>链接 <a href="https://cloudron.io/button/org.eggertsson.verdaccio.html" target="_blank" rel="noopener">https://cloudron.io/button/org.eggertsson.verdaccio.html</a></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>私服安装完成后可以通过 ip 地址+端口号的形式访问了 xxx.xxx.xxx.xxx:4873</p><p>要用域名访问的话就需要将自己的域名解析到服务器上去</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://verdaccio.org/docs/en/installation" target="_blank" rel="noopener">https://verdaccio.org/docs/en/installation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部门需要建一个 npm 私服，我查了一下发现有一个很好用的开源工具 Verdaccio，有 3 中方式可以在自己的服务器上搭建，以 Centos 为例&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Node" scheme="https://coldstone.fun/tags/Node/"/>
    
      <category term="Docker" scheme="https://coldstone.fun/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>在 Centos 中安装 Java8</title>
    <link href="https://coldstone.fun/post/2019/08/01/centos-install-java8/"/>
    <id>https://coldstone.fun/post/2019/08/01/centos-install-java8/</id>
    <published>2019-08-01T10:56:29.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>由于要在服务器上安装 Jenkins 所以首先要安装 java</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于要在服务器上安装 <a href="https://jenkins.io/zh/" target="_blank" rel="noopener">Jenkins</a> 所以首先要安装 java。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>安装之前最好更新下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><h2 id="安装-Java8"><a href="#安装-Java8" class="headerlink" title="安装 Java8"></a>安装 Java8</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk</span><br></pre></td></tr></table></figure><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="设置环境变量-JAVA-HOME"><a href="#设置环境变量-JAVA-HOME" class="headerlink" title="设置环境变量 JAVA_HOME"></a>设置环境变量 JAVA_HOME</h2><p>首先找到安装 java 的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives --config java</span><br></pre></td></tr></table></figure><p>编辑 .bash_profile 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure><p>添加这一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64/jre/bin/java</span><br></pre></td></tr></table></figure><p>重新执行刚修改的 .bash_profile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><h2 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于要在服务器上安装 Jenkins 所以首先要安装 java&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Centos" scheme="https://coldstone.fun/tags/Centos/"/>
    
      <category term="Java" scheme="https://coldstone.fun/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>理解 Flutter 应用和部件的生命周期</title>
    <link href="https://coldstone.fun/post/2019/07/28/understand-flutter-lifecycle/"/>
    <id>https://coldstone.fun/post/2019/07/28/understand-flutter-lifecycle/</id>
    <published>2019-07-28T05:21:03.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>在 Flutter 里面部件以及应用本身都有自己的生命周期，本文分别说明它们的生命周期</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Flutter 里面部件以及应用本身都有自己的生命周期，本文分别说明它们的生命周期</p><h2 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h2><p>在 Flutter 里面有两种部件 StatefulWidget 和 StatelessWidget，它们的生命周期分别是</p><h3 id="StatelessWidget"><a href="#StatelessWidget" class="headerlink" title="StatelessWidget"></a>StatelessWidget</h3><p>无状态部件的生命周期很简单，首先执行构造函数然后就执行 build 方法了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor Function</span><br><span class="line"></span><br><span class="line">build()</span><br></pre></td></tr></table></figure><h3 id="StatefulWidget"><a href="#StatefulWidget" class="headerlink" title="StatefulWidget"></a>StatefulWidget</h3><p>有状态部件的生命周期会复杂一些，因为是多了状态变化。首先是构造函数，然后会初始化 State 在执行 build 方法，如果执行了 setState 方法，就要检查部件是否更新，在执行 build，最后部件销毁的时候执行 dispose 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Constructor Function</span><br><span class="line"></span><br><span class="line">initState()</span><br><span class="line"></span><br><span class="line">build()</span><br><span class="line"></span><br><span class="line">setState()</span><br><span class="line"></span><br><span class="line">didUpdateWidget()</span><br><span class="line"></span><br><span class="line">build()</span><br><span class="line"></span><br><span class="line">dispose()</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>Flutter 应用本身也有自己的生命周期，要观察到这些状态的变化需要让一个有状态部件混入 <code>WidgetsBindingObserver</code>，然后在 <code>initState</code> 方法中创建一个观察者，当然部件销毁的时候需要把创建的观察者实现清除</p><ul><li><p>inactive 应用处于非活动状态，并且未接收用户输入</p></li><li><p>paused 应用当前对用户不可见，不响应用户输入，并在后台运行</p></li><li><p>resumed 应用可见并响应用户输入</p></li><li><p>suspending 应用退出了</p></li></ul><p>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &#39;Flutter Lifecycle&#39;,</span><br><span class="line">      home: MyHomePage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyHomePage extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _MyHomePageState createState() &#x3D;&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _MyHomePageState extends State&lt;MyHomePage&gt; with WidgetsBindingObserver &#123;</span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    WidgetsBinding.instance.addObserver(this);</span><br><span class="line">    super.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void didChangeAppLifecycleState(AppLifecycleState state) &#123;</span><br><span class="line">print(state);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    WidgetsBinding.instance.removeObserver(this);</span><br><span class="line">    super.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在 Flutter 应用里面这些生命周期还是挺简单易懂的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Flutter 里面部件以及应用本身都有自己的生命周期，本文分别说明它们的生命周期&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>对于 Workbox Strategies几种策略的解释</title>
    <link href="https://coldstone.fun/post/2019/07/26/about-workbox-strategies/"/>
    <id>https://coldstone.fun/post/2019/07/26/about-workbox-strategies/</id>
    <published>2019-07-26T20:36:13.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>要将自己的网站支持 PWA，需要注册一个 serviceWorker 到浏览器中，通常使用 Google 的 Workbox 工具，Workbox 可以在浏览器请求资源的时候提供了几种不同的策略对请求响应，本文对几种策略进行说明</p><a id="more"></a><p>要将自己的网站支持 PWA，需要注册一个 serviceWorker 到浏览器中，通常使用 Google 的 <a href="https://developers.google.com/web/tools/workbox/" target="_blank" rel="noopener">Workbox</a> 工具，Workbox 可以在浏览器请求资源的时候提供了几种不同的策略对请求响应，本文对几种策略进行说明。</p><h2 id="StaleWhileRevalidate"><a href="#StaleWhileRevalidate" class="headerlink" title="StaleWhileRevalidate"></a>StaleWhileRevalidate</h2><p>StaleWhileRevalidate 模式允许您使用缓存的响应尽快响应请求，如果未缓存，则返回到网络请求，然后，用网络请求更新缓存。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/stale-while-revalidate.png" alt="StaleWhileRevalidate"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="CacheFirst"><a href="#CacheFirst" class="headerlink" title="CacheFirst"></a>CacheFirst</h2><p>如果缓存中存在响应，则将使用缓存的响应来完成请求，并且根本不会使用网络。 如果没有缓存的响应，则将通过网络请求来满足请求，并且将缓存响应，以便直接从缓存提供下一个请求。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/cache-first.png" alt="CacheFirst"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="NetworkFirst"><a href="#NetworkFirst" class="headerlink" title="NetworkFirst"></a>NetworkFirst</h2><p>对于频繁更新的请求，网络优先策略是理想的解决方案。 默认情况下，它将尝试从网络获取最新响应，如果请求成功，它会将响应放入缓存中。 如果网络无法返回响应，则将使用缓存的响应。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/network-first.png" alt="NetworkFirst"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.NetworkFirst(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="NetworkOnly"><a href="#NetworkOnly" class="headerlink" title="NetworkOnly"></a>NetworkOnly</h2><p>仅使用网络响应请求。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/network-only.png" alt="NetworkOnly"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.NetworkOnly(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="CacheOnly"><a href="#CacheOnly" class="headerlink" title="CacheOnly"></a>CacheOnly</h2><p>仅使用缓存响应请求。不常见，但如果您有自己的预先缓存步骤，则可能很有用。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/cache-only.png" alt="CacheOnly"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.CacheOnly(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developers.google.com/web/tools/workbox/modules/workbox-strategies" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要将自己的网站支持 PWA，需要注册一个 serviceWorker 到浏览器中，通常使用 Google 的 Workbox 工具，Workbox 可以在浏览器请求资源的时候提供了几种不同的策略对请求响应，本文对几种策略进行说明&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Workbox" scheme="https://coldstone.fun/tags/Workbox/"/>
    
  </entry>
  
  <entry>
    <title>使用 Travis CI 部署 Hugo 博客到 Github Pages</title>
    <link href="https://coldstone.fun/post/2019/07/26/hugo-travis-github-page/"/>
    <id>https://coldstone.fun/post/2019/07/26/hugo-travis-github-page/</id>
    <published>2019-07-26T12:58:25.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>原本使用的是 Netlify 去部署博客的，域名解析也是通过 Netlify 的 DNS 服务器，但是发现博客在别人的电脑上打不开…</p><a id="more"></a><p>原本使用的是 Netlify 去部署博客的，域名解析也是通过 Netlify 的 DNS 服务器，但是发现博客在别人的电脑上打不开…发现是域名解析的问题，所以就把博客放到 Github Pages 上了，但是这样就失去了 Netlify 提供的自动构建和部署的能力，需要自己去配置 Travis CI 实现自动部署了。</p><h2 id="预先要求"><a href="#预先要求" class="headerlink" title="预先要求"></a>预先要求</h2><ul><li>本地安装了 <a href="https://gohugo.io" target="_blank" rel="noopener">Hugo</a></li><li>一个 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 账号</li><li>使用 Github 账号登录 <a href="https://travis-ci.org" target="_blank" rel="noopener">Travis</a></li></ul><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><p>使用 Hugo 命令行工具新建自己的博客，将代码推送到自己的 Github 仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hugo new site my-blog</span><br><span class="line">...</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="新建一个-Github-Personal-access-token"><a href="#新建一个-Github-Personal-access-token" class="headerlink" title="新建一个 Github Personal access token"></a>新建一个 Github Personal access token</h2><p>在 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a> 新建一个 Personal access token 用来发布博客到 Github Pages 时进行验证，复制生成的 token，不要刷新或离开当前页面，否则 token 就看不见了，只能重新生成</p><p><img src="/images/github-token.jpg" alt="token"></p><p>登录到 <a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a> 对项目进行关联 <a href="https://travis-ci.org/account/repositories" target="_blank" rel="noopener">https://travis-ci.org/account/repositories</a></p><p>完成后进入设置界面 <code>https://travis-ci.org/your-gihub-user-name/your-gihub-repo/settings</code></p><p>在 Environment Variables 填写 GITHUB_TOKEN 变量，点击 Add 按钮，这样你的环境变量就添加完成了</p><h2 id="配置-travis-yml"><a href="#配置-travis-yml" class="headerlink" title="配置 .travis.yml"></a>配置 .travis.yml</h2><p>因为 Hugo 是用 GO 语言写的，所以要配置 GO 编译环境，在 before_script 里删除了 public 文件夹，如果有自定义域名，将自定义域名输出到构建出来的 CNAME 文件里面去，记得添加 DNS 解析记录到 Gihub 去 <a href="https://help.github.com/cn/articles/using-a-custom-domain-with-github-pages" target="_blank" rel="noopener">参考</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">language: go</span><br><span class="line"></span><br><span class="line">dist: trusty</span><br><span class="line"></span><br><span class="line">sudo: false</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  - HUGO_VERSION=0.56.0</span><br><span class="line"></span><br><span class="line">install: true</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">  - wget https://github.com/gohugoio/hugo/releases/download/v$&#123;HUGO_VERSION&#125;/hugo_$&#123;HUGO_VERSION&#125;_Linux-64bit.deb</span><br><span class="line">  - sudo dpkg -i hugo_$&#123;HUGO_VERSION&#125;_Linux-64bit.deb</span><br><span class="line">  - rm -rf public || exit 0</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hugo -v --gc --minify</span><br><span class="line">  - echo 'your-custom-domain.com' &gt; public/CNAME</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  local-dir: public</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GITHUB_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br></pre></td></tr></table></figure><h2 id="提交触发构建"><a href="#提交触发构建" class="headerlink" title="提交触发构建"></a>提交触发构建</h2><p>最后新建一篇文章，push 到 Github 仓库，触发 Travis 构建就可以了，以后博客进行更新后就可以自动构建发布了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new posts/my-first-post.md</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原本使用的是 Netlify 去部署博客的，域名解析也是通过 Netlify 的 DNS 服务器，但是发现博客在别人的电脑上打不开…&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hugo" scheme="https://coldstone.fun/tags/Hugo/"/>
    
  </entry>
  
  <entry>
    <title>对于 PWA 应用的 manifest.json 文件的解释</title>
    <link href="https://coldstone.fun/post/2019/07/24/about-manifest/"/>
    <id>https://coldstone.fun/post/2019/07/24/about-manifest/</id>
    <published>2019-07-24T21:31:51.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>网站要支持 PWA，需要一个 <code>manifest.json</code> 文件，W3C Web App Manifest 的草案上定义了以下的字段，解释一下每个字段是什么意思。</p><a id="more"></a><p>网站要支持 PWA，需要一个 <code>manifest.json</code> 文件，W3C Web App Manifest 的草案上定义了以下的字段，解释一下每个字段是什么意思。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">dictionary WebAppManifest &#123;</span><br><span class="line">   TextDirectionType dir = <span class="string">"auto"</span>;</span><br><span class="line">   DOMString lang;</span><br><span class="line">   USVString name;</span><br><span class="line">   USVString short_name;</span><br><span class="line">   USVString description;</span><br><span class="line">   sequence&lt;ImageResource&gt; icons;</span><br><span class="line">   sequence&lt;ImageResource&gt; screenshots;</span><br><span class="line">   sequence&lt;USVString&gt; categories;</span><br><span class="line">   DOMString iarc_rating_id;</span><br><span class="line">   USVString start_url;</span><br><span class="line">   DisplayModeType display = <span class="string">"browser"</span>;</span><br><span class="line">   OrientationLockType orientation;</span><br><span class="line">   USVString theme_color;</span><br><span class="line">   USVString background_color;</span><br><span class="line">   USVString scope;</span><br><span class="line">   ServiceWorkerRegistrationObject serviceworker;</span><br><span class="line">   sequence&lt;ExternalApplicationResource&gt; related_applications;</span><br><span class="line">   boolean prefer_related_applications = <span class="string">"false"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dictionary ImageResource &#123;</span><br><span class="line">  required USVString src;</span><br><span class="line">  DOMString sizes;</span><br><span class="line">  USVString type;</span><br><span class="line">  USVString purpose;</span><br><span class="line">  USVString platform;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dictionary ServiceWorkerRegistrationObject &#123;</span><br><span class="line">  required USVString src;</span><br><span class="line">  USVString scope;</span><br><span class="line">  WorkerType type = <span class="string">"classic"</span>;</span><br><span class="line">  ServiceWorkerUpdateViaCache update_via_cache = <span class="string">"imports"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dictionary ExternalApplicationResource &#123;</span><br><span class="line">  required USVString platform;</span><br><span class="line">  USVString url;</span><br><span class="line">  DOMString id;</span><br><span class="line">  USVString min_version;</span><br><span class="line">  sequence&lt;Fingerprint&gt; fingerprints;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>dir</strong> 指定了 manifest 中具有方向性的成员的基本方向，可以设置 <code>ltr</code> 左至右, <code>rtl</code> 右至左, <code>auto</code> 没有明确方向。</p><p><strong>lang</strong> 指定 manifest 中具有方向性成员的值的主要语言（因为知道语言也可以帮助方向性）。</p><p><strong>name</strong> 表示应用的名称。</p><p><strong>short_name</strong> 表示 Web 应用程序名称的简短版本，用于没有足够空间来显示 Web 应用程序的全名的地方。</p><p><strong>description</strong> 描述 Web 应用程序的目的。</p><p><strong>scope</strong> 表示 Web 应用程序导航范围。</p><p><strong>icons</strong> icons 是 ImageResources 的数组，可以在各种情况下充当 Web 应用程序的图标表示。例如，它们可用于在其他应用程序列表中表示 Web 应用程序，或者将 Web 应用程序与 OS 的任务切换器和/或系统首选项集成。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres.webp"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"48x48"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/webp"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"48x48"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/hd_hi.ico"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"72x72 96x96 128x128 256x256"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/hd_hi.svg"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"257x257"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>display</strong> 其值是 DisplayModeType 值之一，表示开发人员对 Web 应用程序的首选显示模式。可以设置</p><ul><li>“fullscreen” 占用整个可用的显示区域；</li><li>“standalone” 使其外观和感觉就像一个独立的本机应用程序；</li><li>“minimal-ui” 类似于 standalone 模式，但为最终用户提供了一些方法来访问用于控制导航的最小 UI 元素集（即，后退，前进，重新加载以及可能以某种方式查看文档的地址）；</li><li>“browser” 使用特定于平台的约定打开 Web 应用程序，以在用户代理中打开超链接（例如，在浏览器选项卡或新窗口中）；</li></ul><p><strong>orientation</strong> Web 应用程序的所有顶级浏览上下文的默认方向。</p><p><strong>start_url</strong> 表示起始 URL 的字符串，该 URL 是用户启动 Web 应用程序时开发人员更喜欢用户代理加载的 URL（例如，当用户从设备的应用程序菜单中单击 Web 应用程序的图标时或主屏幕）。</p><p><strong>serviceworker</strong> 表示应用中 serviceWorker 的信息。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"serviceworker": &#123;</span><br><span class="line">  "src": "sw.js",</span><br><span class="line">  "scope": "/foo",</span><br><span class="line">  "update_via_cache": "none"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>theme_color</strong> 应用程序上下文的默认主题颜色。</p><p><strong>related_applications</strong> 是底层应用程序平台可访问的应用程序。</p><p><strong>prefer_related_applications</strong> 表示相关应用程序是否应优先于当前的 Web 应用程序。</p><p><strong>background_color</strong> Web 应用程序的预期背景颜色。</p><p><strong>categories</strong> Web 应用程序所属的预期应用程序类别。</p><p><strong>screenshots</strong> 一个 ImageResources 数组，表示常见使用场景中的 Web 应用程序的截图。</p><p><strong>iarc_rating_id</strong> 用于确定 Web 应用程序适合的年龄。</p><p>一个完整的示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"lang"</span>: <span class="string">"en"</span>,</span><br><span class="line">  <span class="attr">"dir"</span>: <span class="string">"ltr"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Super Racer 3000"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"The ultimate futuristic racing game from the future!"</span>,</span><br><span class="line">  <span class="attr">"short_name"</span>: <span class="string">"Racer3K"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres.webp"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"64x64"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/webp"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"64x64"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/hd_hi"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"128x128"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"scope"</span>: <span class="string">"/racer/"</span>,</span><br><span class="line">  <span class="attr">"start_url"</span>: <span class="string">"/racer/start.html"</span>,</span><br><span class="line">  <span class="attr">"display"</span>: <span class="string">"fullscreen"</span>,</span><br><span class="line">  <span class="attr">"orientation"</span>: <span class="string">"landscape"</span>,</span><br><span class="line">  <span class="attr">"theme_color"</span>: <span class="string">"aliceblue"</span>,</span><br><span class="line">  <span class="attr">"background_color"</span>: <span class="string">"red"</span>,</span><br><span class="line">  <span class="attr">"serviceworker"</span>: &#123;</span><br><span class="line">    <span class="attr">"src"</span>: <span class="string">"sw.js"</span>,</span><br><span class="line">    <span class="attr">"scope"</span>: <span class="string">"/racer/"</span>,</span><br><span class="line">    <span class="attr">"update_via_cache"</span>: <span class="string">"none"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"screenshots"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"screenshots/in-game-1x.jpg"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"640x480"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/jpeg"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"screenshots/in-game-2x.jpg"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"1280x920"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/jpeg"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要在页面是使用的话直接用 <link> 标签引用即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"/manifest.json"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这样浏览器就可以安装你的 Web 应用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网站要支持 PWA，需要一个 &lt;code&gt;manifest.json&lt;/code&gt; 文件，W3C Web App Manifest 的草案上定义了以下的字段，解释一下每个字段是什么意思。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="PWA" scheme="https://coldstone.fun/tags/PWA/"/>
    
  </entry>
  
  <entry>
    <title>让 Hugo 博客支持 PWA</title>
    <link href="https://coldstone.fun/post/2019/07/23/add-pwa-support-to-hugo/"/>
    <id>https://coldstone.fun/post/2019/07/23/add-pwa-support-to-hugo/</id>
    <published>2019-07-23T21:34:17.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>让用 Hugo 搭建的博客支持 PWA 很简单，只需 2 个步骤即可</p><a id="more"></a><p>让用 Hugo 搭建的博客支持 PWA 很简单，只需 2 个步骤即可：</p><h2 id="添加一个-manifest-json-文件"><a href="#添加一个-manifest-json-文件" class="headerlink" title="添加一个 manifest.json 文件"></a>添加一个 manifest.json 文件</h2><p>使用 <a href="https://app-manifest.firebaseapp.com" target="_blank" rel="noopener">https://app-manifest.firebaseapp.com</a> 来生成博客的 manifest.json 文件，然后将生成出来的文件和图片放到博客的 static 目录，然后在 layout/index.html 的 <head> 标签内引用这个文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"/manifest.json"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样你的博客就可以安装到桌面了</p><h2 id="使用-Workbox-工具注册-ServiceWorker"><a href="#使用-Workbox-工具注册-ServiceWorker" class="headerlink" title="使用 Workbox 工具注册 ServiceWorker"></a>使用 Workbox 工具注册 ServiceWorker</h2><p>在 static 新建一个 <code>sw.js</code> 文件，在文件添加以下内容用来为网络请求添加缓存；主要是缓存静态资源 js，css，图片以及字体等文件，<br>详细文档可以查看 <a href="https://developers.google.cn/web/tools/workbox" target="_blank" rel="noopener">Workbox 文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">'https://cdn.jsdelivr.net/npm/workbox-cdn/workbox/workbox-sw.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (workbox) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Yay! Workbox is loaded 🎉`</span>)</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /\.(?:js|css)$/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">      cacheName: <span class="string">'static-resources'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /\.(?:png|jpg|jpeg|svg|gif)$/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">      cacheName: <span class="string">'image-cache'</span>,</span><br><span class="line">      plugins: [</span><br><span class="line">        <span class="keyword">new</span> workbox.expiration.Plugin(&#123;</span><br><span class="line">          maxEntries: <span class="number">20</span>,</span><br><span class="line">          maxAgeSeconds: <span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/fonts\.googleapis\.com/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">      cacheName: <span class="string">'google-fonts-stylesheets'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/fonts\.gstatic\.com/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">      cacheName: <span class="string">'google-fonts-webfonts'</span>,</span><br><span class="line">      plugins: [</span><br><span class="line">        <span class="keyword">new</span> workbox.cacheableResponse.Plugin(&#123;</span><br><span class="line">          statuses: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> workbox.expiration.Plugin(&#123;</span><br><span class="line">          maxAgeSeconds: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span>,</span><br><span class="line">          maxEntries: <span class="number">30</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Boo! Workbox didn't load 😬`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本完成了，可以用 Chrome 的 Audits 的工具跑了一下分，看看还有什么地方要修改的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;让用 Hugo 搭建的博客支持 PWA 很简单，只需 2 个步骤即可&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="PWA" scheme="https://coldstone.fun/tags/PWA/"/>
    
  </entry>
  
  <entry>
    <title>了解 &lt;Link&gt; 标签上 Rel=prexxx 的作用</title>
    <link href="https://coldstone.fun/post/2019/07/22/understand-link-prexxx/"/>
    <id>https://coldstone.fun/post/2019/07/22/understand-link-prexxx/</id>
    <published>2019-07-22T01:39:27.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>在 HTML 中 <link> 标签指定了当前文档与外部资源之间的关系，本文说明 <link> 标签的 rel 属性分别设置 dns-prefetch，preconnect，prefetch，preload，prerender 的时候有说明作用</p><a id="more"></a><p>在 HTML 中 <link> 标签指定了当前文档与外部资源之间的关系<br>本文说明 <link> 标签的 rel 属性分别设置 dns-prefetch，preconnect，prefetch，preload，prerender 的时候有说明作用</p><p>dns-prefetch：向浏览器提示需要资源，允许浏览器在用户单击链接之前进行 DNS 查找和协议握手</p><p>preconnect：向浏览器提供提示，建议它提前打开与链接网站的连接，而不泄露任何私人信息或下载任何内容，以便在遵循链接时可以更快地获取链接的内容</p><p>prefetch：建议浏览器提前获取链接资源，因为它可能是用户请求的。 从 Firefox 44 开始，将考虑 crossorigin 属性的值，从而可以进行匿名预取</p><p>preload：告诉浏览器下载资源，因为稍后在当前导航期间将需要此资源</p><p>prerender：建议浏览器提前获取链接资源，并且它还在屏幕外渲染预取内容，以便在需要时可以快速呈现给用户</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://devdocs.io/html/link_types" target="_blank" rel="noopener">link_types</a></p><p><a href="https://stackoverflow.com/questions/47273743/preconnect-vs-dns-prefetch-resource-hints" target="_blank" rel="noopener">preconnect-vs-dns-prefetch-resource-hints</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 HTML 中 &lt;link&gt; 标签指定了当前文档与外部资源之间的关系，本文说明 &lt;link&gt; 标签的 rel 属性分别设置 dns-prefetch，preconnect，prefetch，preload，prerender 的时候有说明作用&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTML" scheme="https://coldstone.fun/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>浏览器请求耗时阶段解释</title>
    <link href="https://coldstone.fun/post/2019/07/18/request-timimg/"/>
    <id>https://coldstone.fun/post/2019/07/18/request-timimg/</id>
    <published>2019-07-18T00:04:07.000Z</published>
    <updated>2021-06-28T09:25:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个浏览器网络请求耗时阶段解释</p><a id="more"></a><h3 id="Queueing"><a href="#Queueing" class="headerlink" title="Queueing"></a>Queueing</h3><p>浏览器会在以下情况时将请求加入队列，有优先级更高的请求；当请求协议是 HTTP/1.0 和 HTTP/1.1 时，同一域名下已经有 6 个 TCP 链接；浏览器在分配磁盘缓存</p><h3 id="Stalled"><a href="#Stalled" class="headerlink" title="Stalled"></a>Stalled</h3><p>由于排队中描述的任何原因，请求可能会停止</p><h3 id="DNS-Lookup"><a href="#DNS-Lookup" class="headerlink" title="DNS Lookup"></a>DNS Lookup</h3><p>浏览器正在解析请求的 IP 地址</p><h3 id="Proxy-negotiation"><a href="#Proxy-negotiation" class="headerlink" title="Proxy negotiation"></a>Proxy negotiation</h3><p>浏览器与代理服务器协商请求</p><h3 id="Request-sent"><a href="#Request-sent" class="headerlink" title="Request sent"></a>Request sent</h3><p>请求已经发出</p><h3 id="ServiceWorker-Preparation"><a href="#ServiceWorker-Preparation" class="headerlink" title="ServiceWorker Preparation"></a>ServiceWorker Preparation</h3><p>浏览器启动 service worker</p><h3 id="Request-to-ServiceWorker"><a href="#Request-to-ServiceWorker" class="headerlink" title="Request to ServiceWorker"></a>Request to ServiceWorker</h3><p>请求已经向 service worker 发出</p><h3 id="Waiting-TTFB"><a href="#Waiting-TTFB" class="headerlink" title="Waiting (TTFB)"></a>Waiting (TTFB)</h3><p>浏览器等待第一个字节返回，此时间包括 1 次往返延迟和服务器准备响应所用的时间。</p><h3 id="Content-Download"><a href="#Content-Download" class="headerlink" title="Content Download"></a>Content Download</h3><p>浏览器接收响应，下载返回内容</p><h3 id="Receiving-Push"><a href="#Receiving-Push" class="headerlink" title="Receiving Push"></a>Receiving Push</h3><p>浏览器收到通过 HTTP/2 Server Push 的响应</p><h3 id="Reading-Push"><a href="#Reading-Push" class="headerlink" title="Reading Push"></a>Reading Push</h3><p>浏览器正在读取之前获取存储到本地的数据</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于一个浏览器网络请求耗时阶段解释&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Browser" scheme="https://coldstone.fun/tags/Browser/"/>
    
  </entry>
  
  <entry>
    <title>Dart 语言中的 Final 与 Const 的区别</title>
    <link href="https://coldstone.fun/post/2019/07/16/dart-final-vs-const/"/>
    <id>https://coldstone.fun/post/2019/07/16/dart-final-vs-const/</id>
    <published>2019-07-16T01:23:06.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>在 Dart 中有 <code>final</code> 和 <code>const</code> 两个关键字，貌似都是表示常量的，但是它们还是有区别的</p><a id="more"></a><p>在 Dart 中有 <code>final</code> 和 <code>const</code> 两个关键字，貌似都是表示常量的，但是它们还是有区别的</p><p>final 变量的值只能被设置一次； const 变量在编译时就已经固定 (const 变量是隐式 final 的类型.) 最高级 final 变量或类变量在第一次使用时被初始化。</p><p><a href="https://dart.dev/guides/language/language-tour#final-and-const" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Dart 中有 &lt;code&gt;final&lt;/code&gt; 和 &lt;code&gt;const&lt;/code&gt; 两个关键字，貌似都是表示常量的，但是它们还是有区别的&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Dart" scheme="https://coldstone.fun/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>关于应用的 Code Signing</title>
    <link href="https://coldstone.fun/post/2019/07/15/code-signing/"/>
    <id>https://coldstone.fun/post/2019/07/15/code-signing/</id>
    <published>2019-07-15T04:54:56.000Z</published>
    <updated>2021-06-28T09:25:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter 项目代码签名</p><a id="more"></a><h2 id="代码签名"><a href="#代码签名" class="headerlink" title="代码签名"></a>代码签名</h2><p>要将应用发布到 <code>Apple store</code> 或者 <code>Goople play</code> 上就必须对你的应用进行代码签名，代码签名目的是为了识别谁开发了该应用程序，并确保该应用程序的所有更新均来自这个人。</p><h2 id="Andorid"><a href="#Andorid" class="headerlink" title="Andorid"></a>Andorid</h2><p>对于 Android 来说有两种签名：发布签名和上传签名。最终用户下载的 <code>.aab/.apk</code> 文件使用发布签名。上传签名提供给开发者上传到 <code>Google Play</code> 商店的认证。上传后，<code>Google Play</code> 会重新使用发布签名对 <code>.aab/.apk</code> 文件签名。</p><ol><li>使用 <code>Android Studio</code> <a href="https://developer.android.google.cn/studio/publish/app-signing#sign-apk" target="_blank" rel="noopener">为您的应用签名</a></li><li>使用命令行工具进行签名 <a href="https://flutter.cn/docs/deployment/android#signing-the-app" target="_blank" rel="noopener">为 app 签名</a></li></ol><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><ol><li>在 <a href="https://developer.apple.com/account/ios/certificate/" target="_blank" rel="noopener">Apple Developer Account console</a> 创建并下载一个分发证书。</li><li>打开 <code>ios/Runner.xcworkspace</code> 在你的项目设置里选择一个分发证书。</li></ol><p><a href="https://developer.apple.com/support/code-signing/" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flutter 项目代码签名&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Andorid" scheme="https://coldstone.fun/tags/Andorid/"/>
    
      <category term="iOS" scheme="https://coldstone.fun/tags/iOS/"/>
    
  </entry>
  
</feed>
